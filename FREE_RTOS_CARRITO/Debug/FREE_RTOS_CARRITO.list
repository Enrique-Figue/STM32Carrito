
FREE_RTOS_CARRITO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc7c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001550  0800cd90  0800cd90  0001cd90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2e0  0800e2e0  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e2e0  0800e2e0  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e2e0  0800e2e0  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2e0  0800e2e0  0001e2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2e4  0800e2e4  0001e2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800e2e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d6c  200000c0  0800e3a8  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e2c  0800e3a8  00022e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eaa7  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e09  00000000  00000000  0003eb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a8  00000000  00000000  000429a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001890  00000000  00000000  00044348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c536  00000000  00000000  00045bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ca48  00000000  00000000  0006210e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e68d  00000000  00000000  0007eb56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011d1e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007940  00000000  00000000  0011d238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c0 	.word	0x200000c0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cd74 	.word	0x0800cd74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c4 	.word	0x200000c4
 800014c:	0800cd74 	.word	0x0800cd74

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_fmul>:
 8000d48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d50:	bf1e      	ittt	ne
 8000d52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d56:	ea92 0f0c 	teqne	r2, ip
 8000d5a:	ea93 0f0c 	teqne	r3, ip
 8000d5e:	d06f      	beq.n	8000e40 <__aeabi_fmul+0xf8>
 8000d60:	441a      	add	r2, r3
 8000d62:	ea80 0c01 	eor.w	ip, r0, r1
 8000d66:	0240      	lsls	r0, r0, #9
 8000d68:	bf18      	it	ne
 8000d6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6e:	d01e      	beq.n	8000dae <__aeabi_fmul+0x66>
 8000d70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d88:	bf3e      	ittt	cc
 8000d8a:	0049      	lslcc	r1, r1, #1
 8000d8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d90:	005b      	lslcc	r3, r3, #1
 8000d92:	ea40 0001 	orr.w	r0, r0, r1
 8000d96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d9a:	2afd      	cmp	r2, #253	; 0xfd
 8000d9c:	d81d      	bhi.n	8000dda <__aeabi_fmul+0x92>
 8000d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000da2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da6:	bf08      	it	eq
 8000da8:	f020 0001 	biceq.w	r0, r0, #1
 8000dac:	4770      	bx	lr
 8000dae:	f090 0f00 	teq	r0, #0
 8000db2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db6:	bf08      	it	eq
 8000db8:	0249      	lsleq	r1, r1, #9
 8000dba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc2:	3a7f      	subs	r2, #127	; 0x7f
 8000dc4:	bfc2      	ittt	gt
 8000dc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dce:	4770      	bxgt	lr
 8000dd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	dc5d      	bgt.n	8000e98 <__aeabi_fmul+0x150>
 8000ddc:	f112 0f19 	cmn.w	r2, #25
 8000de0:	bfdc      	itt	le
 8000de2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de6:	4770      	bxle	lr
 8000de8:	f1c2 0200 	rsb	r2, r2, #0
 8000dec:	0041      	lsls	r1, r0, #1
 8000dee:	fa21 f102 	lsr.w	r1, r1, r2
 8000df2:	f1c2 0220 	rsb	r2, r2, #32
 8000df6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfe:	f140 0000 	adc.w	r0, r0, #0
 8000e02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e06:	bf08      	it	eq
 8000e08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0c:	4770      	bx	lr
 8000e0e:	f092 0f00 	teq	r2, #0
 8000e12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0040      	lsleq	r0, r0, #1
 8000e1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1e:	3a01      	subeq	r2, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xce>
 8000e22:	ea40 000c 	orr.w	r0, r0, ip
 8000e26:	f093 0f00 	teq	r3, #0
 8000e2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	bf02      	ittt	eq
 8000e30:	0049      	lsleq	r1, r1, #1
 8000e32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e36:	3b01      	subeq	r3, #1
 8000e38:	d0f9      	beq.n	8000e2e <__aeabi_fmul+0xe6>
 8000e3a:	ea41 010c 	orr.w	r1, r1, ip
 8000e3e:	e78f      	b.n	8000d60 <__aeabi_fmul+0x18>
 8000e40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e44:	ea92 0f0c 	teq	r2, ip
 8000e48:	bf18      	it	ne
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d00a      	beq.n	8000e66 <__aeabi_fmul+0x11e>
 8000e50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e54:	bf18      	it	ne
 8000e56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	d1d8      	bne.n	8000e0e <__aeabi_fmul+0xc6>
 8000e5c:	ea80 0001 	eor.w	r0, r0, r1
 8000e60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e64:	4770      	bx	lr
 8000e66:	f090 0f00 	teq	r0, #0
 8000e6a:	bf17      	itett	ne
 8000e6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e70:	4608      	moveq	r0, r1
 8000e72:	f091 0f00 	teqne	r1, #0
 8000e76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e7a:	d014      	beq.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	d101      	bne.n	8000e86 <__aeabi_fmul+0x13e>
 8000e82:	0242      	lsls	r2, r0, #9
 8000e84:	d10f      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e86:	ea93 0f0c 	teq	r3, ip
 8000e8a:	d103      	bne.n	8000e94 <__aeabi_fmul+0x14c>
 8000e8c:	024b      	lsls	r3, r1, #9
 8000e8e:	bf18      	it	ne
 8000e90:	4608      	movne	r0, r1
 8000e92:	d108      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea4:	4770      	bx	lr
 8000ea6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eaa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eae:	4770      	bx	lr

08000eb0 <__aeabi_fdiv>:
 8000eb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb8:	bf1e      	ittt	ne
 8000eba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ebe:	ea92 0f0c 	teqne	r2, ip
 8000ec2:	ea93 0f0c 	teqne	r3, ip
 8000ec6:	d069      	beq.n	8000f9c <__aeabi_fdiv+0xec>
 8000ec8:	eba2 0203 	sub.w	r2, r2, r3
 8000ecc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed0:	0249      	lsls	r1, r1, #9
 8000ed2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed6:	d037      	beq.n	8000f48 <__aeabi_fdiv+0x98>
 8000ed8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000edc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	bf38      	it	cc
 8000eec:	005b      	lslcc	r3, r3, #1
 8000eee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ef2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	bf24      	itt	cs
 8000efa:	1a5b      	subcs	r3, r3, r1
 8000efc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f04:	bf24      	itt	cs
 8000f06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f12:	bf24      	itt	cs
 8000f14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	bf18      	it	ne
 8000f2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f32:	d1e0      	bne.n	8000ef6 <__aeabi_fdiv+0x46>
 8000f34:	2afd      	cmp	r2, #253	; 0xfd
 8000f36:	f63f af50 	bhi.w	8000dda <__aeabi_fmul+0x92>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f40:	bf08      	it	eq
 8000f42:	f020 0001 	biceq.w	r0, r0, #1
 8000f46:	4770      	bx	lr
 8000f48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f50:	327f      	adds	r2, #127	; 0x7f
 8000f52:	bfc2      	ittt	gt
 8000f54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f5c:	4770      	bxgt	lr
 8000f5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	3a01      	subs	r2, #1
 8000f68:	e737      	b.n	8000dda <__aeabi_fmul+0x92>
 8000f6a:	f092 0f00 	teq	r2, #0
 8000f6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0040      	lsleq	r0, r0, #1
 8000f76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f7a:	3a01      	subeq	r2, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xc2>
 8000f7e:	ea40 000c 	orr.w	r0, r0, ip
 8000f82:	f093 0f00 	teq	r3, #0
 8000f86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f8a:	bf02      	ittt	eq
 8000f8c:	0049      	lsleq	r1, r1, #1
 8000f8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f92:	3b01      	subeq	r3, #1
 8000f94:	d0f9      	beq.n	8000f8a <__aeabi_fdiv+0xda>
 8000f96:	ea41 010c 	orr.w	r1, r1, ip
 8000f9a:	e795      	b.n	8000ec8 <__aeabi_fdiv+0x18>
 8000f9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa0:	ea92 0f0c 	teq	r2, ip
 8000fa4:	d108      	bne.n	8000fb8 <__aeabi_fdiv+0x108>
 8000fa6:	0242      	lsls	r2, r0, #9
 8000fa8:	f47f af7d 	bne.w	8000ea6 <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	f47f af70 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e776      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fb8:	ea93 0f0c 	teq	r3, ip
 8000fbc:	d104      	bne.n	8000fc8 <__aeabi_fdiv+0x118>
 8000fbe:	024b      	lsls	r3, r1, #9
 8000fc0:	f43f af4c 	beq.w	8000e5c <__aeabi_fmul+0x114>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e76e      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fcc:	bf18      	it	ne
 8000fce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fd2:	d1ca      	bne.n	8000f6a <__aeabi_fdiv+0xba>
 8000fd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd8:	f47f af5c 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fdc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fe0:	f47f af3c 	bne.w	8000e5c <__aeabi_fmul+0x114>
 8000fe4:	e75f      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fe6:	bf00      	nop

08000fe8 <__gesf2>:
 8000fe8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fec:	e006      	b.n	8000ffc <__cmpsf2+0x4>
 8000fee:	bf00      	nop

08000ff0 <__lesf2>:
 8000ff0:	f04f 0c01 	mov.w	ip, #1
 8000ff4:	e002      	b.n	8000ffc <__cmpsf2+0x4>
 8000ff6:	bf00      	nop

08000ff8 <__cmpsf2>:
 8000ff8:	f04f 0c01 	mov.w	ip, #1
 8000ffc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001000:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001004:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001008:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800100c:	bf18      	it	ne
 800100e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001012:	d011      	beq.n	8001038 <__cmpsf2+0x40>
 8001014:	b001      	add	sp, #4
 8001016:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800101a:	bf18      	it	ne
 800101c:	ea90 0f01 	teqne	r0, r1
 8001020:	bf58      	it	pl
 8001022:	ebb2 0003 	subspl.w	r0, r2, r3
 8001026:	bf88      	it	hi
 8001028:	17c8      	asrhi	r0, r1, #31
 800102a:	bf38      	it	cc
 800102c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001030:	bf18      	it	ne
 8001032:	f040 0001 	orrne.w	r0, r0, #1
 8001036:	4770      	bx	lr
 8001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800103c:	d102      	bne.n	8001044 <__cmpsf2+0x4c>
 800103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001042:	d105      	bne.n	8001050 <__cmpsf2+0x58>
 8001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001048:	d1e4      	bne.n	8001014 <__cmpsf2+0x1c>
 800104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104e:	d0e1      	beq.n	8001014 <__cmpsf2+0x1c>
 8001050:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <__aeabi_cfrcmple>:
 8001058:	4684      	mov	ip, r0
 800105a:	4608      	mov	r0, r1
 800105c:	4661      	mov	r1, ip
 800105e:	e7ff      	b.n	8001060 <__aeabi_cfcmpeq>

08001060 <__aeabi_cfcmpeq>:
 8001060:	b50f      	push	{r0, r1, r2, r3, lr}
 8001062:	f7ff ffc9 	bl	8000ff8 <__cmpsf2>
 8001066:	2800      	cmp	r0, #0
 8001068:	bf48      	it	mi
 800106a:	f110 0f00 	cmnmi.w	r0, #0
 800106e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001070 <__aeabi_fcmpeq>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff fff4 	bl	8001060 <__aeabi_cfcmpeq>
 8001078:	bf0c      	ite	eq
 800107a:	2001      	moveq	r0, #1
 800107c:	2000      	movne	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmplt>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffea 	bl	8001060 <__aeabi_cfcmpeq>
 800108c:	bf34      	ite	cc
 800108e:	2001      	movcc	r0, #1
 8001090:	2000      	movcs	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmple>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffe0 	bl	8001060 <__aeabi_cfcmpeq>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpge>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffd2 	bl	8001058 <__aeabi_cfrcmple>
 80010b4:	bf94      	ite	ls
 80010b6:	2001      	movls	r0, #1
 80010b8:	2000      	movhi	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpgt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffc8 	bl	8001058 <__aeabi_cfrcmple>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_f2iz>:
 80010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010dc:	d30f      	bcc.n	80010fe <__aeabi_f2iz+0x2a>
 80010de:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e6:	d90d      	bls.n	8001104 <__aeabi_f2iz+0x30>
 80010e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f4:	fa23 f002 	lsr.w	r0, r3, r2
 80010f8:	bf18      	it	ne
 80010fa:	4240      	negne	r0, r0
 80010fc:	4770      	bx	lr
 80010fe:	f04f 0000 	mov.w	r0, #0
 8001102:	4770      	bx	lr
 8001104:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001108:	d101      	bne.n	800110e <__aeabi_f2iz+0x3a>
 800110a:	0242      	lsls	r2, r0, #9
 800110c:	d105      	bne.n	800111a <__aeabi_f2iz+0x46>
 800110e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001112:	bf08      	it	eq
 8001114:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001118:	4770      	bx	lr
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	4770      	bx	lr

08001120 <__aeabi_f2uiz>:
 8001120:	0042      	lsls	r2, r0, #1
 8001122:	d20e      	bcs.n	8001142 <__aeabi_f2uiz+0x22>
 8001124:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001128:	d30b      	bcc.n	8001142 <__aeabi_f2uiz+0x22>
 800112a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001132:	d409      	bmi.n	8001148 <__aeabi_f2uiz+0x28>
 8001134:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800113c:	fa23 f002 	lsr.w	r0, r3, r2
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr
 8001148:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800114c:	d101      	bne.n	8001152 <__aeabi_f2uiz+0x32>
 800114e:	0242      	lsls	r2, r0, #9
 8001150:	d102      	bne.n	8001158 <__aeabi_f2uiz+0x38>
 8001152:	f04f 30ff 	mov.w	r0, #4294967295
 8001156:	4770      	bx	lr
 8001158:	f04f 0000 	mov.w	r0, #0
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop

08001160 <MPU9250_DMP>:
{
	return inp < min ? min : (inp > max ? max : inp);
}

int MPU9250_DMP()
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
	_mSense = 6.665f; // Constant - 4915 / 32760
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <MPU9250_DMP+0x24>)
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <MPU9250_DMP+0x28>)
 8001168:	601a      	str	r2, [r3, #0]
	_aSense = 0.0f;   // Updated after accel FSR is set
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MPU9250_DMP+0x2c>)
 800116c:	2200      	movs	r2, #0
 800116e:	801a      	strh	r2, [r3, #0]
	_gSense = 0.0f;   // Updated after gyro FSR is set
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <MPU9250_DMP+0x30>)
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
	return 0;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20002b24 	.word	0x20002b24
 8001188:	40d547ae 	.word	0x40d547ae
 800118c:	20002b54 	.word	0x20002b54
 8001190:	20002b04 	.word	0x20002b04

08001194 <MPU9250_begin>:

inv_error_t MPU9250_begin(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	inv_error_t result;
	struct int_param_s int_param;

	//	Wire.begin();

	result = mpu_init(&int_param);
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fd7d 	bl	8001c9c <mpu_init>
 80011a2:	6078      	str	r0, [r7, #4]

	if (result)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MPU9250_begin+0x1a>
		return result;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	e011      	b.n	80011d2 <MPU9250_begin+0x3e>

	mpu_set_bypass(1); // Place all slaves (including compass) on primary bus
 80011ae:	2001      	movs	r0, #1
 80011b0:	f001 fca4 	bl	8002afc <mpu_set_bypass>

	MPU9250_setSensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
 80011b4:	2079      	movs	r0, #121	; 0x79
 80011b6:	f000 f85b 	bl	8001270 <MPU9250_setSensors>

	_gSense = MPU9250_getGyroSens();
 80011ba:	f000 f813 	bl	80011e4 <MPU9250_getGyroSens>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <MPU9250_begin+0x48>)
 80011c2:	6013      	str	r3, [r2, #0]
	_aSense = MPU9250_getAccelSens();
 80011c4:	f000 f820 	bl	8001208 <MPU9250_getAccelSens>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <MPU9250_begin+0x4c>)
 80011ce:	801a      	strh	r2, [r3, #0]

	return result;
 80011d0:	687b      	ldr	r3, [r7, #4]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20002b04 	.word	0x20002b04
 80011e0:	20002b54 	.word	0x20002b54

080011e4 <MPU9250_getGyroSens>:

	return 0;
}

float MPU9250_getGyroSens(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
	float sens;
	if (mpu_get_gyro_sens(&sens) == INV_SUCCESS)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 faad 	bl	800274c <mpu_get_gyro_sens>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <MPU9250_getGyroSens+0x18>
	{
		return sens;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	e001      	b.n	8001200 <MPU9250_getGyroSens+0x1c>
	}
	return 0;
 80011fc:	f04f 0300 	mov.w	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <MPU9250_getAccelSens>:

unsigned short MPU9250_getAccelSens(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
	unsigned short sens;
	if (mpu_get_accel_sens(&sens) == INV_SUCCESS)
 800120e:	1dbb      	adds	r3, r7, #6
 8001210:	4618      	mov	r0, r3
 8001212:	f001 fad3 	bl	80027bc <mpu_get_accel_sens>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <MPU9250_getAccelSens+0x18>
	{
		return sens;
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	e000      	b.n	8001222 <MPU9250_getAccelSens+0x1a>
	}
	return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <MPU9250_fifoAvailable>:
{
	return mpu_reset_fifo();
}

unsigned short MPU9250_fifoAvailable(void)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
	unsigned char fifoH, fifoL;

	if (mpu_read_reg(MPU9250_FIFO_COUNTH, &fifoH) != INV_SUCCESS)
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	4619      	mov	r1, r3
 8001234:	2072      	movs	r0, #114	; 0x72
 8001236:	f000 fd03 	bl	8001c40 <mpu_read_reg>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MPU9250_fifoAvailable+0x1a>
		return 0;
 8001240:	2300      	movs	r3, #0
 8001242:	e011      	b.n	8001268 <MPU9250_fifoAvailable+0x3e>
	if (mpu_read_reg(MPU9250_FIFO_COUNTL, &fifoL) != INV_SUCCESS)
 8001244:	1dbb      	adds	r3, r7, #6
 8001246:	4619      	mov	r1, r3
 8001248:	2073      	movs	r0, #115	; 0x73
 800124a:	f000 fcf9 	bl	8001c40 <mpu_read_reg>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MPU9250_fifoAvailable+0x2e>
		return 0;
 8001254:	2300      	movs	r3, #0
 8001256:	e007      	b.n	8001268 <MPU9250_fifoAvailable+0x3e>

	return (fifoH << 8) | fifoL;
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b21a      	sxth	r2, r3
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	b21b      	sxth	r3, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	b21b      	sxth	r3, r3
 8001266:	b29b      	uxth	r3, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <MPU9250_setSensors>:

	return INV_SUCCESS;
}

inv_error_t MPU9250_setSensors(unsigned char sensors)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
	return mpu_set_sensors(sensors);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fb2d 	bl	80028dc <mpu_set_sensors>
 8001282:	4603      	mov	r3, r0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <MPU9250_dataReady>:

bool MPU9250_dataReady()
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
	unsigned char intStatusReg;

	if (mpu_read_reg(MPU9250_INT_STATUS, &intStatusReg) == INV_SUCCESS)
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	4619      	mov	r1, r3
 8001296:	203a      	movs	r0, #58	; 0x3a
 8001298:	f000 fcd2 	bl	8001c40 <mpu_read_reg>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d108      	bne.n	80012b4 <MPU9250_dataReady+0x28>
	{
		return (intStatusReg & (1 << INT_STATUS_RAW_DATA_RDY_INT));
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf14      	ite	ne
 80012ac:	2301      	movne	r3, #1
 80012ae:	2300      	moveq	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	e000      	b.n	80012b6 <MPU9250_dataReady+0x2a>
	}
	return false;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <MPU9250_update>:

inv_error_t MPU9250_update(unsigned char sensors)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
	inv_error_t aErr = INV_SUCCESS;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
	inv_error_t gErr = INV_SUCCESS;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
	inv_error_t mErr = INV_SUCCESS;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
	inv_error_t tErr = INV_SUCCESS;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]

	if (sensors & UPDATE_ACCEL)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <MPU9250_update+0x2a>
		aErr = MPU9250_updateAccel();
 80012e2:	f000 f825 	bl	8001330 <MPU9250_updateAccel>
 80012e6:	6178      	str	r0, [r7, #20]
	if (sensors & UPDATE_GYRO)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <MPU9250_update+0x3a>
		gErr = MPU9250_updateGyro();
 80012f2:	f000 f847 	bl	8001384 <MPU9250_updateGyro>
 80012f6:	6138      	str	r0, [r7, #16]
	if (sensors & UPDATE_COMPASS)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <MPU9250_update+0x4a>
		mErr = MPU9250_updateCompass();
 8001302:	f000 f869 	bl	80013d8 <MPU9250_updateCompass>
 8001306:	60f8      	str	r0, [r7, #12]
	if (sensors & UPDATE_TEMP)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <MPU9250_update+0x5a>
		tErr = MPU9250_updateTemperature();
 8001312:	f000 f88b 	bl	800142c <MPU9250_updateTemperature>
 8001316:	60b8      	str	r0, [r7, #8]

	return aErr | gErr | mErr | tErr;
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	431a      	orrs	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	431a      	orrs	r2, r3
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	4313      	orrs	r3, r2
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <MPU9250_updateAccel>:

int MPU9250_updateAccel(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
	short data[3];

	if (mpu_get_accel_reg(data, &time_inside))
 8001336:	463b      	mov	r3, r7
 8001338:	490e      	ldr	r1, [pc, #56]	; (8001374 <MPU9250_updateAccel+0x44>)
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fe60 	bl	8002000 <mpu_get_accel_reg>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MPU9250_updateAccel+0x1a>
	{
		return INV_ERROR;
 8001346:	2320      	movs	r3, #32
 8001348:	e00f      	b.n	800136a <MPU9250_updateAccel+0x3a>
	}
	ax = data[X_AXIS];
 800134a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800134e:	461a      	mov	r2, r3
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MPU9250_updateAccel+0x48>)
 8001352:	601a      	str	r2, [r3, #0]
	ay = data[Y_AXIS];
 8001354:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001358:	461a      	mov	r2, r3
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <MPU9250_updateAccel+0x4c>)
 800135c:	601a      	str	r2, [r3, #0]
	az = data[Z_AXIS];
 800135e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001362:	461a      	mov	r2, r3
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MPU9250_updateAccel+0x50>)
 8001366:	601a      	str	r2, [r3, #0]
	return INV_SUCCESS;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20002b3c 	.word	0x20002b3c
 8001378:	20002b20 	.word	0x20002b20
 800137c:	20002b4c 	.word	0x20002b4c
 8001380:	20002b14 	.word	0x20002b14

08001384 <MPU9250_updateGyro>:

int MPU9250_updateGyro(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
	short data[3];

	if (mpu_get_gyro_reg(data, &time_inside))
 800138a:	463b      	mov	r3, r7
 800138c:	490e      	ldr	r1, [pc, #56]	; (80013c8 <MPU9250_updateGyro+0x44>)
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fdec 	bl	8001f6c <mpu_get_gyro_reg>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MPU9250_updateGyro+0x1a>
	{
		return INV_ERROR;
 800139a:	2320      	movs	r3, #32
 800139c:	e00f      	b.n	80013be <MPU9250_updateGyro+0x3a>
	}
	gx = data[X_AXIS];
 800139e:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MPU9250_updateGyro+0x48>)
 80013a6:	601a      	str	r2, [r3, #0]
	gy = data[Y_AXIS];
 80013a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <MPU9250_updateGyro+0x4c>)
 80013b0:	601a      	str	r2, [r3, #0]
	gz = data[Z_AXIS];
 80013b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MPU9250_updateGyro+0x50>)
 80013ba:	601a      	str	r2, [r3, #0]
	return INV_SUCCESS;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20002b3c 	.word	0x20002b3c
 80013cc:	20002b44 	.word	0x20002b44
 80013d0:	20002b0c 	.word	0x20002b0c
 80013d4:	20002b34 	.word	0x20002b34

080013d8 <MPU9250_updateCompass>:

int MPU9250_updateCompass(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
	short data[3];

	if (mpu_get_compass_reg(data, &time_inside))
 80013de:	463b      	mov	r3, r7
 80013e0:	490e      	ldr	r1, [pc, #56]	; (800141c <MPU9250_updateCompass+0x44>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 ff4a 	bl	800327c <mpu_get_compass_reg>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MPU9250_updateCompass+0x1a>
	{
		return INV_ERROR;
 80013ee:	2320      	movs	r3, #32
 80013f0:	e00f      	b.n	8001412 <MPU9250_updateCompass+0x3a>
	}
	mx = data[X_AXIS];
 80013f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MPU9250_updateCompass+0x48>)
 80013fa:	601a      	str	r2, [r3, #0]
	my = data[Y_AXIS];
 80013fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001400:	461a      	mov	r2, r3
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MPU9250_updateCompass+0x4c>)
 8001404:	601a      	str	r2, [r3, #0]
	mz = data[Z_AXIS];
 8001406:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800140a:	461a      	mov	r2, r3
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MPU9250_updateCompass+0x50>)
 800140e:	601a      	str	r2, [r3, #0]
	return INV_SUCCESS;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20002b3c 	.word	0x20002b3c
 8001420:	20002b50 	.word	0x20002b50
 8001424:	20002b1c 	.word	0x20002b1c
 8001428:	20002b38 	.word	0x20002b38

0800142c <MPU9250_updateTemperature>:

inv_error_t MPU9250_updateTemperature(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	return mpu_get_temperature(&temperature, &time_inside);
 8001430:	4903      	ldr	r1, [pc, #12]	; (8001440 <MPU9250_updateTemperature+0x14>)
 8001432:	4804      	ldr	r0, [pc, #16]	; (8001444 <MPU9250_updateTemperature+0x18>)
 8001434:	f000 fe2e 	bl	8002094 <mpu_get_temperature>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20002b3c 	.word	0x20002b3c
 8001444:	20002b18 	.word	0x20002b18

08001448 <MPU9250_dmpBegin>:
	long gyro[3], accel[3];
	return mpu_run_self_test(gyro, accel);
}

inv_error_t MPU9250_dmpBegin(unsigned short features, unsigned short fifoRate)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	460a      	mov	r2, r1
 8001452:	80fb      	strh	r3, [r7, #6]
 8001454:	4613      	mov	r3, r2
 8001456:	80bb      	strh	r3, [r7, #4]
	unsigned short feat = features;
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	81fb      	strh	r3, [r7, #14]
	unsigned short rate = fifoRate;
 800145c:	88bb      	ldrh	r3, [r7, #4]
 800145e:	81bb      	strh	r3, [r7, #12]

	if (MPU9250_dmpLoad() != INV_SUCCESS)
 8001460:	f000 f846 	bl	80014f0 <MPU9250_dmpLoad>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MPU9250_dmpBegin+0x26>
		return INV_ERROR;
 800146a:	2320      	movs	r3, #32
 800146c:	e03c      	b.n	80014e8 <MPU9250_dmpBegin+0xa0>

	// 3-axis and 6-axis LP quat are mutually exclusive.
	// If both are selected, default to 3-axis
	if (feat & DMP_FEATURE_LP_QUAT)
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d007      	beq.n	8001488 <MPU9250_dmpBegin+0x40>
	{
		feat &= ~(DMP_FEATURE_6X_LP_QUAT);
 8001478:	89fb      	ldrh	r3, [r7, #14]
 800147a:	f023 0310 	bic.w	r3, r3, #16
 800147e:	81fb      	strh	r3, [r7, #14]
		dmp_enable_lp_quat(1);
 8001480:	2001      	movs	r0, #1
 8001482:	f002 fb79 	bl	8003b78 <dmp_enable_lp_quat>
 8001486:	e007      	b.n	8001498 <MPU9250_dmpBegin+0x50>
	}
	else if (feat & DMP_FEATURE_6X_LP_QUAT)
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <MPU9250_dmpBegin+0x50>
		dmp_enable_6x_lp_quat(1);
 8001492:	2001      	movs	r0, #1
 8001494:	f002 fb97 	bl	8003bc6 <dmp_enable_6x_lp_quat>

	if (feat & DMP_FEATURE_GYRO_CAL)
 8001498:	89fb      	ldrh	r3, [r7, #14]
 800149a:	f003 0320 	and.w	r3, r3, #32
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <MPU9250_dmpBegin+0x60>
		dmp_enable_gyro_cal(1);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f002 fb38 	bl	8003b18 <dmp_enable_gyro_cal>

	if (MPU9250_dmpEnableFeatures(feat) != INV_SUCCESS)
 80014a8:	89fb      	ldrh	r3, [r7, #14]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f8cc 	bl	8001648 <MPU9250_dmpEnableFeatures>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MPU9250_dmpBegin+0x72>
		return INV_ERROR;
 80014b6:	2320      	movs	r3, #32
 80014b8:	e016      	b.n	80014e8 <MPU9250_dmpBegin+0xa0>

	if (rate < 1) {
 80014ba:	89bb      	ldrh	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <MPU9250_dmpBegin+0x7c>
		rate = 1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	81bb      	strh	r3, [r7, #12]
	}

	if (rate > 200) {
 80014c4:	89bb      	ldrh	r3, [r7, #12]
 80014c6:	2bc8      	cmp	r3, #200	; 0xc8
 80014c8:	d901      	bls.n	80014ce <MPU9250_dmpBegin+0x86>
		rate = 200;
 80014ca:	23c8      	movs	r3, #200	; 0xc8
 80014cc:	81bb      	strh	r3, [r7, #12]
	}

	if (MPU9250_dmpSetFifoRate(rate) != INV_SUCCESS)
 80014ce:	89bb      	ldrh	r3, [r7, #12]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 f814 	bl	80014fe <MPU9250_dmpSetFifoRate>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MPU9250_dmpBegin+0x98>
		return INV_ERROR;
 80014dc:	2320      	movs	r3, #32
 80014de:	e003      	b.n	80014e8 <MPU9250_dmpBegin+0xa0>

	return mpu_set_dmp_state(1);
 80014e0:	2001      	movs	r0, #1
 80014e2:	f001 fd39 	bl	8002f58 <mpu_set_dmp_state>
 80014e6:	4603      	mov	r3, r0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <MPU9250_dmpLoad>:

inv_error_t MPU9250_dmpLoad(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	return dmp_load_motion_driver_firmware();
 80014f4:	f001 ff5a 	bl	80033ac <dmp_load_motion_driver_firmware>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	bd80      	pop	{r7, pc}

080014fe <MPU9250_dmpSetFifoRate>:

	return 0;
}

inv_error_t MPU9250_dmpSetFifoRate(unsigned short rate)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	80fb      	strh	r3, [r7, #6]
	if (rate > MAX_DMP_SAMPLE_RATE) rate = MAX_DMP_SAMPLE_RATE;
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	2bc8      	cmp	r3, #200	; 0xc8
 800150c:	d901      	bls.n	8001512 <MPU9250_dmpSetFifoRate+0x14>
 800150e:	23c8      	movs	r3, #200	; 0xc8
 8001510:	80fb      	strh	r3, [r7, #6]
	return dmp_set_fifo_rate(rate);
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	4618      	mov	r0, r3
 8001516:	f001 ff59 	bl	80033cc <dmp_set_fifo_rate>
 800151a:	4603      	mov	r3, r0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <MPU9250_dmpUpdateFifo>:

inv_error_t MPU9250_dmpUpdateFifo(void)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b08d      	sub	sp, #52	; 0x34
 8001528:	af02      	add	r7, sp, #8
	long quat[4];
	unsigned long timestamp;
	short sensors;
	unsigned char more;

	if (dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors, &more)
 800152a:	1d3c      	adds	r4, r7, #4
 800152c:	f107 0208 	add.w	r2, r7, #8
 8001530:	f107 0118 	add.w	r1, r7, #24
 8001534:	f107 0020 	add.w	r0, r7, #32
 8001538:	1c7b      	adds	r3, r7, #1
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	1cbb      	adds	r3, r7, #2
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	4623      	mov	r3, r4
 8001542:	f002 fbab 	bl	8003c9c <dmp_read_fifo>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MPU9250_dmpUpdateFifo+0x2c>
		!= INV_SUCCESS)
	{
		return INV_ERROR;
 800154c:	2320      	movs	r3, #32
 800154e:	e060      	b.n	8001612 <MPU9250_dmpUpdateFifo+0xee>
	}

	if (sensors & INV_XYZ_ACCEL)
 8001550:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001554:	b29b      	uxth	r3, r3
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00e      	beq.n	800157c <MPU9250_dmpUpdateFifo+0x58>
	{
		ax = accel[X_AXIS];
 800155e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001562:	461a      	mov	r2, r3
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <MPU9250_dmpUpdateFifo+0xf8>)
 8001566:	601a      	str	r2, [r3, #0]
		ay = accel[Y_AXIS];
 8001568:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800156c:	461a      	mov	r2, r3
 800156e:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <MPU9250_dmpUpdateFifo+0xfc>)
 8001570:	601a      	str	r2, [r3, #0]
		az = accel[Z_AXIS];
 8001572:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001576:	461a      	mov	r2, r3
 8001578:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <MPU9250_dmpUpdateFifo+0x100>)
 800157a:	601a      	str	r2, [r3, #0]
	}
	if (sensors & INV_X_GYRO)
 800157c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001580:	b29b      	uxth	r3, r3
 8001582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001586:	2b00      	cmp	r3, #0
 8001588:	d004      	beq.n	8001594 <MPU9250_dmpUpdateFifo+0x70>
		gx = gyro[X_AXIS];
 800158a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800158e:	461a      	mov	r2, r3
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <MPU9250_dmpUpdateFifo+0x104>)
 8001592:	601a      	str	r2, [r3, #0]
	if (sensors & INV_Y_GYRO)
 8001594:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001598:	b29b      	uxth	r3, r3
 800159a:	f003 0320 	and.w	r3, r3, #32
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d004      	beq.n	80015ac <MPU9250_dmpUpdateFifo+0x88>
		gy = gyro[Y_AXIS];
 80015a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b20      	ldr	r3, [pc, #128]	; (800162c <MPU9250_dmpUpdateFifo+0x108>)
 80015aa:	601a      	str	r2, [r3, #0]
	if (sensors & INV_Z_GYRO)
 80015ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <MPU9250_dmpUpdateFifo+0xa0>
		gz = gyro[Z_AXIS];
 80015ba:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80015be:	461a      	mov	r2, r3
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <MPU9250_dmpUpdateFifo+0x10c>)
 80015c2:	601a      	str	r2, [r3, #0]
	if (sensors & INV_WXYZ_QUAT)
 80015c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d01b      	beq.n	800160a <MPU9250_dmpUpdateFifo+0xe6>
	{
		qw = quat[0];
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fb63 	bl	8000ca0 <__aeabi_i2f>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a15      	ldr	r2, [pc, #84]	; (8001634 <MPU9250_dmpUpdateFifo+0x110>)
 80015de:	6013      	str	r3, [r2, #0]
		qx = quat[1];
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fb5c 	bl	8000ca0 <__aeabi_i2f>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a13      	ldr	r2, [pc, #76]	; (8001638 <MPU9250_dmpUpdateFifo+0x114>)
 80015ec:	6013      	str	r3, [r2, #0]
		qy = quat[2];
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fb55 	bl	8000ca0 <__aeabi_i2f>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a10      	ldr	r2, [pc, #64]	; (800163c <MPU9250_dmpUpdateFifo+0x118>)
 80015fa:	6013      	str	r3, [r2, #0]
		qz = quat[3];
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fb4e 	bl	8000ca0 <__aeabi_i2f>
 8001604:	4603      	mov	r3, r0
 8001606:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <MPU9250_dmpUpdateFifo+0x11c>)
 8001608:	6013      	str	r3, [r2, #0]
	}

	time_inside = timestamp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a0d      	ldr	r2, [pc, #52]	; (8001644 <MPU9250_dmpUpdateFifo+0x120>)
 800160e:	6013      	str	r3, [r2, #0]

	return INV_SUCCESS;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	372c      	adds	r7, #44	; 0x2c
 8001616:	46bd      	mov	sp, r7
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	bf00      	nop
 800161c:	20002b20 	.word	0x20002b20
 8001620:	20002b4c 	.word	0x20002b4c
 8001624:	20002b14 	.word	0x20002b14
 8001628:	20002b44 	.word	0x20002b44
 800162c:	20002b0c 	.word	0x20002b0c
 8001630:	20002b34 	.word	0x20002b34
 8001634:	20002b08 	.word	0x20002b08
 8001638:	20002b2c 	.word	0x20002b2c
 800163c:	20002b48 	.word	0x20002b48
 8001640:	20002b28 	.word	0x20002b28
 8001644:	20002b3c 	.word	0x20002b3c

08001648 <MPU9250_dmpEnableFeatures>:

inv_error_t MPU9250_dmpEnableFeatures(unsigned short mask)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
	unsigned short enMask = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	81fb      	strh	r3, [r7, #14]
	enMask |= mask;
 8001656:	89fa      	ldrh	r2, [r7, #14]
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	4313      	orrs	r3, r2
 800165c:	81fb      	strh	r3, [r7, #14]
	// Combat known issue where fifo sample rate is incorrect
	// unless tap is enabled in the DMP.
	enMask |= DMP_FEATURE_TAP;
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	81fb      	strh	r3, [r7, #14]
	return dmp_enable_feature(enMask);
 8001666:	89fb      	ldrh	r3, [r7, #14]
 8001668:	4618      	mov	r0, r3
 800166a:	f002 f92d 	bl	80038c8 <dmp_enable_feature>
 800166e:	4603      	mov	r3, r0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <MPU9250_qToFloat>:
{
	return MPU9250_qToFloat(axis, 30);
}

float MPU9250_qToFloat(long number, unsigned char q)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	70fb      	strb	r3, [r7, #3]
    return ((float)number) / (float)(1 << q);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fb0b 	bl	8000ca0 <__aeabi_i2f>
 800168a:	4604      	mov	r4, r0
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	2201      	movs	r2, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fb03 	bl	8000ca0 <__aeabi_i2f>
 800169a:	4603      	mov	r3, r0
 800169c:	4619      	mov	r1, r3
 800169e:	4620      	mov	r0, r4
 80016a0:	f7ff fc06 	bl	8000eb0 <__aeabi_fdiv>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd90      	pop	{r4, r7, pc}
	...

080016b0 <MPU9250_computeEulerAngles>:


void MPU9250_computeEulerAngles(bool degrees)
{
 80016b0:	b5b0      	push	{r4, r5, r7, lr}
 80016b2:	b08c      	sub	sp, #48	; 0x30
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
	float dqw = MPU9250_qToFloat(qw, 30);
 80016ba:	4b5c      	ldr	r3, [pc, #368]	; (800182c <MPU9250_computeEulerAngles+0x17c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fd08 	bl	80010d4 <__aeabi_f2iz>
 80016c4:	4603      	mov	r3, r0
 80016c6:	211e      	movs	r1, #30
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ffd5 	bl	8001678 <MPU9250_qToFloat>
 80016ce:	62f8      	str	r0, [r7, #44]	; 0x2c
	float dqx = MPU9250_qToFloat(qx, 30);
 80016d0:	4b57      	ldr	r3, [pc, #348]	; (8001830 <MPU9250_computeEulerAngles+0x180>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fcfd 	bl	80010d4 <__aeabi_f2iz>
 80016da:	4603      	mov	r3, r0
 80016dc:	211e      	movs	r1, #30
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ffca 	bl	8001678 <MPU9250_qToFloat>
 80016e4:	62b8      	str	r0, [r7, #40]	; 0x28
	float dqy = MPU9250_qToFloat(qy, 30);
 80016e6:	4b53      	ldr	r3, [pc, #332]	; (8001834 <MPU9250_computeEulerAngles+0x184>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fcf2 	bl	80010d4 <__aeabi_f2iz>
 80016f0:	4603      	mov	r3, r0
 80016f2:	211e      	movs	r1, #30
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ffbf 	bl	8001678 <MPU9250_qToFloat>
 80016fa:	6278      	str	r0, [r7, #36]	; 0x24
	float dqz = MPU9250_qToFloat(qz, 30);
 80016fc:	4b4e      	ldr	r3, [pc, #312]	; (8001838 <MPU9250_computeEulerAngles+0x188>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fce7 	bl	80010d4 <__aeabi_f2iz>
 8001706:	4603      	mov	r3, r0
 8001708:	211e      	movs	r1, #30
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ffb4 	bl	8001678 <MPU9250_qToFloat>
 8001710:	6238      	str	r0, [r7, #32]

	float ysqr = dqy * dqy;
 8001712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001716:	f7ff fb17 	bl	8000d48 <__aeabi_fmul>
 800171a:	4603      	mov	r3, r0
 800171c:	61fb      	str	r3, [r7, #28]
	float t0 = -2.0f * (ysqr + dqz * dqz) + 1.0f;
 800171e:	6a39      	ldr	r1, [r7, #32]
 8001720:	6a38      	ldr	r0, [r7, #32]
 8001722:	f7ff fb11 	bl	8000d48 <__aeabi_fmul>
 8001726:	4603      	mov	r3, r0
 8001728:	69f9      	ldr	r1, [r7, #28]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fa04 	bl	8000b38 <__addsf3>
 8001730:	4603      	mov	r3, r0
 8001732:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fb06 	bl	8000d48 <__aeabi_fmul>
 800173c:	4603      	mov	r3, r0
 800173e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff f9f8 	bl	8000b38 <__addsf3>
 8001748:	4603      	mov	r3, r0
 800174a:	61bb      	str	r3, [r7, #24]
	float t1 = +2.0f * (dqx * dqy - dqw * dqz);
 800174c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800174e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001750:	f7ff fafa 	bl	8000d48 <__aeabi_fmul>
 8001754:	4603      	mov	r3, r0
 8001756:	461c      	mov	r4, r3
 8001758:	6a39      	ldr	r1, [r7, #32]
 800175a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800175c:	f7ff faf4 	bl	8000d48 <__aeabi_fmul>
 8001760:	4603      	mov	r3, r0
 8001762:	4619      	mov	r1, r3
 8001764:	4620      	mov	r0, r4
 8001766:	f7ff f9e5 	bl	8000b34 <__aeabi_fsub>
 800176a:	4603      	mov	r3, r0
 800176c:	4619      	mov	r1, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff f9e2 	bl	8000b38 <__addsf3>
 8001774:	4603      	mov	r3, r0
 8001776:	617b      	str	r3, [r7, #20]
	float t2 = -2.0f * (dqx * dqz + dqw * dqy);
 8001778:	6a39      	ldr	r1, [r7, #32]
 800177a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800177c:	f7ff fae4 	bl	8000d48 <__aeabi_fmul>
 8001780:	4603      	mov	r3, r0
 8001782:	461c      	mov	r4, r3
 8001784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001786:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001788:	f7ff fade 	bl	8000d48 <__aeabi_fmul>
 800178c:	4603      	mov	r3, r0
 800178e:	4619      	mov	r1, r3
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff f9d1 	bl	8000b38 <__addsf3>
 8001796:	4603      	mov	r3, r0
 8001798:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fad3 	bl	8000d48 <__aeabi_fmul>
 80017a2:	4603      	mov	r3, r0
 80017a4:	613b      	str	r3, [r7, #16]
	float t3 = +2.0f * (dqy * dqz - dqw * dqx);
 80017a6:	6a39      	ldr	r1, [r7, #32]
 80017a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017aa:	f7ff facd 	bl	8000d48 <__aeabi_fmul>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461c      	mov	r4, r3
 80017b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017b6:	f7ff fac7 	bl	8000d48 <__aeabi_fmul>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4619      	mov	r1, r3
 80017be:	4620      	mov	r0, r4
 80017c0:	f7ff f9b8 	bl	8000b34 <__aeabi_fsub>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4619      	mov	r1, r3
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff f9b5 	bl	8000b38 <__addsf3>
 80017ce:	4603      	mov	r3, r0
 80017d0:	60fb      	str	r3, [r7, #12]
	float t4 = -2.0f * (dqx * dqx + ysqr) + 1.0f;
 80017d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017d6:	f7ff fab7 	bl	8000d48 <__aeabi_fmul>
 80017da:	4603      	mov	r3, r0
 80017dc:	69f9      	ldr	r1, [r7, #28]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f9aa 	bl	8000b38 <__addsf3>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff faac 	bl	8000d48 <__aeabi_fmul>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff f99e 	bl	8000b38 <__addsf3>
 80017fc:	4603      	mov	r3, r0
 80017fe:	60bb      	str	r3, [r7, #8]

	// Keep t2 within range of asin (-1, 1)
	t2 = t2 > 1.0f ? 1.0f : t2;
 8001800:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001804:	6938      	ldr	r0, [r7, #16]
 8001806:	f7ff fc5b 	bl	80010c0 <__aeabi_fcmpgt>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <MPU9250_computeEulerAngles+0x166>
 8001810:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001814:	e000      	b.n	8001818 <MPU9250_computeEulerAngles+0x168>
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	613b      	str	r3, [r7, #16]
	t2 = t2 < -1.0f ? -1.0f : t2;
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <MPU9250_computeEulerAngles+0x18c>)
 800181c:	6938      	ldr	r0, [r7, #16]
 800181e:	f7ff fc31 	bl	8001084 <__aeabi_fcmplt>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00b      	beq.n	8001840 <MPU9250_computeEulerAngles+0x190>
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <MPU9250_computeEulerAngles+0x18c>)
 800182a:	e00a      	b.n	8001842 <MPU9250_computeEulerAngles+0x192>
 800182c:	20002b08 	.word	0x20002b08
 8001830:	20002b2c 	.word	0x20002b2c
 8001834:	20002b48 	.word	0x20002b48
 8001838:	20002b28 	.word	0x20002b28
 800183c:	bf800000 	.word	0xbf800000
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	613b      	str	r3, [r7, #16]

	pitch_inside = asin(t2) * 2;
 8001844:	6938      	ldr	r0, [r7, #16]
 8001846:	f7fe fdf9 	bl	800043c <__aeabi_f2d>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	f009 ffb3 	bl	800b7bc <asin>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	f7fe fc91 	bl	8000180 <__adddf3>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff f911 	bl	8000a8c <__aeabi_d2f>
 800186a:	4603      	mov	r3, r0
 800186c:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <MPU9250_computeEulerAngles+0x320>)
 800186e:	6013      	str	r3, [r2, #0]
	roll_inside = atan2(t3, t4);
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f7fe fde3 	bl	800043c <__aeabi_f2d>
 8001876:	4604      	mov	r4, r0
 8001878:	460d      	mov	r5, r1
 800187a:	68b8      	ldr	r0, [r7, #8]
 800187c:	f7fe fdde 	bl	800043c <__aeabi_f2d>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4620      	mov	r0, r4
 8001886:	4629      	mov	r1, r5
 8001888:	f009 ffc6 	bl	800b818 <atan2>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f7ff f8fa 	bl	8000a8c <__aeabi_d2f>
 8001898:	4603      	mov	r3, r0
 800189a:	4a4e      	ldr	r2, [pc, #312]	; (80019d4 <MPU9250_computeEulerAngles+0x324>)
 800189c:	6013      	str	r3, [r2, #0]
	yaw_inside = atan2(t1, t0);
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7fe fdcc 	bl	800043c <__aeabi_f2d>
 80018a4:	4604      	mov	r4, r0
 80018a6:	460d      	mov	r5, r1
 80018a8:	69b8      	ldr	r0, [r7, #24]
 80018aa:	f7fe fdc7 	bl	800043c <__aeabi_f2d>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4620      	mov	r0, r4
 80018b4:	4629      	mov	r1, r5
 80018b6:	f009 ffaf 	bl	800b818 <atan2>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7ff f8e3 	bl	8000a8c <__aeabi_d2f>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a43      	ldr	r2, [pc, #268]	; (80019d8 <MPU9250_computeEulerAngles+0x328>)
 80018ca:	6013      	str	r3, [r2, #0]

	if (degrees)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d075      	beq.n	80019be <MPU9250_computeEulerAngles+0x30e>
	{
		pitch_inside *= (180.0 / PI);
 80018d2:	4b3f      	ldr	r3, [pc, #252]	; (80019d0 <MPU9250_computeEulerAngles+0x320>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fdb0 	bl	800043c <__aeabi_f2d>
 80018dc:	a33a      	add	r3, pc, #232	; (adr r3, 80019c8 <MPU9250_computeEulerAngles+0x318>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fe03 	bl	80004ec <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7ff f8cd 	bl	8000a8c <__aeabi_d2f>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4a36      	ldr	r2, [pc, #216]	; (80019d0 <MPU9250_computeEulerAngles+0x320>)
 80018f6:	6013      	str	r3, [r2, #0]
		roll_inside *= (180.0 / PI);
 80018f8:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <MPU9250_computeEulerAngles+0x324>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fd9d 	bl	800043c <__aeabi_f2d>
 8001902:	a331      	add	r3, pc, #196	; (adr r3, 80019c8 <MPU9250_computeEulerAngles+0x318>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fdf0 	bl	80004ec <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f8ba 	bl	8000a8c <__aeabi_d2f>
 8001918:	4603      	mov	r3, r0
 800191a:	4a2e      	ldr	r2, [pc, #184]	; (80019d4 <MPU9250_computeEulerAngles+0x324>)
 800191c:	6013      	str	r3, [r2, #0]
		yaw_inside *= (180.0 / PI);
 800191e:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <MPU9250_computeEulerAngles+0x328>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fd8a 	bl	800043c <__aeabi_f2d>
 8001928:	a327      	add	r3, pc, #156	; (adr r3, 80019c8 <MPU9250_computeEulerAngles+0x318>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe fddd 	bl	80004ec <__aeabi_dmul>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff f8a7 	bl	8000a8c <__aeabi_d2f>
 800193e:	4603      	mov	r3, r0
 8001940:	4a25      	ldr	r2, [pc, #148]	; (80019d8 <MPU9250_computeEulerAngles+0x328>)
 8001942:	6013      	str	r3, [r2, #0]
		if (pitch_inside < 0) pitch_inside = 360.0 + pitch_inside;
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <MPU9250_computeEulerAngles+0x320>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f04f 0100 	mov.w	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fb99 	bl	8001084 <__aeabi_fcmplt>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <MPU9250_computeEulerAngles+0x2bc>
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <MPU9250_computeEulerAngles+0x320>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	491f      	ldr	r1, [pc, #124]	; (80019dc <MPU9250_computeEulerAngles+0x32c>)
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f8ea 	bl	8000b38 <__addsf3>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <MPU9250_computeEulerAngles+0x320>)
 800196a:	601a      	str	r2, [r3, #0]
		if (roll_inside < 0) roll_inside = 360.0 + roll_inside;
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <MPU9250_computeEulerAngles+0x324>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f04f 0100 	mov.w	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fb85 	bl	8001084 <__aeabi_fcmplt>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d009      	beq.n	8001994 <MPU9250_computeEulerAngles+0x2e4>
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <MPU9250_computeEulerAngles+0x324>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4915      	ldr	r1, [pc, #84]	; (80019dc <MPU9250_computeEulerAngles+0x32c>)
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f8d6 	bl	8000b38 <__addsf3>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <MPU9250_computeEulerAngles+0x324>)
 8001992:	601a      	str	r2, [r3, #0]
		if (yaw_inside < 0) yaw_inside = 360.0 + yaw_inside;
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <MPU9250_computeEulerAngles+0x328>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f04f 0100 	mov.w	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fb71 	bl	8001084 <__aeabi_fcmplt>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d100      	bne.n	80019aa <MPU9250_computeEulerAngles+0x2fa>
	}
}
 80019a8:	e009      	b.n	80019be <MPU9250_computeEulerAngles+0x30e>
		if (yaw_inside < 0) yaw_inside = 360.0 + yaw_inside;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <MPU9250_computeEulerAngles+0x328>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	490b      	ldr	r1, [pc, #44]	; (80019dc <MPU9250_computeEulerAngles+0x32c>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff f8c1 	bl	8000b38 <__addsf3>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <MPU9250_computeEulerAngles+0x328>)
 80019bc:	601a      	str	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	3730      	adds	r7, #48	; 0x30
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bdb0      	pop	{r4, r5, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	1af05a77 	.word	0x1af05a77
 80019cc:	404ca5dc 	.word	0x404ca5dc
 80019d0:	20002b30 	.word	0x20002b30
 80019d4:	20002b10 	.word	0x20002b10
 80019d8:	20002b40 	.word	0x20002b40
 80019dc:	43b40000 	.word	0x43b40000

080019e0 <MPU9250_computeCompassHeading>:

float MPU9250_computeCompassHeading(void)
{
 80019e0:	b5b0      	push	{r4, r5, r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	if (my == 0)
 80019e4:	4b4c      	ldr	r3, [pc, #304]	; (8001b18 <MPU9250_computeCompassHeading+0x138>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10a      	bne.n	8001a02 <MPU9250_computeCompassHeading+0x22>
		heading = (mx < 0) ? PI : 0;
 80019ec:	4b4b      	ldr	r3, [pc, #300]	; (8001b1c <MPU9250_computeCompassHeading+0x13c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	da01      	bge.n	80019f8 <MPU9250_computeCompassHeading+0x18>
 80019f4:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <MPU9250_computeCompassHeading+0x140>)
 80019f6:	e001      	b.n	80019fc <MPU9250_computeCompassHeading+0x1c>
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	4a49      	ldr	r2, [pc, #292]	; (8001b24 <MPU9250_computeCompassHeading+0x144>)
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	e01a      	b.n	8001a38 <MPU9250_computeCompassHeading+0x58>
	else
		heading = atan2(mx, my);
 8001a02:	4b46      	ldr	r3, [pc, #280]	; (8001b1c <MPU9250_computeCompassHeading+0x13c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fd06 	bl	8000418 <__aeabi_i2d>
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	460d      	mov	r5, r1
 8001a10:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <MPU9250_computeCompassHeading+0x138>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fcff 	bl	8000418 <__aeabi_i2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4620      	mov	r0, r4
 8001a20:	4629      	mov	r1, r5
 8001a22:	f009 fef9 	bl	800b818 <atan2>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff f82d 	bl	8000a8c <__aeabi_d2f>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4a3b      	ldr	r2, [pc, #236]	; (8001b24 <MPU9250_computeCompassHeading+0x144>)
 8001a36:	6013      	str	r3, [r2, #0]

	if (heading > PI) heading -= (2 * PI);
 8001a38:	4b3a      	ldr	r3, [pc, #232]	; (8001b24 <MPU9250_computeCompassHeading+0x144>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fcfd 	bl	800043c <__aeabi_f2d>
 8001a42:	a32f      	add	r3, pc, #188	; (adr r3, 8001b00 <MPU9250_computeCompassHeading+0x120>)
 8001a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a48:	f7fe ffe0 	bl	8000a0c <__aeabi_dcmpgt>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d013      	beq.n	8001a7a <MPU9250_computeCompassHeading+0x9a>
 8001a52:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <MPU9250_computeCompassHeading+0x144>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fcf0 	bl	800043c <__aeabi_f2d>
 8001a5c:	a32a      	add	r3, pc, #168	; (adr r3, 8001b08 <MPU9250_computeCompassHeading+0x128>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7fe fb8b 	bl	800017c <__aeabi_dsub>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f7ff f80d 	bl	8000a8c <__aeabi_d2f>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4a2b      	ldr	r2, [pc, #172]	; (8001b24 <MPU9250_computeCompassHeading+0x144>)
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	e03d      	b.n	8001af6 <MPU9250_computeCompassHeading+0x116>
	else if (heading < -PI) heading += (2 * PI);
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <MPU9250_computeCompassHeading+0x144>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fcdc 	bl	800043c <__aeabi_f2d>
 8001a84:	a322      	add	r3, pc, #136	; (adr r3, 8001b10 <MPU9250_computeCompassHeading+0x130>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe ffa1 	bl	80009d0 <__aeabi_dcmplt>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d013      	beq.n	8001abc <MPU9250_computeCompassHeading+0xdc>
 8001a94:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <MPU9250_computeCompassHeading+0x144>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fccf 	bl	800043c <__aeabi_f2d>
 8001a9e:	a31a      	add	r3, pc, #104	; (adr r3, 8001b08 <MPU9250_computeCompassHeading+0x128>)
 8001aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa4:	f7fe fb6c 	bl	8000180 <__adddf3>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f7fe ffec 	bl	8000a8c <__aeabi_d2f>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4a1b      	ldr	r2, [pc, #108]	; (8001b24 <MPU9250_computeCompassHeading+0x144>)
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e01c      	b.n	8001af6 <MPU9250_computeCompassHeading+0x116>
	else if (heading < 0) heading += 2 * PI;
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <MPU9250_computeCompassHeading+0x144>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f04f 0100 	mov.w	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fadd 	bl	8001084 <__aeabi_fcmplt>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d012      	beq.n	8001af6 <MPU9250_computeCompassHeading+0x116>
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <MPU9250_computeCompassHeading+0x144>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fcb1 	bl	800043c <__aeabi_f2d>
 8001ada:	a30b      	add	r3, pc, #44	; (adr r3, 8001b08 <MPU9250_computeCompassHeading+0x128>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe fb4e 	bl	8000180 <__adddf3>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7fe ffce 	bl	8000a8c <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a0c      	ldr	r2, [pc, #48]	; (8001b24 <MPU9250_computeCompassHeading+0x144>)
 8001af4:	6013      	str	r3, [r2, #0]

	//heading *= 180.0 / PI;

	return heading;
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <MPU9250_computeCompassHeading+0x144>)
 8001af8:	681b      	ldr	r3, [r3, #0]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	bdb0      	pop	{r4, r5, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	53c8d4f1 	.word	0x53c8d4f1
 8001b04:	400921fb 	.word	0x400921fb
 8001b08:	53c8d4f1 	.word	0x53c8d4f1
 8001b0c:	401921fb 	.word	0x401921fb
 8001b10:	53c8d4f1 	.word	0x53c8d4f1
 8001b14:	c00921fb 	.word	0xc00921fb
 8001b18:	20002b1c 	.word	0x20002b1c
 8001b1c:	20002b50 	.word	0x20002b50
 8001b20:	40490fdb 	.word	0x40490fdb
 8001b24:	20002b58 	.word	0x20002b58

08001b28 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4a06      	ldr	r2, [pc, #24]	; (8001b50 <vApplicationGetIdleTaskMemory+0x28>)
 8001b38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2240      	movs	r2, #64	; 0x40
 8001b44:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	200000dc 	.word	0x200000dc
 8001b54:	20000130 	.word	0x20000130

08001b58 <reg_int_cb>:
#define i2c_write(a, b, c, d) stm32_i2c_write(a, b, c, d)
#define i2c_read(a, b, c, d)  stm32_i2c_read(a, b, c, d)
#define delay_ms  stm32_delay_ms
#define get_ms    stm32_get_clock_ms
static inline int reg_int_cb(struct int_param_s *int_param)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
    return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <min>:
static int setup_compass(void);
#define MAX_COMPASS_SAMPLE_RATE (100)
#endif

int min(int x, int y)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
    return x > y ? y : x;
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	bfa8      	it	ge
 8001b7e:	4613      	movge	r3, r2
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
	...

08001b8c <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
int set_int_enable(unsigned char enable)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <set_int_enable+0xb0>)
 8001b98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01c      	beq.n	8001bda <set_int_enable+0x4e>
        if (enable)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	73fb      	strb	r3, [r7, #15]
 8001baa:	e001      	b.n	8001bb0 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8001bac:	2300      	movs	r3, #0
 8001bae:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <set_int_enable+0xb0>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	7818      	ldrb	r0, [r3, #0]
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <set_int_enable+0xb0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	7c59      	ldrb	r1, [r3, #17]
 8001bbc:	f107 030f 	add.w	r3, r7, #15
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f003 fc87 	bl	80054d4 <stm32_i2c_write>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <set_int_enable+0x46>
            return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd0:	e030      	b.n	8001c34 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <set_int_enable+0xb0>)
 8001bd6:	745a      	strb	r2, [r3, #17]
 8001bd8:	e02b      	b.n	8001c32 <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <set_int_enable+0xb0>)
 8001bdc:	7a9b      	ldrb	r3, [r3, #10]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d102      	bne.n	8001be8 <set_int_enable+0x5c>
            return -1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	e025      	b.n	8001c34 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <set_int_enable+0x6e>
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <set_int_enable+0xb0>)
 8001bf0:	7c5b      	ldrb	r3, [r3, #17]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <set_int_enable+0x6e>
            return 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e01c      	b.n	8001c34 <set_int_enable+0xa8>
        if (enable)
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
 8001c04:	e001      	b.n	8001c0a <set_int_enable+0x7e>
        else
            tmp = 0x00;
 8001c06:	2300      	movs	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <set_int_enable+0xb0>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	7818      	ldrb	r0, [r3, #0]
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <set_int_enable+0xb0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	7c59      	ldrb	r1, [r3, #17]
 8001c16:	f107 030f 	add.w	r3, r7, #15
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f003 fc5a 	bl	80054d4 <stm32_i2c_write>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <set_int_enable+0xa0>
            return -1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e003      	b.n	8001c34 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <set_int_enable+0xb0>)
 8001c30:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000000 	.word	0x20000000

08001c40 <mpu_read_reg>:
 *  @param[in]  reg     Register address.
 *  @param[out] data    Register data.
 *  @return     0 if successful.
 */
int mpu_read_reg(unsigned char reg, unsigned char *data)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	71fb      	strb	r3, [r7, #7]
    if (reg == st.reg->fifo_r_w || reg == st.reg->mem_r_w)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <mpu_read_reg+0x58>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	7b5b      	ldrb	r3, [r3, #13]
 8001c52:	79fa      	ldrb	r2, [r7, #7]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d005      	beq.n	8001c64 <mpu_read_reg+0x24>
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <mpu_read_reg+0x58>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	7e1b      	ldrb	r3, [r3, #24]
 8001c5e:	79fa      	ldrb	r2, [r7, #7]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d102      	bne.n	8001c6a <mpu_read_reg+0x2a>
        return -1;
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
 8001c68:	e011      	b.n	8001c8e <mpu_read_reg+0x4e>
    if (reg >= st.hw->num_reg)
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <mpu_read_reg+0x58>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	791b      	ldrb	r3, [r3, #4]
 8001c70:	79fa      	ldrb	r2, [r7, #7]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d302      	bcc.n	8001c7c <mpu_read_reg+0x3c>
        return -1;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	e008      	b.n	8001c8e <mpu_read_reg+0x4e>
    return i2c_read(st.hw->addr, reg, 1, data);
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <mpu_read_reg+0x58>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	7818      	ldrb	r0, [r3, #0]
 8001c82:	79f9      	ldrb	r1, [r7, #7]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f003 fc8a 	bl	80055a0 <stm32_i2c_read>
 8001c8c:	4603      	mov	r3, r0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000000 	.word	0x20000000

08001c9c <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001ca8:	4b5f      	ldr	r3, [pc, #380]	; (8001e28 <mpu_init+0x18c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	7818      	ldrb	r0, [r3, #0]
 8001cae:	4b5e      	ldr	r3, [pc, #376]	; (8001e28 <mpu_init+0x18c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	7d59      	ldrb	r1, [r3, #21]
 8001cb4:	f107 0308 	add.w	r3, r7, #8
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f003 fc0b 	bl	80054d4 <stm32_i2c_write>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <mpu_init+0x2e>
        return -1;
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc8:	e0a9      	b.n	8001e1e <mpu_init+0x182>
    delay_ms(100);
 8001cca:	2064      	movs	r0, #100	; 0x64
 8001ccc:	f003 fbeb 	bl	80054a6 <stm32_delay_ms>

    /* Wake up chip. */
    data[0] = 0x00;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001cd4:	4b54      	ldr	r3, [pc, #336]	; (8001e28 <mpu_init+0x18c>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	7818      	ldrb	r0, [r3, #0]
 8001cda:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <mpu_init+0x18c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	7d59      	ldrb	r1, [r3, #21]
 8001ce0:	f107 0308 	add.w	r3, r7, #8
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f003 fbf5 	bl	80054d4 <stm32_i2c_write>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <mpu_init+0x5a>
        return -1;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf4:	e093      	b.n	8001e1e <mpu_init+0x182>

   st.chip_cfg.accel_half = 0;
 8001cf6:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <mpu_init+0x18c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	74da      	strb	r2, [r3, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8001cfc:	2348      	movs	r3, #72	; 0x48
 8001cfe:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8001d00:	4b49      	ldr	r3, [pc, #292]	; (8001e28 <mpu_init+0x18c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	7818      	ldrb	r0, [r3, #0]
 8001d06:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <mpu_init+0x18c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	7a19      	ldrb	r1, [r3, #8]
 8001d0c:	f107 0308 	add.w	r3, r7, #8
 8001d10:	2201      	movs	r2, #1
 8001d12:	f003 fbdf 	bl	80054d4 <stm32_i2c_write>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <mpu_init+0x86>
        return -1;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d20:	e07d      	b.n	8001e1e <mpu_init+0x182>
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 8001d22:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <mpu_init+0x18c>)
 8001d24:	22ff      	movs	r2, #255	; 0xff
 8001d26:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8001d28:	4b3f      	ldr	r3, [pc, #252]	; (8001e28 <mpu_init+0x18c>)
 8001d2a:	22ff      	movs	r2, #255	; 0xff
 8001d2c:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8001d2e:	4b3e      	ldr	r3, [pc, #248]	; (8001e28 <mpu_init+0x18c>)
 8001d30:	22ff      	movs	r2, #255	; 0xff
 8001d32:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8001d34:	4b3c      	ldr	r3, [pc, #240]	; (8001e28 <mpu_init+0x18c>)
 8001d36:	22ff      	movs	r2, #255	; 0xff
 8001d38:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8001d3a:	4b3b      	ldr	r3, [pc, #236]	; (8001e28 <mpu_init+0x18c>)
 8001d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d40:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8001d42:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <mpu_init+0x18c>)
 8001d44:	22ff      	movs	r2, #255	; 0xff
 8001d46:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8001d48:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <mpu_init+0x18c>)
 8001d4a:	22ff      	movs	r2, #255	; 0xff
 8001d4c:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 8001d4e:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <mpu_init+0x18c>)
 8001d50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d54:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8001d56:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <mpu_init+0x18c>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 8001d5c:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <mpu_init+0x18c>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 8001d64:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <mpu_init+0x18c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <mpu_init+0x18c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8001d72:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <mpu_init+0x18c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8001d78:	220c      	movs	r2, #12
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	482b      	ldr	r0, [pc, #172]	; (8001e2c <mpu_init+0x190>)
 8001d7e:	f008 ff89 	bl	800ac94 <memset>
    st.chip_cfg.dmp_on = 0;
 8001d82:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <mpu_init+0x18c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8001d8a:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <mpu_init+0x18c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8001d92:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <mpu_init+0x18c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 8001d98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d9c:	f000 fae2 	bl	8002364 <mpu_set_gyro_fsr>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <mpu_init+0x110>
        return -1;
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	e038      	b.n	8001e1e <mpu_init+0x182>
    if (mpu_set_accel_fsr(2))
 8001dac:	2002      	movs	r0, #2
 8001dae:	f000 fb67 	bl	8002480 <mpu_set_accel_fsr>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <mpu_init+0x122>
        return -1;
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbc:	e02f      	b.n	8001e1e <mpu_init+0x182>
    if (mpu_set_lpf(42))
 8001dbe:	202a      	movs	r0, #42	; 0x2a
 8001dc0:	f000 fbc6 	bl	8002550 <mpu_set_lpf>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <mpu_init+0x134>
        return -1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e026      	b.n	8001e1e <mpu_init+0x182>
    if (mpu_set_sample_rate(50))
 8001dd0:	2032      	movs	r0, #50	; 0x32
 8001dd2:	f000 fc0b 	bl	80025ec <mpu_set_sample_rate>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <mpu_init+0x146>
        return -1;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8001de0:	e01d      	b.n	8001e1e <mpu_init+0x182>
    if (mpu_configure_fifo(0))
 8001de2:	2000      	movs	r0, #0
 8001de4:	f000 fd28 	bl	8002838 <mpu_configure_fifo>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <mpu_init+0x158>
        return -1;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295
 8001df2:	e014      	b.n	8001e1e <mpu_init+0x182>

#ifndef EMPL_TARGET_STM32F4    
    if (int_param)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <mpu_init+0x164>
        reg_int_cb(int_param);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff feac 	bl	8001b58 <reg_int_cb>
#endif

#ifdef AK89xx_SECONDARY
    setup_compass();
 8001e00:	f001 f8fe 	bl	8003000 <setup_compass>
    if (mpu_set_compass_sample_rate(10))
 8001e04:	200a      	movs	r0, #10
 8001e06:	f000 fc61 	bl	80026cc <mpu_set_compass_sample_rate>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <mpu_init+0x17a>
        return -1;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
 8001e14:	e003      	b.n	8001e1e <mpu_init+0x182>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f000 fd60 	bl	80028dc <mpu_set_sensors>
    return 0;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000016 	.word	0x20000016

08001e30 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    if (rate > 40)
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	2b28      	cmp	r3, #40	; 0x28
 8001e3e:	d902      	bls.n	8001e46 <mpu_lp_accel_mode+0x16>
        return -1;
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
 8001e44:	e08c      	b.n	8001f60 <mpu_lp_accel_mode+0x130>

    if (!rate) {
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d11c      	bne.n	8001e86 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f000 ff1b 	bl	8002c88 <mpu_set_int_latched>
        tmp[0] = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8001e56:	2307      	movs	r3, #7
 8001e58:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001e5a:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <mpu_lp_accel_mode+0x138>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	7818      	ldrb	r0, [r3, #0]
 8001e60:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <mpu_lp_accel_mode+0x138>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	7d59      	ldrb	r1, [r3, #21]
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f003 fb32 	bl	80054d4 <stm32_i2c_write>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <mpu_lp_accel_mode+0x4c>
            return -1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e071      	b.n	8001f60 <mpu_lp_accel_mode+0x130>
        st.chip_cfg.lp_accel_mode = 0;
 8001e7c:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <mpu_lp_accel_mode+0x138>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	751a      	strb	r2, [r3, #20]
        return 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e06c      	b.n	8001f60 <mpu_lp_accel_mode+0x130>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8001e86:	2001      	movs	r0, #1
 8001e88:	f000 fefe 	bl	8002c88 <mpu_set_int_latched>
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d102      	bne.n	8001e98 <mpu_lp_accel_mode+0x68>
        tmp[0] = INV_LPA_1_25HZ;
 8001e92:	2302      	movs	r3, #2
 8001e94:	733b      	strb	r3, [r7, #12]
 8001e96:	e032      	b.n	8001efe <mpu_lp_accel_mode+0xce>
    else if (rate == 2)
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d102      	bne.n	8001ea4 <mpu_lp_accel_mode+0x74>
        tmp[0] = INV_LPA_2_5HZ;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	733b      	strb	r3, [r7, #12]
 8001ea2:	e02c      	b.n	8001efe <mpu_lp_accel_mode+0xce>
    else if (rate <= 5)
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	2b05      	cmp	r3, #5
 8001ea8:	d802      	bhi.n	8001eb0 <mpu_lp_accel_mode+0x80>
        tmp[0] = INV_LPA_5HZ;
 8001eaa:	2304      	movs	r3, #4
 8001eac:	733b      	strb	r3, [r7, #12]
 8001eae:	e026      	b.n	8001efe <mpu_lp_accel_mode+0xce>
    else if (rate <= 10)
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	2b0a      	cmp	r3, #10
 8001eb4:	d802      	bhi.n	8001ebc <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_10HZ;
 8001eb6:	2305      	movs	r3, #5
 8001eb8:	733b      	strb	r3, [r7, #12]
 8001eba:	e020      	b.n	8001efe <mpu_lp_accel_mode+0xce>
    else if (rate <= 20)
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	2b14      	cmp	r3, #20
 8001ec0:	d802      	bhi.n	8001ec8 <mpu_lp_accel_mode+0x98>
        tmp[0] = INV_LPA_20HZ;
 8001ec2:	2306      	movs	r3, #6
 8001ec4:	733b      	strb	r3, [r7, #12]
 8001ec6:	e01a      	b.n	8001efe <mpu_lp_accel_mode+0xce>
    else if (rate <= 40)
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	2b28      	cmp	r3, #40	; 0x28
 8001ecc:	d802      	bhi.n	8001ed4 <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_40HZ;
 8001ece:	2307      	movs	r3, #7
 8001ed0:	733b      	strb	r3, [r7, #12]
 8001ed2:	e014      	b.n	8001efe <mpu_lp_accel_mode+0xce>
    else if (rate <= 80)
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	2b50      	cmp	r3, #80	; 0x50
 8001ed8:	d802      	bhi.n	8001ee0 <mpu_lp_accel_mode+0xb0>
        tmp[0] = INV_LPA_80HZ;
 8001eda:	2308      	movs	r3, #8
 8001edc:	733b      	strb	r3, [r7, #12]
 8001ede:	e00e      	b.n	8001efe <mpu_lp_accel_mode+0xce>
    else if (rate <= 160)
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	2ba0      	cmp	r3, #160	; 0xa0
 8001ee4:	d802      	bhi.n	8001eec <mpu_lp_accel_mode+0xbc>
        tmp[0] = INV_LPA_160HZ;
 8001ee6:	2309      	movs	r3, #9
 8001ee8:	733b      	strb	r3, [r7, #12]
 8001eea:	e008      	b.n	8001efe <mpu_lp_accel_mode+0xce>
    else if (rate <= 320)
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ef2:	d802      	bhi.n	8001efa <mpu_lp_accel_mode+0xca>
        tmp[0] = INV_LPA_320HZ;
 8001ef4:	230a      	movs	r3, #10
 8001ef6:	733b      	strb	r3, [r7, #12]
 8001ef8:	e001      	b.n	8001efe <mpu_lp_accel_mode+0xce>
    else
        tmp[0] = INV_LPA_640HZ;
 8001efa:	230b      	movs	r3, #11
 8001efc:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <mpu_lp_accel_mode+0x138>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	7818      	ldrb	r0, [r3, #0]
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <mpu_lp_accel_mode+0x138>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	7a59      	ldrb	r1, [r3, #9]
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f003 fae0 	bl	80054d4 <stm32_i2c_write>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <mpu_lp_accel_mode+0xf0>
        return -1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	e01f      	b.n	8001f60 <mpu_lp_accel_mode+0x130>
    tmp[0] = BIT_LPA_CYCLE;
 8001f20:	2320      	movs	r3, #32
 8001f22:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8001f24:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <mpu_lp_accel_mode+0x138>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	7818      	ldrb	r0, [r3, #0]
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <mpu_lp_accel_mode+0x138>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	7d59      	ldrb	r1, [r3, #21]
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	2201      	movs	r2, #1
 8001f36:	f003 facd 	bl	80054d4 <stm32_i2c_write>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <mpu_lp_accel_mode+0x116>
        return -1;
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
 8001f44:	e00c      	b.n	8001f60 <mpu_lp_accel_mode+0x130>
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <mpu_lp_accel_mode+0x138>)
 8001f48:	2208      	movs	r2, #8
 8001f4a:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <mpu_lp_accel_mode+0x138>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <mpu_lp_accel_mode+0x138>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f000 fc6d 	bl	8002838 <mpu_configure_fifo>

    return 0;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000000 	.word	0x20000000

08001f6c <mpu_get_gyro_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_gyro_reg(short *data, unsigned long *timestamp)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
    unsigned char tmp[6];

    if (!(st.chip_cfg.sensors & INV_XYZ_GYRO))
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <mpu_get_gyro_reg+0x90>)
 8001f78:	7a9b      	ldrb	r3, [r3, #10]
 8001f7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d102      	bne.n	8001f88 <mpu_get_gyro_reg+0x1c>
        return -1;
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
 8001f86:	e034      	b.n	8001ff2 <mpu_get_gyro_reg+0x86>

    if (i2c_read(st.hw->addr, st.reg->raw_gyro, 6, tmp))
 8001f88:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <mpu_get_gyro_reg+0x90>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	7818      	ldrb	r0, [r3, #0]
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <mpu_get_gyro_reg+0x90>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	7b99      	ldrb	r1, [r3, #14]
 8001f94:	f107 0308 	add.w	r3, r7, #8
 8001f98:	2206      	movs	r2, #6
 8001f9a:	f003 fb01 	bl	80055a0 <stm32_i2c_read>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <mpu_get_gyro_reg+0x3e>
        return -1;
 8001fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa8:	e023      	b.n	8001ff2 <mpu_get_gyro_reg+0x86>
    data[0] = (tmp[0] << 8) | tmp[1];
 8001faa:	7a3b      	ldrb	r3, [r7, #8]
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	b21a      	sxth	r2, r3
 8001fb0:	7a7b      	ldrb	r3, [r7, #9]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21a      	sxth	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	801a      	strh	r2, [r3, #0]
    data[1] = (tmp[2] << 8) | tmp[3];
 8001fbc:	7abb      	ldrb	r3, [r7, #10]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	b219      	sxth	r1, r3
 8001fc2:	7afb      	ldrb	r3, [r7, #11]
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3302      	adds	r3, #2
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	b212      	sxth	r2, r2
 8001fce:	801a      	strh	r2, [r3, #0]
    data[2] = (tmp[4] << 8) | tmp[5];
 8001fd0:	7b3b      	ldrb	r3, [r7, #12]
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	b219      	sxth	r1, r3
 8001fd6:	7b7b      	ldrb	r3, [r7, #13]
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	b212      	sxth	r2, r2
 8001fe2:	801a      	strh	r2, [r3, #0]
    if (timestamp)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <mpu_get_gyro_reg+0x84>
        get_ms(timestamp);
 8001fea:	6838      	ldr	r0, [r7, #0]
 8001fec:	f003 fa4d 	bl	800548a <stm32_get_clock_ms>
    return 0;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000000 	.word	0x20000000

08002000 <mpu_get_accel_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_accel_reg(short *data, unsigned long *timestamp)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
    unsigned char tmp[6];

    if (!(st.chip_cfg.sensors & INV_XYZ_ACCEL))
 800200a:	4b21      	ldr	r3, [pc, #132]	; (8002090 <mpu_get_accel_reg+0x90>)
 800200c:	7a9b      	ldrb	r3, [r3, #10]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <mpu_get_accel_reg+0x1c>
        return -1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	e034      	b.n	8002086 <mpu_get_accel_reg+0x86>

    if (i2c_read(st.hw->addr, st.reg->raw_accel, 6, tmp))
 800201c:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <mpu_get_accel_reg+0x90>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	7818      	ldrb	r0, [r3, #0]
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <mpu_get_accel_reg+0x90>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	7bd9      	ldrb	r1, [r3, #15]
 8002028:	f107 0308 	add.w	r3, r7, #8
 800202c:	2206      	movs	r2, #6
 800202e:	f003 fab7 	bl	80055a0 <stm32_i2c_read>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <mpu_get_accel_reg+0x3e>
        return -1;
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
 800203c:	e023      	b.n	8002086 <mpu_get_accel_reg+0x86>
    data[0] = (tmp[0] << 8) | tmp[1];
 800203e:	7a3b      	ldrb	r3, [r7, #8]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	b21a      	sxth	r2, r3
 8002044:	7a7b      	ldrb	r3, [r7, #9]
 8002046:	b21b      	sxth	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	b21a      	sxth	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	801a      	strh	r2, [r3, #0]
    data[1] = (tmp[2] << 8) | tmp[3];
 8002050:	7abb      	ldrb	r3, [r7, #10]
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	b219      	sxth	r1, r3
 8002056:	7afb      	ldrb	r3, [r7, #11]
 8002058:	b21a      	sxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3302      	adds	r3, #2
 800205e:	430a      	orrs	r2, r1
 8002060:	b212      	sxth	r2, r2
 8002062:	801a      	strh	r2, [r3, #0]
    data[2] = (tmp[4] << 8) | tmp[5];
 8002064:	7b3b      	ldrb	r3, [r7, #12]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	b219      	sxth	r1, r3
 800206a:	7b7b      	ldrb	r3, [r7, #13]
 800206c:	b21a      	sxth	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3304      	adds	r3, #4
 8002072:	430a      	orrs	r2, r1
 8002074:	b212      	sxth	r2, r2
 8002076:	801a      	strh	r2, [r3, #0]
    if (timestamp)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <mpu_get_accel_reg+0x84>
        get_ms(timestamp);
 800207e:	6838      	ldr	r0, [r7, #0]
 8002080:	f003 fa03 	bl	800548a <stm32_get_clock_ms>
    return 0;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000000 	.word	0x20000000

08002094 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
 800209e:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <mpu_get_temperature+0xc0>)
 80020a0:	7a9b      	ldrb	r3, [r3, #10]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d102      	bne.n	80020ac <mpu_get_temperature+0x18>
        return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	e04f      	b.n	800214c <mpu_get_temperature+0xb8>

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
 80020ac:	4b29      	ldr	r3, [pc, #164]	; (8002154 <mpu_get_temperature+0xc0>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	7818      	ldrb	r0, [r3, #0]
 80020b2:	4b28      	ldr	r3, [pc, #160]	; (8002154 <mpu_get_temperature+0xc0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	7c19      	ldrb	r1, [r3, #16]
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	2202      	movs	r2, #2
 80020be:	f003 fa6f 	bl	80055a0 <stm32_i2c_read>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <mpu_get_temperature+0x3a>
        return -1;
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295
 80020cc:	e03e      	b.n	800214c <mpu_get_temperature+0xb8>
    raw = (tmp[0] << 8) | tmp[1];
 80020ce:	7b3b      	ldrb	r3, [r7, #12]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	b21a      	sxth	r2, r3
 80020d4:	7b7b      	ldrb	r3, [r7, #13]
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	4313      	orrs	r3, r2
 80020da:	81fb      	strh	r3, [r7, #14]
    if (timestamp)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <mpu_get_temperature+0x54>
        get_ms(timestamp);
 80020e2:	6838      	ldr	r0, [r7, #0]
 80020e4:	f003 f9d1 	bl	800548a <stm32_get_clock_ms>

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
 80020e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fdd7 	bl	8000ca0 <__aeabi_i2f>
 80020f2:	4604      	mov	r4, r0
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <mpu_get_temperature+0xc0>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fdcf 	bl	8000ca0 <__aeabi_i2f>
 8002102:	4603      	mov	r3, r0
 8002104:	4619      	mov	r1, r3
 8002106:	4620      	mov	r0, r4
 8002108:	f7fe fd14 	bl	8000b34 <__aeabi_fsub>
 800210c:	4603      	mov	r3, r0
 800210e:	461c      	mov	r4, r3
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <mpu_get_temperature+0xc0>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	88db      	ldrh	r3, [r3, #6]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fdc2 	bl	8000ca0 <__aeabi_i2f>
 800211c:	4603      	mov	r3, r0
 800211e:	4619      	mov	r1, r3
 8002120:	4620      	mov	r0, r4
 8002122:	f7fe fec5 	bl	8000eb0 <__aeabi_fdiv>
 8002126:	4603      	mov	r3, r0
 8002128:	490b      	ldr	r1, [pc, #44]	; (8002158 <mpu_get_temperature+0xc4>)
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fd04 	bl	8000b38 <__addsf3>
 8002130:	4603      	mov	r3, r0
 8002132:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fe06 	bl	8000d48 <__aeabi_fmul>
 800213c:	4603      	mov	r3, r0
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe ffc8 	bl	80010d4 <__aeabi_f2iz>
 8002144:	4602      	mov	r2, r0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	601a      	str	r2, [r3, #0]
    return 0;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	bd90      	pop	{r4, r7, pc}
 8002154:	20000000 	.word	0x20000000
 8002158:	420c0000 	.word	0x420c0000

0800215c <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002162:	4b7e      	ldr	r3, [pc, #504]	; (800235c <mpu_reset_fifo+0x200>)
 8002164:	7a9b      	ldrb	r3, [r3, #10]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <mpu_reset_fifo+0x14>
        return -1;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	e0f1      	b.n	8002354 <mpu_reset_fifo+0x1f8>

    data = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8002174:	4b79      	ldr	r3, [pc, #484]	; (800235c <mpu_reset_fifo+0x200>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	7818      	ldrb	r0, [r3, #0]
 800217a:	4b78      	ldr	r3, [pc, #480]	; (800235c <mpu_reset_fifo+0x200>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	7c59      	ldrb	r1, [r3, #17]
 8002180:	1dfb      	adds	r3, r7, #7
 8002182:	2201      	movs	r2, #1
 8002184:	f003 f9a6 	bl	80054d4 <stm32_i2c_write>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <mpu_reset_fifo+0x38>
        return -1;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	e0df      	b.n	8002354 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8002194:	4b71      	ldr	r3, [pc, #452]	; (800235c <mpu_reset_fifo+0x200>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	7818      	ldrb	r0, [r3, #0]
 800219a:	4b70      	ldr	r3, [pc, #448]	; (800235c <mpu_reset_fifo+0x200>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	7959      	ldrb	r1, [r3, #5]
 80021a0:	1dfb      	adds	r3, r7, #7
 80021a2:	2201      	movs	r2, #1
 80021a4:	f003 f996 	bl	80054d4 <stm32_i2c_write>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <mpu_reset_fifo+0x58>
        return -1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	e0cf      	b.n	8002354 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80021b4:	4b69      	ldr	r3, [pc, #420]	; (800235c <mpu_reset_fifo+0x200>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	7818      	ldrb	r0, [r3, #0]
 80021ba:	4b68      	ldr	r3, [pc, #416]	; (800235c <mpu_reset_fifo+0x200>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	7919      	ldrb	r1, [r3, #4]
 80021c0:	1dfb      	adds	r3, r7, #7
 80021c2:	2201      	movs	r2, #1
 80021c4:	f003 f986 	bl	80054d4 <stm32_i2c_write>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <mpu_reset_fifo+0x78>
        return -1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
 80021d2:	e0bf      	b.n	8002354 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 80021d4:	4b61      	ldr	r3, [pc, #388]	; (800235c <mpu_reset_fifo+0x200>)
 80021d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d05c      	beq.n	8002298 <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 80021de:	230c      	movs	r3, #12
 80021e0:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80021e2:	4b5e      	ldr	r3, [pc, #376]	; (800235c <mpu_reset_fifo+0x200>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	7818      	ldrb	r0, [r3, #0]
 80021e8:	4b5c      	ldr	r3, [pc, #368]	; (800235c <mpu_reset_fifo+0x200>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	7919      	ldrb	r1, [r3, #4]
 80021ee:	1dfb      	adds	r3, r7, #7
 80021f0:	2201      	movs	r2, #1
 80021f2:	f003 f96f 	bl	80054d4 <stm32_i2c_write>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <mpu_reset_fifo+0xa6>
            return -1;
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002200:	e0a8      	b.n	8002354 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8002202:	2032      	movs	r0, #50	; 0x32
 8002204:	f003 f94f 	bl	80054a6 <stm32_delay_ms>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8002208:	23c0      	movs	r3, #192	; 0xc0
 800220a:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800220c:	4b53      	ldr	r3, [pc, #332]	; (800235c <mpu_reset_fifo+0x200>)
 800220e:	7a9b      	ldrb	r3, [r3, #10]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d004      	beq.n	8002222 <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	f043 0320 	orr.w	r3, r3, #32
 800221e:	b2db      	uxtb	r3, r3
 8002220:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002222:	4b4e      	ldr	r3, [pc, #312]	; (800235c <mpu_reset_fifo+0x200>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	7818      	ldrb	r0, [r3, #0]
 8002228:	4b4c      	ldr	r3, [pc, #304]	; (800235c <mpu_reset_fifo+0x200>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	7919      	ldrb	r1, [r3, #4]
 800222e:	1dfb      	adds	r3, r7, #7
 8002230:	2201      	movs	r2, #1
 8002232:	f003 f94f 	bl	80054d4 <stm32_i2c_write>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <mpu_reset_fifo+0xe6>
            return -1;
 800223c:	f04f 33ff 	mov.w	r3, #4294967295
 8002240:	e088      	b.n	8002354 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 8002242:	4b46      	ldr	r3, [pc, #280]	; (800235c <mpu_reset_fifo+0x200>)
 8002244:	7c5b      	ldrb	r3, [r3, #17]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 800224a:	2302      	movs	r3, #2
 800224c:	71fb      	strb	r3, [r7, #7]
 800224e:	e001      	b.n	8002254 <mpu_reset_fifo+0xf8>
        else
            data = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8002254:	4b41      	ldr	r3, [pc, #260]	; (800235c <mpu_reset_fifo+0x200>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	7818      	ldrb	r0, [r3, #0]
 800225a:	4b40      	ldr	r3, [pc, #256]	; (800235c <mpu_reset_fifo+0x200>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	7c59      	ldrb	r1, [r3, #17]
 8002260:	1dfb      	adds	r3, r7, #7
 8002262:	2201      	movs	r2, #1
 8002264:	f003 f936 	bl	80054d4 <stm32_i2c_write>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <mpu_reset_fifo+0x118>
            return -1;
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
 8002272:	e06f      	b.n	8002354 <mpu_reset_fifo+0x1f8>
        data = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8002278:	4b38      	ldr	r3, [pc, #224]	; (800235c <mpu_reset_fifo+0x200>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	7818      	ldrb	r0, [r3, #0]
 800227e:	4b37      	ldr	r3, [pc, #220]	; (800235c <mpu_reset_fifo+0x200>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	7959      	ldrb	r1, [r3, #5]
 8002284:	1dfb      	adds	r3, r7, #7
 8002286:	2201      	movs	r2, #1
 8002288:	f003 f924 	bl	80054d4 <stm32_i2c_write>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d05f      	beq.n	8002352 <mpu_reset_fifo+0x1f6>
            return -1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	e05d      	b.n	8002354 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 8002298:	2304      	movs	r3, #4
 800229a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800229c:	4b2f      	ldr	r3, [pc, #188]	; (800235c <mpu_reset_fifo+0x200>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	7818      	ldrb	r0, [r3, #0]
 80022a2:	4b2e      	ldr	r3, [pc, #184]	; (800235c <mpu_reset_fifo+0x200>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	7919      	ldrb	r1, [r3, #4]
 80022a8:	1dfb      	adds	r3, r7, #7
 80022aa:	2201      	movs	r2, #1
 80022ac:	f003 f912 	bl	80054d4 <stm32_i2c_write>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <mpu_reset_fifo+0x160>
            return -1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	e04b      	b.n	8002354 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80022bc:	4b27      	ldr	r3, [pc, #156]	; (800235c <mpu_reset_fifo+0x200>)
 80022be:	7c9b      	ldrb	r3, [r3, #18]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <mpu_reset_fifo+0x174>
 80022c4:	4b25      	ldr	r3, [pc, #148]	; (800235c <mpu_reset_fifo+0x200>)
 80022c6:	7a9b      	ldrb	r3, [r3, #10]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 80022d0:	2340      	movs	r3, #64	; 0x40
 80022d2:	71fb      	strb	r3, [r7, #7]
 80022d4:	e001      	b.n	80022da <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 80022d6:	2360      	movs	r3, #96	; 0x60
 80022d8:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <mpu_reset_fifo+0x200>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	7818      	ldrb	r0, [r3, #0]
 80022e0:	4b1e      	ldr	r3, [pc, #120]	; (800235c <mpu_reset_fifo+0x200>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	7919      	ldrb	r1, [r3, #4]
 80022e6:	1dfb      	adds	r3, r7, #7
 80022e8:	2201      	movs	r2, #1
 80022ea:	f003 f8f3 	bl	80054d4 <stm32_i2c_write>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <mpu_reset_fifo+0x19e>
            return -1;
 80022f4:	f04f 33ff 	mov.w	r3, #4294967295
 80022f8:	e02c      	b.n	8002354 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 80022fa:	2032      	movs	r0, #50	; 0x32
 80022fc:	f003 f8d3 	bl	80054a6 <stm32_delay_ms>
        if (st.chip_cfg.int_enable)
 8002300:	4b16      	ldr	r3, [pc, #88]	; (800235c <mpu_reset_fifo+0x200>)
 8002302:	7c5b      	ldrb	r3, [r3, #17]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 8002308:	2301      	movs	r3, #1
 800230a:	71fb      	strb	r3, [r7, #7]
 800230c:	e001      	b.n	8002312 <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <mpu_reset_fifo+0x200>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	7818      	ldrb	r0, [r3, #0]
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <mpu_reset_fifo+0x200>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	7c59      	ldrb	r1, [r3, #17]
 800231e:	1dfb      	adds	r3, r7, #7
 8002320:	2201      	movs	r2, #1
 8002322:	f003 f8d7 	bl	80054d4 <stm32_i2c_write>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <mpu_reset_fifo+0x1d6>
            return -1;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
 8002330:	e010      	b.n	8002354 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <mpu_reset_fifo+0x200>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	7818      	ldrb	r0, [r3, #0]
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <mpu_reset_fifo+0x200>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	7959      	ldrb	r1, [r3, #5]
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <mpu_reset_fifo+0x204>)
 8002340:	2201      	movs	r2, #1
 8002342:	f003 f8c7 	bl	80054d4 <stm32_i2c_write>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <mpu_reset_fifo+0x1f6>
            return -1;
 800234c:	f04f 33ff 	mov.w	r3, #4294967295
 8002350:	e000      	b.n	8002354 <mpu_reset_fifo+0x1f8>
    }
    return 0;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000000 	.word	0x20000000
 8002360:	20000010 	.word	0x20000010

08002364 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800236e:	4b26      	ldr	r3, [pc, #152]	; (8002408 <mpu_set_gyro_fsr+0xa4>)
 8002370:	7a9b      	ldrb	r3, [r3, #10]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <mpu_set_gyro_fsr+0x18>
        return -1;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
 800237a:	e041      	b.n	8002400 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 800237c:	88fb      	ldrh	r3, [r7, #6]
 800237e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002382:	d017      	beq.n	80023b4 <mpu_set_gyro_fsr+0x50>
 8002384:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002388:	dc17      	bgt.n	80023ba <mpu_set_gyro_fsr+0x56>
 800238a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800238e:	d00e      	beq.n	80023ae <mpu_set_gyro_fsr+0x4a>
 8002390:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002394:	dc11      	bgt.n	80023ba <mpu_set_gyro_fsr+0x56>
 8002396:	2bfa      	cmp	r3, #250	; 0xfa
 8002398:	d003      	beq.n	80023a2 <mpu_set_gyro_fsr+0x3e>
 800239a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800239e:	d003      	beq.n	80023a8 <mpu_set_gyro_fsr+0x44>
 80023a0:	e00b      	b.n	80023ba <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
        break;
 80023a6:	e00b      	b.n	80023c0 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 80023a8:	2308      	movs	r3, #8
 80023aa:	73fb      	strb	r3, [r7, #15]
        break;
 80023ac:	e008      	b.n	80023c0 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 80023ae:	2310      	movs	r3, #16
 80023b0:	73fb      	strb	r3, [r7, #15]
        break;
 80023b2:	e005      	b.n	80023c0 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 80023b4:	2318      	movs	r3, #24
 80023b6:	73fb      	strb	r3, [r7, #15]
        break;
 80023b8:	e002      	b.n	80023c0 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	e01f      	b.n	8002400 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <mpu_set_gyro_fsr+0xa4>)
 80023c2:	7a1a      	ldrb	r2, [r3, #8]
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	08db      	lsrs	r3, r3, #3
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d101      	bne.n	80023d2 <mpu_set_gyro_fsr+0x6e>
        return 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e016      	b.n	8002400 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <mpu_set_gyro_fsr+0xa4>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	7818      	ldrb	r0, [r3, #0]
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <mpu_set_gyro_fsr+0xa4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	7999      	ldrb	r1, [r3, #6]
 80023de:	f107 030f 	add.w	r3, r7, #15
 80023e2:	2201      	movs	r2, #1
 80023e4:	f003 f876 	bl	80054d4 <stm32_i2c_write>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <mpu_set_gyro_fsr+0x90>
        return -1;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	e005      	b.n	8002400 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	08db      	lsrs	r3, r3, #3
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4b03      	ldr	r3, [pc, #12]	; (8002408 <mpu_set_gyro_fsr+0xa4>)
 80023fc:	721a      	strb	r2, [r3, #8]
    return 0;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000000 	.word	0x20000000

0800240c <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <mpu_get_accel_fsr+0x70>)
 8002416:	7a5b      	ldrb	r3, [r3, #9]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d81b      	bhi.n	8002454 <mpu_get_accel_fsr+0x48>
 800241c:	a201      	add	r2, pc, #4	; (adr r2, 8002424 <mpu_get_accel_fsr+0x18>)
 800241e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002422:	bf00      	nop
 8002424:	08002435 	.word	0x08002435
 8002428:	0800243d 	.word	0x0800243d
 800242c:	08002445 	.word	0x08002445
 8002430:	0800244d 	.word	0x0800244d
    case INV_FSR_2G:
        fsr[0] = 2;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	701a      	strb	r2, [r3, #0]
        break;
 800243a:	e00e      	b.n	800245a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2204      	movs	r2, #4
 8002440:	701a      	strb	r2, [r3, #0]
        break;
 8002442:	e00a      	b.n	800245a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2208      	movs	r2, #8
 8002448:	701a      	strb	r2, [r3, #0]
        break;
 800244a:	e006      	b.n	800245a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2210      	movs	r2, #16
 8002450:	701a      	strb	r2, [r3, #0]
        break;
 8002452:	e002      	b.n	800245a <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
 8002458:	e00a      	b.n	8002470 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <mpu_get_accel_fsr+0x70>)
 800245c:	7cdb      	ldrb	r3, [r3, #19]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	b2da      	uxtb	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	701a      	strb	r2, [r3, #0]
    return 0;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000000 	.word	0x20000000

08002480 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800248a:	4b30      	ldr	r3, [pc, #192]	; (800254c <mpu_set_accel_fsr+0xcc>)
 800248c:	7a9b      	ldrb	r3, [r3, #10]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d102      	bne.n	8002498 <mpu_set_accel_fsr+0x18>
        return -1;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
 8002496:	e054      	b.n	8002542 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	3b02      	subs	r3, #2
 800249c:	2b0e      	cmp	r3, #14
 800249e:	d82d      	bhi.n	80024fc <mpu_set_accel_fsr+0x7c>
 80024a0:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <mpu_set_accel_fsr+0x28>)
 80024a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a6:	bf00      	nop
 80024a8:	080024e5 	.word	0x080024e5
 80024ac:	080024fd 	.word	0x080024fd
 80024b0:	080024eb 	.word	0x080024eb
 80024b4:	080024fd 	.word	0x080024fd
 80024b8:	080024fd 	.word	0x080024fd
 80024bc:	080024fd 	.word	0x080024fd
 80024c0:	080024f1 	.word	0x080024f1
 80024c4:	080024fd 	.word	0x080024fd
 80024c8:	080024fd 	.word	0x080024fd
 80024cc:	080024fd 	.word	0x080024fd
 80024d0:	080024fd 	.word	0x080024fd
 80024d4:	080024fd 	.word	0x080024fd
 80024d8:	080024fd 	.word	0x080024fd
 80024dc:	080024fd 	.word	0x080024fd
 80024e0:	080024f7 	.word	0x080024f7
    case 2:
        data = INV_FSR_2G << 3;
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]
        break;
 80024e8:	e00b      	b.n	8002502 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 80024ea:	2308      	movs	r3, #8
 80024ec:	73fb      	strb	r3, [r7, #15]
        break;
 80024ee:	e008      	b.n	8002502 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 80024f0:	2310      	movs	r3, #16
 80024f2:	73fb      	strb	r3, [r7, #15]
        break;
 80024f4:	e005      	b.n	8002502 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 80024f6:	2318      	movs	r3, #24
 80024f8:	73fb      	strb	r3, [r7, #15]
        break;
 80024fa:	e002      	b.n	8002502 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 80024fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002500:	e01f      	b.n	8002542 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <mpu_set_accel_fsr+0xcc>)
 8002504:	7a5a      	ldrb	r2, [r3, #9]
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	08db      	lsrs	r3, r3, #3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	429a      	cmp	r2, r3
 800250e:	d101      	bne.n	8002514 <mpu_set_accel_fsr+0x94>
        return 0;
 8002510:	2300      	movs	r3, #0
 8002512:	e016      	b.n	8002542 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8002514:	4b0d      	ldr	r3, [pc, #52]	; (800254c <mpu_set_accel_fsr+0xcc>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	7818      	ldrb	r0, [r3, #0]
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <mpu_set_accel_fsr+0xcc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	79d9      	ldrb	r1, [r3, #7]
 8002520:	f107 030f 	add.w	r3, r7, #15
 8002524:	2201      	movs	r2, #1
 8002526:	f002 ffd5 	bl	80054d4 <stm32_i2c_write>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <mpu_set_accel_fsr+0xb6>
        return -1;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
 8002534:	e005      	b.n	8002542 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	08db      	lsrs	r3, r3, #3
 800253a:	b2da      	uxtb	r2, r3
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <mpu_set_accel_fsr+0xcc>)
 800253e:	725a      	strb	r2, [r3, #9]
    return 0;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000000 	.word	0x20000000

08002550 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800255a:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <mpu_set_lpf+0x98>)
 800255c:	7a9b      	ldrb	r3, [r3, #10]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <mpu_set_lpf+0x18>
        return -1;
 8002562:	f04f 33ff 	mov.w	r3, #4294967295
 8002566:	e03b      	b.n	80025e0 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	2bbb      	cmp	r3, #187	; 0xbb
 800256c:	d902      	bls.n	8002574 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	e019      	b.n	80025a8 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	2b61      	cmp	r3, #97	; 0x61
 8002578:	d902      	bls.n	8002580 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 800257a:	2302      	movs	r3, #2
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	e013      	b.n	80025a8 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	2b29      	cmp	r3, #41	; 0x29
 8002584:	d902      	bls.n	800258c <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8002586:	2303      	movs	r3, #3
 8002588:	73fb      	strb	r3, [r7, #15]
 800258a:	e00d      	b.n	80025a8 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	2b13      	cmp	r3, #19
 8002590:	d902      	bls.n	8002598 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8002592:	2304      	movs	r3, #4
 8002594:	73fb      	strb	r3, [r7, #15]
 8002596:	e007      	b.n	80025a8 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	2b09      	cmp	r3, #9
 800259c:	d902      	bls.n	80025a4 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 800259e:	2305      	movs	r3, #5
 80025a0:	73fb      	strb	r3, [r7, #15]
 80025a2:	e001      	b.n	80025a8 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 80025a4:	2306      	movs	r3, #6
 80025a6:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <mpu_set_lpf+0x98>)
 80025aa:	7ada      	ldrb	r2, [r3, #11]
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d101      	bne.n	80025b6 <mpu_set_lpf+0x66>
        return 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e014      	b.n	80025e0 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <mpu_set_lpf+0x98>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	7818      	ldrb	r0, [r3, #0]
 80025bc:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <mpu_set_lpf+0x98>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	7899      	ldrb	r1, [r3, #2]
 80025c2:	f107 030f 	add.w	r3, r7, #15
 80025c6:	2201      	movs	r2, #1
 80025c8:	f002 ff84 	bl	80054d4 <stm32_i2c_write>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <mpu_set_lpf+0x88>
        return -1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	e003      	b.n	80025e0 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <mpu_set_lpf+0x98>)
 80025dc:	72da      	strb	r2, [r3, #11]
    return 0;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000000 	.word	0x20000000

080025ec <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80025f6:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <mpu_set_sample_rate+0xdc>)
 80025f8:	7a9b      	ldrb	r3, [r3, #10]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <mpu_set_sample_rate+0x18>
        return -1;
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002602:	e05d      	b.n	80026c0 <mpu_set_sample_rate+0xd4>

    if (st.chip_cfg.dmp_on)
 8002604:	4b30      	ldr	r3, [pc, #192]	; (80026c8 <mpu_set_sample_rate+0xdc>)
 8002606:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <mpu_set_sample_rate+0x28>
        return -1;
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
 8002612:	e055      	b.n	80026c0 <mpu_set_sample_rate+0xd4>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8002614:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <mpu_set_sample_rate+0xdc>)
 8002616:	7d1b      	ldrb	r3, [r3, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <mpu_set_sample_rate+0x4e>
            if (rate && (rate <= 40)) {
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <mpu_set_sample_rate+0x48>
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	2b28      	cmp	r3, #40	; 0x28
 8002626:	d805      	bhi.n	8002634 <mpu_set_sample_rate+0x48>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fc00 	bl	8001e30 <mpu_lp_accel_mode>
                return 0;
 8002630:	2300      	movs	r3, #0
 8002632:	e045      	b.n	80026c0 <mpu_set_sample_rate+0xd4>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8002634:	2000      	movs	r0, #0
 8002636:	f7ff fbfb 	bl	8001e30 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	2b03      	cmp	r3, #3
 800263e:	d802      	bhi.n	8002646 <mpu_set_sample_rate+0x5a>
            rate = 4;
 8002640:	2304      	movs	r3, #4
 8002642:	80fb      	strh	r3, [r7, #6]
 8002644:	e006      	b.n	8002654 <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800264c:	d902      	bls.n	8002654 <mpu_set_sample_rate+0x68>
            rate = 1000;
 800264e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002652:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800265a:	fb92 f3f3 	sdiv	r3, r2, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8002666:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <mpu_set_sample_rate+0xdc>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	7818      	ldrb	r0, [r3, #0]
 800266c:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <mpu_set_sample_rate+0xdc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	7859      	ldrb	r1, [r3, #1]
 8002672:	f107 030f 	add.w	r3, r7, #15
 8002676:	2201      	movs	r2, #1
 8002678:	f002 ff2c 	bl	80054d4 <stm32_i2c_write>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <mpu_set_sample_rate+0x9c>
            return -1;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
 8002686:	e01b      	b.n	80026c0 <mpu_set_sample_rate+0xd4>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	3301      	adds	r3, #1
 800268c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002690:	fb92 f3f3 	sdiv	r3, r2, r3
 8002694:	b29a      	uxth	r2, r3
 8002696:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <mpu_set_sample_rate+0xdc>)
 8002698:	81da      	strh	r2, [r3, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <mpu_set_sample_rate+0xdc>)
 800269c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269e:	2164      	movs	r1, #100	; 0x64
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fa63 	bl	8001b6c <min>
 80026a6:	4603      	mov	r3, r0
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f80e 	bl	80026cc <mpu_set_compass_sample_rate>
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <mpu_set_sample_rate+0xdc>)
 80026b2:	89db      	ldrh	r3, [r3, #14]
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff49 	bl	8002550 <mpu_set_lpf>
        return 0;
 80026be:	2300      	movs	r3, #0
    }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000000 	.word	0x20000000

080026cc <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	80fb      	strh	r3, [r7, #6]
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <mpu_set_compass_sample_rate+0x20>
 80026dc:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <mpu_set_compass_sample_rate+0x7c>)
 80026de:	89db      	ldrh	r3, [r3, #14]
 80026e0:	88fa      	ldrh	r2, [r7, #6]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d802      	bhi.n	80026ec <mpu_set_compass_sample_rate+0x20>
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	2b64      	cmp	r3, #100	; 0x64
 80026ea:	d902      	bls.n	80026f2 <mpu_set_compass_sample_rate+0x26>
        return -1;
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295
 80026f0:	e026      	b.n	8002740 <mpu_set_compass_sample_rate+0x74>

    div = st.chip_cfg.sample_rate / rate - 1;
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <mpu_set_compass_sample_rate+0x7c>)
 80026f4:	89da      	ldrh	r2, [r3, #14]
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <mpu_set_compass_sample_rate+0x7c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	7818      	ldrb	r0, [r3, #0]
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <mpu_set_compass_sample_rate+0x7c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8002714:	f107 030f 	add.w	r3, r7, #15
 8002718:	2201      	movs	r2, #1
 800271a:	f002 fedb 	bl	80054d4 <stm32_i2c_write>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <mpu_set_compass_sample_rate+0x5e>
        return -1;
 8002724:	f04f 33ff 	mov.w	r3, #4294967295
 8002728:	e00a      	b.n	8002740 <mpu_set_compass_sample_rate+0x74>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 800272a:	4b07      	ldr	r3, [pc, #28]	; (8002748 <mpu_set_compass_sample_rate+0x7c>)
 800272c:	89db      	ldrh	r3, [r3, #14]
 800272e:	461a      	mov	r2, r3
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	3301      	adds	r3, #1
 8002734:	fb92 f3f3 	sdiv	r3, r2, r3
 8002738:	b29a      	uxth	r2, r3
 800273a:	4b03      	ldr	r3, [pc, #12]	; (8002748 <mpu_set_compass_sample_rate+0x7c>)
 800273c:	851a      	strh	r2, [r3, #40]	; 0x28
    return 0;
 800273e:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000000 	.word	0x20000000

0800274c <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <mpu_get_gyro_sens+0x5c>)
 8002756:	7a1b      	ldrb	r3, [r3, #8]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d81b      	bhi.n	8002794 <mpu_get_gyro_sens+0x48>
 800275c:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <mpu_get_gyro_sens+0x18>)
 800275e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002762:	bf00      	nop
 8002764:	08002775 	.word	0x08002775
 8002768:	0800277d 	.word	0x0800277d
 800276c:	08002785 	.word	0x08002785
 8002770:	0800278d 	.word	0x0800278d
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <mpu_get_gyro_sens+0x60>)
 8002778:	601a      	str	r2, [r3, #0]
        break;
 800277a:	e00e      	b.n	800279a <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a0c      	ldr	r2, [pc, #48]	; (80027b0 <mpu_get_gyro_sens+0x64>)
 8002780:	601a      	str	r2, [r3, #0]
        break;
 8002782:	e00a      	b.n	800279a <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a0b      	ldr	r2, [pc, #44]	; (80027b4 <mpu_get_gyro_sens+0x68>)
 8002788:	601a      	str	r2, [r3, #0]
        break;
 800278a:	e006      	b.n	800279a <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <mpu_get_gyro_sens+0x6c>)
 8002790:	601a      	str	r2, [r3, #0]
        break;
 8002792:	e002      	b.n	800279a <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 8002794:	f04f 33ff 	mov.w	r3, #4294967295
 8002798:	e000      	b.n	800279c <mpu_get_gyro_sens+0x50>
    }
    return 0;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000000 	.word	0x20000000
 80027ac:	43030000 	.word	0x43030000
 80027b0:	42830000 	.word	0x42830000
 80027b4:	42033333 	.word	0x42033333
 80027b8:	41833333 	.word	0x41833333

080027bc <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <mpu_get_accel_sens+0x78>)
 80027c6:	7a5b      	ldrb	r3, [r3, #9]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d81f      	bhi.n	800280c <mpu_get_accel_sens+0x50>
 80027cc:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <mpu_get_accel_sens+0x18>)
 80027ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d2:	bf00      	nop
 80027d4:	080027e5 	.word	0x080027e5
 80027d8:	080027ef 	.word	0x080027ef
 80027dc:	080027f9 	.word	0x080027f9
 80027e0:	08002803 	.word	0x08002803
    case INV_FSR_2G:
        sens[0] = 16384;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ea:	801a      	strh	r2, [r3, #0]
        break;
 80027ec:	e011      	b.n	8002812 <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8192;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027f4:	801a      	strh	r2, [r3, #0]
        break;
 80027f6:	e00c      	b.n	8002812 <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027fe:	801a      	strh	r2, [r3, #0]
        break;
 8002800:	e007      	b.n	8002812 <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002808:	801a      	strh	r2, [r3, #0]
        break;
 800280a:	e002      	b.n	8002812 <mpu_get_accel_sens+0x56>
    default:
        return -1;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	e00a      	b.n	8002828 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <mpu_get_accel_sens+0x78>)
 8002814:	7cdb      	ldrb	r3, [r3, #19]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	085b      	lsrs	r3, r3, #1
 8002820:	b29a      	uxth	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	801a      	strh	r2, [r3, #0]
    return 0;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000000 	.word	0x20000000

08002838 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 800284e:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <mpu_configure_fifo+0xa0>)
 8002850:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <mpu_configure_fifo+0x24>
        return 0;
 8002858:	2300      	movs	r3, #0
 800285a:	e038      	b.n	80028ce <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 800285c:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <mpu_configure_fifo+0xa0>)
 800285e:	7a9b      	ldrb	r3, [r3, #10]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <mpu_configure_fifo+0x32>
            return -1;
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
 8002868:	e031      	b.n	80028ce <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 800286a:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <mpu_configure_fifo+0xa0>)
 800286c:	7c1b      	ldrb	r3, [r3, #16]
 800286e:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <mpu_configure_fifo+0xa0>)
 8002872:	7a9a      	ldrb	r2, [r3, #10]
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	4013      	ands	r3, r2
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <mpu_configure_fifo+0xa0>)
 800287c:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <mpu_configure_fifo+0xa0>)
 8002880:	7c1b      	ldrb	r3, [r3, #16]
 8002882:	79fa      	ldrb	r2, [r7, #7]
 8002884:	429a      	cmp	r2, r3
 8002886:	d003      	beq.n	8002890 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8002888:	f04f 33ff 	mov.w	r3, #4294967295
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	e001      	b.n	8002894 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d103      	bne.n	80028a2 <mpu_configure_fifo+0x6a>
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <mpu_configure_fifo+0xa0>)
 800289c:	7d1b      	ldrb	r3, [r3, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <mpu_configure_fifo+0x72>
            set_int_enable(1);
 80028a2:	2001      	movs	r0, #1
 80028a4:	f7ff f972 	bl	8001b8c <set_int_enable>
 80028a8:	e002      	b.n	80028b0 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 80028aa:	2000      	movs	r0, #0
 80028ac:	f7ff f96e 	bl	8001b8c <set_int_enable>
        if (sensors) {
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 80028b6:	f7ff fc51 	bl	800215c <mpu_reset_fifo>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 80028c0:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <mpu_configure_fifo+0xa0>)
 80028c2:	7afb      	ldrb	r3, [r7, #11]
 80028c4:	7413      	strb	r3, [r2, #16]
                return -1;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ca:	e000      	b.n	80028ce <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 80028cc:	68fb      	ldr	r3, [r7, #12]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000000 	.word	0x20000000

080028dc <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e007      	b.n	8002906 <mpu_set_sensors+0x2a>
    else if (sensors)
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <mpu_set_sensors+0x26>
        data = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	e001      	b.n	8002906 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8002902:	2340      	movs	r3, #64	; 0x40
 8002904:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8002906:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <mpu_set_sensors+0x120>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	7818      	ldrb	r0, [r3, #0]
 800290c:	4b3b      	ldr	r3, [pc, #236]	; (80029fc <mpu_set_sensors+0x120>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	7d59      	ldrb	r1, [r3, #21]
 8002912:	f107 030f 	add.w	r3, r7, #15
 8002916:	2201      	movs	r2, #1
 8002918:	f002 fddc 	bl	80054d4 <stm32_i2c_write>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 8002922:	4b36      	ldr	r3, [pc, #216]	; (80029fc <mpu_set_sensors+0x120>)
 8002924:	2200      	movs	r2, #0
 8002926:	729a      	strb	r2, [r3, #10]
        return -1;
 8002928:	f04f 33ff 	mov.w	r3, #4294967295
 800292c:	e062      	b.n	80029f4 <mpu_set_sensors+0x118>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4b31      	ldr	r3, [pc, #196]	; (80029fc <mpu_set_sensors+0x120>)
 8002938:	731a      	strb	r2, [r3, #12]

    data = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d104      	bne.n	8002952 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	f043 0304 	orr.w	r3, r3, #4
 800294e:	b2db      	uxtb	r3, r3
 8002950:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d104      	bne.n	8002966 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	f043 0302 	orr.w	r3, r3, #2
 8002962:	b2db      	uxtb	r3, r3
 8002964:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	d104      	bne.n	800297a <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	b2db      	uxtb	r3, r3
 8002978:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d104      	bne.n	800298e <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800298a:	b2db      	uxtb	r3, r3
 800298c:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 800298e:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <mpu_set_sensors+0x120>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	7818      	ldrb	r0, [r3, #0]
 8002994:	4b19      	ldr	r3, [pc, #100]	; (80029fc <mpu_set_sensors+0x120>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	7d99      	ldrb	r1, [r3, #22]
 800299a:	f107 030f 	add.w	r3, r7, #15
 800299e:	2201      	movs	r2, #1
 80029a0:	f002 fd98 	bl	80054d4 <stm32_i2c_write>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d005      	beq.n	80029b6 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 80029aa:	4b14      	ldr	r3, [pc, #80]	; (80029fc <mpu_set_sensors+0x120>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	729a      	strb	r2, [r3, #10]
        return -1;
 80029b0:	f04f 33ff 	mov.w	r3, #4294967295
 80029b4:	e01e      	b.n	80029f4 <mpu_set_sensors+0x118>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <mpu_set_sensors+0xec>
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d002      	beq.n	80029c8 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f000 f960 	bl	8002c88 <mpu_set_int_latched>

#ifdef AK89xx_SECONDARY
#ifdef AK89xx_BYPASS
    if (sensors & INV_XYZ_COMPASS)
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <mpu_set_sensors+0xfe>
        mpu_set_bypass(1);
 80029d2:	2001      	movs	r0, #1
 80029d4:	f000 f892 	bl	8002afc <mpu_set_bypass>
 80029d8:	e002      	b.n	80029e0 <mpu_set_sensors+0x104>
    else
        mpu_set_bypass(0);
 80029da:	2000      	movs	r0, #0
 80029dc:	f000 f88e 	bl	8002afc <mpu_set_bypass>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 80029e0:	4a06      	ldr	r2, [pc, #24]	; (80029fc <mpu_set_sensors+0x120>)
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <mpu_set_sensors+0x120>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 80029ec:	2032      	movs	r0, #50	; 0x32
 80029ee:	f002 fd5a 	bl	80054a6 <stm32_delay_ms>
    return 0;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000000 	.word	0x20000000

08002a00 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8002a0e:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <mpu_read_fifo_stream+0xf8>)
 8002a10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <mpu_read_fifo_stream+0x1e>
        return -1;
 8002a18:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1c:	e068      	b.n	8002af0 <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
 8002a1e:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <mpu_read_fifo_stream+0xf8>)
 8002a20:	7a9b      	ldrb	r3, [r3, #10]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d102      	bne.n	8002a2c <mpu_read_fifo_stream+0x2c>
        return -1;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	e061      	b.n	8002af0 <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8002a2c:	4b32      	ldr	r3, [pc, #200]	; (8002af8 <mpu_read_fifo_stream+0xf8>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	7818      	ldrb	r0, [r3, #0]
 8002a32:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <mpu_read_fifo_stream+0xf8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	7b19      	ldrb	r1, [r3, #12]
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	f002 fdaf 	bl	80055a0 <stm32_i2c_read>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <mpu_read_fifo_stream+0x4e>
        return -1;
 8002a48:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4c:	e050      	b.n	8002af0 <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8002a4e:	7d3b      	ldrb	r3, [r7, #20]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	b21a      	sxth	r2, r3
 8002a54:	7d7b      	ldrb	r3, [r7, #21]
 8002a56:	b21b      	sxth	r3, r3
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	b21b      	sxth	r3, r3
 8002a5c:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8002a5e:	8afa      	ldrh	r2, [r7, #22]
 8002a60:	89fb      	ldrh	r3, [r7, #14]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d205      	bcs.n	8002a72 <mpu_read_fifo_stream+0x72>
        more[0] = 0;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
        return -1;
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a70:	e03e      	b.n	8002af0 <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8002a72:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <mpu_read_fifo_stream+0xf8>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	885b      	ldrh	r3, [r3, #2]
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	8afa      	ldrh	r2, [r7, #22]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d91a      	bls.n	8002ab8 <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8002a82:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <mpu_read_fifo_stream+0xf8>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	7818      	ldrb	r0, [r3, #0]
 8002a88:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <mpu_read_fifo_stream+0xf8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	7cd9      	ldrb	r1, [r3, #19]
 8002a8e:	f107 0314 	add.w	r3, r7, #20
 8002a92:	2201      	movs	r2, #1
 8002a94:	f002 fd84 	bl	80055a0 <stm32_i2c_read>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <mpu_read_fifo_stream+0xa4>
            return -1;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa2:	e025      	b.n	8002af0 <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8002aa4:	7d3b      	ldrb	r3, [r7, #20]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
 8002aae:	f7ff fb55 	bl	800215c <mpu_reset_fifo>
            return -2;
 8002ab2:	f06f 0301 	mvn.w	r3, #1
 8002ab6:	e01b      	b.n	8002af0 <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <mpu_read_fifo_stream+0xf8>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	7818      	ldrb	r0, [r3, #0]
 8002abe:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <mpu_read_fifo_stream+0xf8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	7b59      	ldrb	r1, [r3, #13]
 8002ac4:	89fb      	ldrh	r3, [r7, #14]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f002 fd69 	bl	80055a0 <stm32_i2c_read>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <mpu_read_fifo_stream+0xda>
        return -1;
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad8:	e00a      	b.n	8002af0 <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
 8002ada:	8afa      	ldrh	r2, [r7, #22]
 8002adc:	89fb      	ldrh	r3, [r7, #14]
 8002ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	701a      	strb	r2, [r3, #0]
    return 0;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20000000 	.word	0x20000000

08002afc <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8002b06:	4b5f      	ldr	r3, [pc, #380]	; (8002c84 <mpu_set_bypass+0x188>)
 8002b08:	7c9b      	ldrb	r3, [r3, #18]
 8002b0a:	79fa      	ldrb	r2, [r7, #7]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d101      	bne.n	8002b14 <mpu_set_bypass+0x18>
        return 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e0b2      	b.n	8002c7a <mpu_set_bypass+0x17e>

    if (bypass_on) {
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d050      	beq.n	8002bbc <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002b1a:	4b5a      	ldr	r3, [pc, #360]	; (8002c84 <mpu_set_bypass+0x188>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	7818      	ldrb	r0, [r3, #0]
 8002b20:	4b58      	ldr	r3, [pc, #352]	; (8002c84 <mpu_set_bypass+0x188>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	7919      	ldrb	r1, [r3, #4]
 8002b26:	f107 030f 	add.w	r3, r7, #15
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f002 fd38 	bl	80055a0 <stm32_i2c_read>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <mpu_set_bypass+0x40>
            return -1;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3a:	e09e      	b.n	8002c7a <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	f023 0320 	bic.w	r3, r3, #32
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002b46:	4b4f      	ldr	r3, [pc, #316]	; (8002c84 <mpu_set_bypass+0x188>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	7818      	ldrb	r0, [r3, #0]
 8002b4c:	4b4d      	ldr	r3, [pc, #308]	; (8002c84 <mpu_set_bypass+0x188>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	7919      	ldrb	r1, [r3, #4]
 8002b52:	f107 030f 	add.w	r3, r7, #15
 8002b56:	2201      	movs	r2, #1
 8002b58:	f002 fcbc 	bl	80054d4 <stm32_i2c_write>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <mpu_set_bypass+0x6c>
            return -1;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	e088      	b.n	8002c7a <mpu_set_bypass+0x17e>
        delay_ms(3);
 8002b68:	2003      	movs	r0, #3
 8002b6a:	f002 fc9c 	bl	80054a6 <stm32_delay_ms>
        tmp = BIT_BYPASS_EN;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 8002b72:	4b44      	ldr	r3, [pc, #272]	; (8002c84 <mpu_set_bypass+0x188>)
 8002b74:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d004      	beq.n	8002b86 <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002b86:	4b3f      	ldr	r3, [pc, #252]	; (8002c84 <mpu_set_bypass+0x188>)
 8002b88:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d004      	beq.n	8002b9a <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002b9a:	4b3a      	ldr	r3, [pc, #232]	; (8002c84 <mpu_set_bypass+0x188>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	7818      	ldrb	r0, [r3, #0]
 8002ba0:	4b38      	ldr	r3, [pc, #224]	; (8002c84 <mpu_set_bypass+0x188>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	7dd9      	ldrb	r1, [r3, #23]
 8002ba6:	f107 030f 	add.w	r3, r7, #15
 8002baa:	2201      	movs	r2, #1
 8002bac:	f002 fc92 	bl	80054d4 <stm32_i2c_write>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d05d      	beq.n	8002c72 <mpu_set_bypass+0x176>
            return -1;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bba:	e05e      	b.n	8002c7a <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002bbc:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <mpu_set_bypass+0x188>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	7818      	ldrb	r0, [r3, #0]
 8002bc2:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <mpu_set_bypass+0x188>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	7919      	ldrb	r1, [r3, #4]
 8002bc8:	f107 030f 	add.w	r3, r7, #15
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f002 fce7 	bl	80055a0 <stm32_i2c_read>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <mpu_set_bypass+0xe2>
            return -1;
 8002bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bdc:	e04d      	b.n	8002c7a <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8002bde:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <mpu_set_bypass+0x188>)
 8002be0:	7a9b      	ldrb	r3, [r3, #10]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	f043 0320 	orr.w	r3, r3, #32
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	73fb      	strb	r3, [r7, #15]
 8002bf4:	e004      	b.n	8002c00 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	f023 0320 	bic.w	r3, r3, #32
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002c00:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <mpu_set_bypass+0x188>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	7818      	ldrb	r0, [r3, #0]
 8002c06:	4b1f      	ldr	r3, [pc, #124]	; (8002c84 <mpu_set_bypass+0x188>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	7919      	ldrb	r1, [r3, #4]
 8002c0c:	f107 030f 	add.w	r3, r7, #15
 8002c10:	2201      	movs	r2, #1
 8002c12:	f002 fc5f 	bl	80054d4 <stm32_i2c_write>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <mpu_set_bypass+0x126>
            return -1;
 8002c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c20:	e02b      	b.n	8002c7a <mpu_set_bypass+0x17e>
        delay_ms(3);
 8002c22:	2003      	movs	r0, #3
 8002c24:	f002 fc3f 	bl	80054a6 <stm32_delay_ms>
        if (st.chip_cfg.active_low_int)
 8002c28:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <mpu_set_bypass+0x188>)
 8002c2a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	73fb      	strb	r3, [r7, #15]
 8002c36:	e001      	b.n	8002c3c <mpu_set_bypass+0x140>
        else
            tmp = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <mpu_set_bypass+0x188>)
 8002c3e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d004      	beq.n	8002c50 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <mpu_set_bypass+0x188>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	7818      	ldrb	r0, [r3, #0]
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <mpu_set_bypass+0x188>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	7dd9      	ldrb	r1, [r3, #23]
 8002c5c:	f107 030f 	add.w	r3, r7, #15
 8002c60:	2201      	movs	r2, #1
 8002c62:	f002 fc37 	bl	80054d4 <stm32_i2c_write>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <mpu_set_bypass+0x176>
            return -1;
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c70:	e003      	b.n	8002c7a <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8002c72:	4a04      	ldr	r2, [pc, #16]	; (8002c84 <mpu_set_bypass+0x188>)
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	7493      	strb	r3, [r2, #18]
    return 0;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000000 	.word	0x20000000

08002c88 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8002c92:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <mpu_set_int_latched+0x84>)
 8002c94:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002c98:	79fa      	ldrb	r2, [r7, #7]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d101      	bne.n	8002ca2 <mpu_set_int_latched+0x1a>
        return 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e030      	b.n	8002d04 <mpu_set_int_latched+0x7c>

    if (enable)
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002ca8:	2330      	movs	r3, #48	; 0x30
 8002caa:	73fb      	strb	r3, [r7, #15]
 8002cac:	e001      	b.n	8002cb2 <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <mpu_set_int_latched+0x84>)
 8002cb4:	7c9b      	ldrb	r3, [r3, #18]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d004      	beq.n	8002cc4 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	f043 0302 	orr.w	r3, r3, #2
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <mpu_set_int_latched+0x84>)
 8002cc6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <mpu_set_int_latched+0x84>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	7818      	ldrb	r0, [r3, #0]
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <mpu_set_int_latched+0x84>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	7dd9      	ldrb	r1, [r3, #23]
 8002ce4:	f107 030f 	add.w	r3, r7, #15
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f002 fbf3 	bl	80054d4 <stm32_i2c_write>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <mpu_set_int_latched+0x72>
        return -1;
 8002cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf8:	e004      	b.n	8002d04 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 8002cfa:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <mpu_set_int_latched+0x84>)
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20000000 	.word	0x20000000

08002d10 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	603a      	str	r2, [r7, #0]
 8002d1a:	80fb      	strh	r3, [r7, #6]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d102      	bne.n	8002d2c <mpu_write_mem+0x1c>
        return -1;
 8002d26:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2a:	e03d      	b.n	8002da8 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 8002d2c:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <mpu_write_mem+0xa0>)
 8002d2e:	7a9b      	ldrb	r3, [r3, #10]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <mpu_write_mem+0x2a>
        return -1;
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
 8002d38:	e036      	b.n	8002da8 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8002d4a:	7b7b      	ldrb	r3, [r7, #13]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	88bb      	ldrh	r3, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <mpu_write_mem+0xa0>)
 8002d54:	6852      	ldr	r2, [r2, #4]
 8002d56:	8952      	ldrh	r2, [r2, #10]
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	dd02      	ble.n	8002d62 <mpu_write_mem+0x52>
        return -1;
 8002d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d60:	e022      	b.n	8002da8 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8002d62:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <mpu_write_mem+0xa0>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	7818      	ldrb	r0, [r3, #0]
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <mpu_write_mem+0xa0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	7ed9      	ldrb	r1, [r3, #27]
 8002d6e:	f107 030c 	add.w	r3, r7, #12
 8002d72:	2202      	movs	r2, #2
 8002d74:	f002 fbae 	bl	80054d4 <stm32_i2c_write>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <mpu_write_mem+0x74>
        return -1;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	e011      	b.n	8002da8 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8002d84:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <mpu_write_mem+0xa0>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	7818      	ldrb	r0, [r3, #0]
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <mpu_write_mem+0xa0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	7e19      	ldrb	r1, [r3, #24]
 8002d90:	88bb      	ldrh	r3, [r7, #4]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	f002 fb9d 	bl	80054d4 <stm32_i2c_write>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <mpu_write_mem+0x96>
        return -1;
 8002da0:	f04f 33ff 	mov.w	r3, #4294967295
 8002da4:	e000      	b.n	8002da8 <mpu_write_mem+0x98>
    return 0;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000000 	.word	0x20000000

08002db4 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	603a      	str	r2, [r7, #0]
 8002dbe:	80fb      	strh	r3, [r7, #6]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <mpu_read_mem+0x1c>
        return -1;
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295
 8002dce:	e03d      	b.n	8002e4c <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 8002dd0:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <mpu_read_mem+0xa0>)
 8002dd2:	7a9b      	ldrb	r3, [r3, #10]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <mpu_read_mem+0x2a>
        return -1;
 8002dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ddc:	e036      	b.n	8002e4c <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8002dee:	7b7b      	ldrb	r3, [r7, #13]
 8002df0:	461a      	mov	r2, r3
 8002df2:	88bb      	ldrh	r3, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	4a17      	ldr	r2, [pc, #92]	; (8002e54 <mpu_read_mem+0xa0>)
 8002df8:	6852      	ldr	r2, [r2, #4]
 8002dfa:	8952      	ldrh	r2, [r2, #10]
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	dd02      	ble.n	8002e06 <mpu_read_mem+0x52>
        return -1;
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295
 8002e04:	e022      	b.n	8002e4c <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8002e06:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <mpu_read_mem+0xa0>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	7818      	ldrb	r0, [r3, #0]
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <mpu_read_mem+0xa0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	7ed9      	ldrb	r1, [r3, #27]
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	2202      	movs	r2, #2
 8002e18:	f002 fb5c 	bl	80054d4 <stm32_i2c_write>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <mpu_read_mem+0x74>
        return -1;
 8002e22:	f04f 33ff 	mov.w	r3, #4294967295
 8002e26:	e011      	b.n	8002e4c <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <mpu_read_mem+0xa0>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	7818      	ldrb	r0, [r3, #0]
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <mpu_read_mem+0xa0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	7e19      	ldrb	r1, [r3, #24]
 8002e34:	88bb      	ldrh	r3, [r7, #4]
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f002 fbb1 	bl	80055a0 <stm32_i2c_read>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <mpu_read_mem+0x96>
        return -1;
 8002e44:	f04f 33ff 	mov.w	r3, #4294967295
 8002e48:	e000      	b.n	8002e4c <mpu_read_mem+0x98>
    return 0;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000000 	.word	0x20000000

08002e58 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	4611      	mov	r1, r2
 8002e62:	461a      	mov	r2, r3
 8002e64:	4603      	mov	r3, r0
 8002e66:	81fb      	strh	r3, [r7, #14]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	81bb      	strh	r3, [r7, #12]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8002e70:	4b38      	ldr	r3, [pc, #224]	; (8002f54 <mpu_load_firmware+0xfc>)
 8002e72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	e064      	b.n	8002f4a <mpu_load_firmware+0xf2>

    if (!firmware)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <mpu_load_firmware+0x34>
        return -1;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8a:	e05e      	b.n	8002f4a <mpu_load_firmware+0xf2>
    for (ii = 0; ii < length; ii += this_write) {
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e90:	e036      	b.n	8002f00 <mpu_load_firmware+0xa8>
        this_write = min(LOAD_CHUNK, length - ii);
 8002e92:	89fa      	ldrh	r2, [r7, #14]
 8002e94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	4619      	mov	r1, r3
 8002e9a:	2010      	movs	r0, #16
 8002e9c:	f7fe fe66 	bl	8001b6c <min>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8002ea4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	441a      	add	r2, r3
 8002eaa:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002eac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff2e 	bl	8002d10 <mpu_write_mem>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <mpu_load_firmware+0x68>
            return -1;
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebe:	e044      	b.n	8002f4a <mpu_load_firmware+0xf2>
        if (mpu_read_mem(ii, this_write, cur))
 8002ec0:	f107 0214 	add.w	r2, r7, #20
 8002ec4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002ec6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff73 	bl	8002db4 <mpu_read_mem>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <mpu_load_firmware+0x82>
            return -1;
 8002ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed8:	e037      	b.n	8002f4a <mpu_load_firmware+0xf2>
        if (memcmp(firmware+ii, cur, this_write))
 8002eda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	4413      	add	r3, r2
 8002ee0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ee2:	f107 0114 	add.w	r1, r7, #20
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f007 feb8 	bl	800ac5c <memcmp>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <mpu_load_firmware+0xa0>
            return -2;
 8002ef2:	f06f 0301 	mvn.w	r3, #1
 8002ef6:	e028      	b.n	8002f4a <mpu_load_firmware+0xf2>
    for (ii = 0; ii < length; ii += this_write) {
 8002ef8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002efc:	4413      	add	r3, r2
 8002efe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f00:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f02:	89fb      	ldrh	r3, [r7, #14]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d3c4      	bcc.n	8002e92 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 8002f08:	89bb      	ldrh	r3, [r7, #12]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 8002f12:	89bb      	ldrh	r3, [r7, #12]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8002f18:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <mpu_load_firmware+0xfc>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	7818      	ldrb	r0, [r3, #0]
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <mpu_load_firmware+0xfc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	7f59      	ldrb	r1, [r3, #29]
 8002f24:	f107 0310 	add.w	r3, r7, #16
 8002f28:	2202      	movs	r2, #2
 8002f2a:	f002 fad3 	bl	80054d4 <stm32_i2c_write>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <mpu_load_firmware+0xe2>
        return -1;
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295
 8002f38:	e007      	b.n	8002f4a <mpu_load_firmware+0xf2>

    st.chip_cfg.dmp_loaded = 1;
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <mpu_load_firmware+0xfc>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8002f42:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <mpu_load_firmware+0xfc>)
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3728      	adds	r7, #40	; 0x28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000000 	.word	0x20000000

08002f58 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <mpu_set_dmp_state+0xa4>)
 8002f64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f68:	79fa      	ldrb	r2, [r7, #7]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d101      	bne.n	8002f72 <mpu_set_dmp_state+0x1a>
        return 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e040      	b.n	8002ff4 <mpu_set_dmp_state+0x9c>

    if (enable) {
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d027      	beq.n	8002fc8 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 8002f78:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <mpu_set_dmp_state+0xa4>)
 8002f7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <mpu_set_dmp_state+0x30>
            return -1;
 8002f82:	f04f 33ff 	mov.w	r3, #4294967295
 8002f86:	e035      	b.n	8002ff4 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7fe fdff 	bl	8001b8c <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f7ff fdb4 	bl	8002afc <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <mpu_set_dmp_state+0xa4>)
 8002f96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fb27 	bl	80025ec <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8002fa2:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <mpu_set_dmp_state+0xa4>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	7818      	ldrb	r0, [r3, #0]
 8002fa8:	f107 030f 	add.w	r3, r7, #15
 8002fac:	2201      	movs	r2, #1
 8002fae:	2123      	movs	r1, #35	; 0x23
 8002fb0:	f002 fa90 	bl	80054d4 <stm32_i2c_write>
        st.chip_cfg.dmp_on = 1;
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <mpu_set_dmp_state+0xa4>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	f7fe fde5 	bl	8001b8c <set_int_enable>
        mpu_reset_fifo();
 8002fc2:	f7ff f8cb 	bl	800215c <mpu_reset_fifo>
 8002fc6:	e014      	b.n	8002ff2 <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f7fe fddf 	bl	8001b8c <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8002fce:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <mpu_set_dmp_state+0xa4>)
 8002fd0:	7c1b      	ldrb	r3, [r3, #16]
 8002fd2:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8002fd4:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <mpu_set_dmp_state+0xa4>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	7818      	ldrb	r0, [r3, #0]
 8002fda:	f107 030f 	add.w	r3, r7, #15
 8002fde:	2201      	movs	r2, #1
 8002fe0:	2123      	movs	r1, #35	; 0x23
 8002fe2:	f002 fa77 	bl	80054d4 <stm32_i2c_write>
        st.chip_cfg.dmp_on = 0;
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <mpu_set_dmp_state+0xa4>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 8002fee:	f7ff f8b5 	bl	800215c <mpu_reset_fifo>
    }
    return 0;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20000000 	.word	0x20000000

08003000 <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 8003006:	2001      	movs	r0, #1
 8003008:	f7ff fd78 	bl	8002afc <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 800300c:	230c      	movs	r3, #12
 800300e:	73fb      	strb	r3, [r7, #15]
 8003010:	e00f      	b.n	8003032 <setup_compass+0x32>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	7bf8      	ldrb	r0, [r7, #15]
 8003016:	2201      	movs	r2, #1
 8003018:	2100      	movs	r1, #0
 800301a:	f002 fac1 	bl	80055a0 <stm32_i2c_read>
 800301e:	60b8      	str	r0, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <setup_compass+0x2c>
 8003026:	793b      	ldrb	r3, [r7, #4]
 8003028:	2b48      	cmp	r3, #72	; 0x48
 800302a:	d006      	beq.n	800303a <setup_compass+0x3a>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	3301      	adds	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b0f      	cmp	r3, #15
 8003036:	d9ec      	bls.n	8003012 <setup_compass+0x12>
 8003038:	e000      	b.n	800303c <setup_compass+0x3c>
            break;
 800303a:	bf00      	nop
    }

    if (akm_addr > 0x0F) {
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2b0f      	cmp	r3, #15
 8003040:	d902      	bls.n	8003048 <setup_compass+0x48>
        /* TODO: Handle this case in all compass-related functions. */
        return -1;
 8003042:	f04f 33ff 	mov.w	r3, #4294967295
 8003046:	e112      	b.n	800326e <setup_compass+0x26e>
    }

    st.chip_cfg.compass_addr = akm_addr;
 8003048:	4a8b      	ldr	r2, [pc, #556]	; (8003278 <setup_compass+0x278>)
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
 8003050:	2310      	movs	r3, #16
 8003052:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8003054:	4b88      	ldr	r3, [pc, #544]	; (8003278 <setup_compass+0x278>)
 8003056:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	2201      	movs	r2, #1
 800305e:	210a      	movs	r1, #10
 8003060:	f002 fa38 	bl	80054d4 <stm32_i2c_write>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <setup_compass+0x70>
        return -1;
 800306a:	f04f 33ff 	mov.w	r3, #4294967295
 800306e:	e0fe      	b.n	800326e <setup_compass+0x26e>
    delay_ms(1);
 8003070:	2001      	movs	r0, #1
 8003072:	f002 fa18 	bl	80054a6 <stm32_delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 8003076:	231f      	movs	r3, #31
 8003078:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800307a:	4b7f      	ldr	r3, [pc, #508]	; (8003278 <setup_compass+0x278>)
 800307c:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	2201      	movs	r2, #1
 8003084:	210a      	movs	r1, #10
 8003086:	f002 fa25 	bl	80054d4 <stm32_i2c_write>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <setup_compass+0x96>
        return -1;
 8003090:	f04f 33ff 	mov.w	r3, #4294967295
 8003094:	e0eb      	b.n	800326e <setup_compass+0x26e>
    delay_ms(1);
 8003096:	2001      	movs	r0, #1
 8003098:	f002 fa05 	bl	80054a6 <stm32_delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 800309c:	4b76      	ldr	r3, [pc, #472]	; (8003278 <setup_compass+0x278>)
 800309e:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 80030a2:	1d3b      	adds	r3, r7, #4
 80030a4:	2203      	movs	r2, #3
 80030a6:	2110      	movs	r1, #16
 80030a8:	f002 fa7a 	bl	80055a0 <stm32_i2c_read>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <setup_compass+0xb8>
        return -1;
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
 80030b6:	e0da      	b.n	800326e <setup_compass+0x26e>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 80030b8:	793b      	ldrb	r3, [r7, #4]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3380      	adds	r3, #128	; 0x80
 80030be:	b29b      	uxth	r3, r3
 80030c0:	b21a      	sxth	r2, r3
 80030c2:	4b6d      	ldr	r3, [pc, #436]	; (8003278 <setup_compass+0x278>)
 80030c4:	859a      	strh	r2, [r3, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 80030c6:	797b      	ldrb	r3, [r7, #5]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3380      	adds	r3, #128	; 0x80
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	b21a      	sxth	r2, r3
 80030d0:	4b69      	ldr	r3, [pc, #420]	; (8003278 <setup_compass+0x278>)
 80030d2:	85da      	strh	r2, [r3, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 80030d4:	79bb      	ldrb	r3, [r7, #6]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3380      	adds	r3, #128	; 0x80
 80030da:	b29b      	uxth	r3, r3
 80030dc:	b21a      	sxth	r2, r3
 80030de:	4b66      	ldr	r3, [pc, #408]	; (8003278 <setup_compass+0x278>)
 80030e0:	861a      	strh	r2, [r3, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
 80030e2:	2310      	movs	r3, #16
 80030e4:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80030e6:	4b64      	ldr	r3, [pc, #400]	; (8003278 <setup_compass+0x278>)
 80030e8:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 80030ec:	1d3b      	adds	r3, r7, #4
 80030ee:	2201      	movs	r2, #1
 80030f0:	210a      	movs	r1, #10
 80030f2:	f002 f9ef 	bl	80054d4 <stm32_i2c_write>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <setup_compass+0x102>
        return -1;
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003100:	e0b5      	b.n	800326e <setup_compass+0x26e>
    delay_ms(1);
 8003102:	2001      	movs	r0, #1
 8003104:	f002 f9cf 	bl	80054a6 <stm32_delay_ms>

    mpu_set_bypass(0);
 8003108:	2000      	movs	r0, #0
 800310a:	f7ff fcf7 	bl	8002afc <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
 800310e:	2340      	movs	r3, #64	; 0x40
 8003110:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8003112:	4b59      	ldr	r3, [pc, #356]	; (8003278 <setup_compass+0x278>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	7818      	ldrb	r0, [r3, #0]
 8003118:	4b57      	ldr	r3, [pc, #348]	; (8003278 <setup_compass+0x278>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	7e99      	ldrb	r1, [r3, #26]
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	2201      	movs	r2, #1
 8003122:	f002 f9d7 	bl	80054d4 <stm32_i2c_write>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <setup_compass+0x132>
        return -1;
 800312c:	f04f 33ff 	mov.w	r3, #4294967295
 8003130:	e09d      	b.n	800326e <setup_compass+0x26e>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8003132:	4b51      	ldr	r3, [pc, #324]	; (8003278 <setup_compass+0x278>)
 8003134:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003138:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800313c:	b2db      	uxtb	r3, r3
 800313e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8003140:	4b4d      	ldr	r3, [pc, #308]	; (8003278 <setup_compass+0x278>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	7818      	ldrb	r0, [r3, #0]
 8003146:	4b4c      	ldr	r3, [pc, #304]	; (8003278 <setup_compass+0x278>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	7f99      	ldrb	r1, [r3, #30]
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	2201      	movs	r2, #1
 8003150:	f002 f9c0 	bl	80054d4 <stm32_i2c_write>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <setup_compass+0x160>
        return -1;
 800315a:	f04f 33ff 	mov.w	r3, #4294967295
 800315e:	e086      	b.n	800326e <setup_compass+0x26e>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
 8003160:	2302      	movs	r3, #2
 8003162:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8003164:	4b44      	ldr	r3, [pc, #272]	; (8003278 <setup_compass+0x278>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	7818      	ldrb	r0, [r3, #0]
 800316a:	4b43      	ldr	r3, [pc, #268]	; (8003278 <setup_compass+0x278>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	7fd9      	ldrb	r1, [r3, #31]
 8003170:	1d3b      	adds	r3, r7, #4
 8003172:	2201      	movs	r2, #1
 8003174:	f002 f9ae 	bl	80054d4 <stm32_i2c_write>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <setup_compass+0x184>
        return -1;
 800317e:	f04f 33ff 	mov.w	r3, #4294967295
 8003182:	e074      	b.n	800326e <setup_compass+0x26e>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
 8003184:	2388      	movs	r3, #136	; 0x88
 8003186:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8003188:	4b3b      	ldr	r3, [pc, #236]	; (8003278 <setup_compass+0x278>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	7818      	ldrb	r0, [r3, #0]
 800318e:	4b3a      	ldr	r3, [pc, #232]	; (8003278 <setup_compass+0x278>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f893 1020 	ldrb.w	r1, [r3, #32]
 8003196:	1d3b      	adds	r3, r7, #4
 8003198:	2201      	movs	r2, #1
 800319a:	f002 f99b 	bl	80054d4 <stm32_i2c_write>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <setup_compass+0x1aa>
        return -1;
 80031a4:	f04f 33ff 	mov.w	r3, #4294967295
 80031a8:	e061      	b.n	800326e <setup_compass+0x26e>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
 80031aa:	4b33      	ldr	r3, [pc, #204]	; (8003278 <setup_compass+0x278>)
 80031ac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80031b0:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 80031b2:	4b31      	ldr	r3, [pc, #196]	; (8003278 <setup_compass+0x278>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	7818      	ldrb	r0, [r3, #0]
 80031b8:	4b2f      	ldr	r3, [pc, #188]	; (8003278 <setup_compass+0x278>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 80031c0:	1d3b      	adds	r3, r7, #4
 80031c2:	2201      	movs	r2, #1
 80031c4:	f002 f986 	bl	80054d4 <stm32_i2c_write>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <setup_compass+0x1d4>
        return -1;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295
 80031d2:	e04c      	b.n	800326e <setup_compass+0x26e>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
 80031d4:	230a      	movs	r3, #10
 80031d6:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <setup_compass+0x278>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	7818      	ldrb	r0, [r3, #0]
 80031de:	4b26      	ldr	r3, [pc, #152]	; (8003278 <setup_compass+0x278>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 80031e6:	1d3b      	adds	r3, r7, #4
 80031e8:	2201      	movs	r2, #1
 80031ea:	f002 f973 	bl	80054d4 <stm32_i2c_write>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <setup_compass+0x1fa>
        return -1;
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
 80031f8:	e039      	b.n	800326e <setup_compass+0x26e>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
 80031fa:	2381      	movs	r3, #129	; 0x81
 80031fc:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 80031fe:	4b1e      	ldr	r3, [pc, #120]	; (8003278 <setup_compass+0x278>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	7818      	ldrb	r0, [r3, #0]
 8003204:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <setup_compass+0x278>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	2201      	movs	r2, #1
 8003210:	f002 f960 	bl	80054d4 <stm32_i2c_write>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <setup_compass+0x220>
        return -1;
 800321a:	f04f 33ff 	mov.w	r3, #4294967295
 800321e:	e026      	b.n	800326e <setup_compass+0x26e>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
 8003220:	2311      	movs	r3, #17
 8003222:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <setup_compass+0x278>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	7818      	ldrb	r0, [r3, #0]
 800322a:	4b13      	ldr	r3, [pc, #76]	; (8003278 <setup_compass+0x278>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 8003232:	1d3b      	adds	r3, r7, #4
 8003234:	2201      	movs	r2, #1
 8003236:	f002 f94d 	bl	80054d4 <stm32_i2c_write>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <setup_compass+0x246>
        return -1;
 8003240:	f04f 33ff 	mov.w	r3, #4294967295
 8003244:	e013      	b.n	800326e <setup_compass+0x26e>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
 8003246:	2303      	movs	r3, #3
 8003248:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 800324a:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <setup_compass+0x278>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	7818      	ldrb	r0, [r3, #0]
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <setup_compass+0x278>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
 8003258:	1d3b      	adds	r3, r7, #4
 800325a:	2201      	movs	r2, #1
 800325c:	f002 f93a 	bl	80054d4 <stm32_i2c_write>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <setup_compass+0x26c>
        return -1;
 8003266:	f04f 33ff 	mov.w	r3, #4294967295
 800326a:	e000      	b.n	800326e <setup_compass+0x26e>
    data[0] = BIT_I2C_MST_VDDIO;
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
        return -1;
#endif

    return 0;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000000 	.word	0x20000000

0800327c <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8003286:	4b48      	ldr	r3, [pc, #288]	; (80033a8 <mpu_get_compass_reg+0x12c>)
 8003288:	7a9b      	ldrb	r3, [r3, #10]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d102      	bne.n	8003298 <mpu_get_compass_reg+0x1c>
        return -1;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
 8003296:	e083      	b.n	80033a0 <mpu_get_compass_reg+0x124>

#ifdef AK89xx_BYPASS
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ST1, 8, tmp))
 8003298:	4b43      	ldr	r3, [pc, #268]	; (80033a8 <mpu_get_compass_reg+0x12c>)
 800329a:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 800329e:	f107 030c 	add.w	r3, r7, #12
 80032a2:	2208      	movs	r2, #8
 80032a4:	2102      	movs	r1, #2
 80032a6:	f002 f97b 	bl	80055a0 <stm32_i2c_read>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <mpu_get_compass_reg+0x3a>
        return -1;
 80032b0:	f04f 33ff 	mov.w	r3, #4294967295
 80032b4:	e074      	b.n	80033a0 <mpu_get_compass_reg+0x124>
    tmp[8] = AKM_SINGLE_MEASUREMENT;
 80032b6:	2311      	movs	r3, #17
 80032b8:	753b      	strb	r3, [r7, #20]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
 80032ba:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <mpu_get_compass_reg+0x12c>)
 80032bc:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 80032c0:	f107 030c 	add.w	r3, r7, #12
 80032c4:	3308      	adds	r3, #8
 80032c6:	2201      	movs	r2, #1
 80032c8:	210a      	movs	r1, #10
 80032ca:	f002 f903 	bl	80054d4 <stm32_i2c_write>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <mpu_get_compass_reg+0x5e>
        return -1;
 80032d4:	f04f 33ff 	mov.w	r3, #4294967295
 80032d8:	e062      	b.n	80033a0 <mpu_get_compass_reg+0x124>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
 80032da:	7b3b      	ldrb	r3, [r7, #12]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d004      	beq.n	80032ee <mpu_get_compass_reg+0x72>
 80032e4:	7b3b      	ldrb	r3, [r7, #12]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <mpu_get_compass_reg+0x78>
        return -2;
 80032ee:	f06f 0301 	mvn.w	r3, #1
 80032f2:	e055      	b.n	80033a0 <mpu_get_compass_reg+0x124>
    if (tmp[7] & AKM_OVERFLOW)
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	b25b      	sxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	da02      	bge.n	8003302 <mpu_get_compass_reg+0x86>
        return -3;
 80032fc:	f06f 0302 	mvn.w	r3, #2
 8003300:	e04e      	b.n	80033a0 <mpu_get_compass_reg+0x124>
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
 8003302:	7bbb      	ldrb	r3, [r7, #14]
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	b21a      	sxth	r2, r3
 8003308:	7b7b      	ldrb	r3, [r7, #13]
 800330a:	b21b      	sxth	r3, r3
 800330c:	4313      	orrs	r3, r2
 800330e:	b21a      	sxth	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	801a      	strh	r2, [r3, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
 8003314:	7c3b      	ldrb	r3, [r7, #16]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	b219      	sxth	r1, r3
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	b21a      	sxth	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3302      	adds	r3, #2
 8003322:	430a      	orrs	r2, r1
 8003324:	b212      	sxth	r2, r2
 8003326:	801a      	strh	r2, [r3, #0]
    data[2] = (tmp[6] << 8) | tmp[5];
 8003328:	7cbb      	ldrb	r3, [r7, #18]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	b219      	sxth	r1, r3
 800332e:	7c7b      	ldrb	r3, [r7, #17]
 8003330:	b21a      	sxth	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3304      	adds	r3, #4
 8003336:	430a      	orrs	r2, r1
 8003338:	b212      	sxth	r2, r2
 800333a:	801a      	strh	r2, [r3, #0]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003342:	461a      	mov	r2, r3
 8003344:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <mpu_get_compass_reg+0x12c>)
 8003346:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800334a:	fb03 f302 	mul.w	r3, r3, r2
 800334e:	121b      	asrs	r3, r3, #8
 8003350:	b21a      	sxth	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	801a      	strh	r2, [r3, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3302      	adds	r3, #2
 800335a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800335e:	461a      	mov	r2, r3
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <mpu_get_compass_reg+0x12c>)
 8003362:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003366:	fb03 f302 	mul.w	r3, r3, r2
 800336a:	121a      	asrs	r2, r3, #8
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3302      	adds	r3, #2
 8003370:	b212      	sxth	r2, r2
 8003372:	801a      	strh	r2, [r3, #0]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3304      	adds	r3, #4
 8003378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800337c:	461a      	mov	r2, r3
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <mpu_get_compass_reg+0x12c>)
 8003380:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8003384:	fb03 f302 	mul.w	r3, r3, r2
 8003388:	121a      	asrs	r2, r3, #8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3304      	adds	r3, #4
 800338e:	b212      	sxth	r2, r2
 8003390:	801a      	strh	r2, [r3, #0]

    if (timestamp)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <mpu_get_compass_reg+0x122>
        get_ms(timestamp);
 8003398:	6838      	ldr	r0, [r7, #0]
 800339a:	f002 f876 	bl	800548a <stm32_get_clock_ms>
    return 0;
 800339e:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000000 	.word	0x20000000

080033ac <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 80033b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033b4:	23c8      	movs	r3, #200	; 0xc8
 80033b6:	4904      	ldr	r1, [pc, #16]	; (80033c8 <dmp_load_motion_driver_firmware+0x1c>)
 80033b8:	f640 30f6 	movw	r0, #3062	; 0xbf6
 80033bc:	f7ff fd4c 	bl	8002e58 <mpu_load_firmware>
 80033c0:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	0800d148 	.word	0x0800d148

080033cc <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 80033d6:	4a1f      	ldr	r2, [pc, #124]	; (8003454 <dmp_set_fifo_rate+0x88>)
 80033d8:	f107 0310 	add.w	r3, r7, #16
 80033dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80033de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	2bc8      	cmp	r3, #200	; 0xc8
 80033e6:	d902      	bls.n	80033ee <dmp_set_fifo_rate+0x22>
        return -1;
 80033e8:	f04f 33ff 	mov.w	r3, #4294967295
 80033ec:	e02e      	b.n	800344c <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	22c8      	movs	r2, #200	; 0xc8
 80033f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 80033fc:	8bfb      	ldrh	r3, [r7, #30]
 80033fe:	0a1b      	lsrs	r3, r3, #8
 8003400:	b29b      	uxth	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8003406:	8bfb      	ldrh	r3, [r7, #30]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 800340c:	f107 0308 	add.w	r3, r7, #8
 8003410:	461a      	mov	r2, r3
 8003412:	2102      	movs	r1, #2
 8003414:	f240 2016 	movw	r0, #534	; 0x216
 8003418:	f7ff fc7a 	bl	8002d10 <mpu_write_mem>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <dmp_set_fifo_rate+0x5c>
        return -1;
 8003422:	f04f 33ff 	mov.w	r3, #4294967295
 8003426:	e011      	b.n	800344c <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8003428:	f107 0310 	add.w	r3, r7, #16
 800342c:	461a      	mov	r2, r3
 800342e:	210c      	movs	r1, #12
 8003430:	f640 20c1 	movw	r0, #2753	; 0xac1
 8003434:	f7ff fc6c 	bl	8002d10 <mpu_write_mem>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <dmp_set_fifo_rate+0x78>
        return -1;
 800343e:	f04f 33ff 	mov.w	r3, #4294967295
 8003442:	e003      	b.n	800344c <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <dmp_set_fifo_rate+0x8c>)
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	8193      	strh	r3, [r2, #12]
    return 0;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3720      	adds	r7, #32
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	0800cda0 	.word	0x0800cda0
 8003458:	20000230 	.word	0x20000230

0800345c <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	460a      	mov	r2, r1
 8003466:	71fb      	strb	r3, [r7, #7]
 8003468:	4613      	mov	r3, r2
 800346a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <dmp_set_tap_thresh+0x22>
 8003476:	88bb      	ldrh	r3, [r7, #4]
 8003478:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800347c:	d902      	bls.n	8003484 <dmp_set_tap_thresh+0x28>
        return -1;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295
 8003482:	e107      	b.n	8003694 <dmp_set_tap_thresh+0x238>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8003484:	88bb      	ldrh	r3, [r7, #4]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd fc06 	bl	8000c98 <__aeabi_ui2f>
 800348c:	4603      	mov	r3, r0
 800348e:	4983      	ldr	r1, [pc, #524]	; (800369c <dmp_set_tap_thresh+0x240>)
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd fd0d 	bl	8000eb0 <__aeabi_fdiv>
 8003496:	4603      	mov	r3, r0
 8003498:	613b      	str	r3, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 800349a:	f107 030b 	add.w	r3, r7, #11
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fe ffb4 	bl	800240c <mpu_get_accel_fsr>
    switch (accel_fsr) {
 80034a4:	7afb      	ldrb	r3, [r7, #11]
 80034a6:	3b02      	subs	r3, #2
 80034a8:	2b0e      	cmp	r3, #14
 80034aa:	d879      	bhi.n	80035a0 <dmp_set_tap_thresh+0x144>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <dmp_set_tap_thresh+0x58>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034f1 	.word	0x080034f1
 80034b8:	080035a1 	.word	0x080035a1
 80034bc:	0800351d 	.word	0x0800351d
 80034c0:	080035a1 	.word	0x080035a1
 80034c4:	080035a1 	.word	0x080035a1
 80034c8:	080035a1 	.word	0x080035a1
 80034cc:	08003549 	.word	0x08003549
 80034d0:	080035a1 	.word	0x080035a1
 80034d4:	080035a1 	.word	0x080035a1
 80034d8:	080035a1 	.word	0x080035a1
 80034dc:	080035a1 	.word	0x080035a1
 80034e0:	080035a1 	.word	0x080035a1
 80034e4:	080035a1 	.word	0x080035a1
 80034e8:	080035a1 	.word	0x080035a1
 80034ec:	08003575 	.word	0x08003575
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 80034f0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80034f4:	6938      	ldr	r0, [r7, #16]
 80034f6:	f7fd fc27 	bl	8000d48 <__aeabi_fmul>
 80034fa:	4603      	mov	r3, r0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd fe0f 	bl	8001120 <__aeabi_f2uiz>
 8003502:	4603      	mov	r3, r0
 8003504:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8003506:	4966      	ldr	r1, [pc, #408]	; (80036a0 <dmp_set_tap_thresh+0x244>)
 8003508:	6938      	ldr	r0, [r7, #16]
 800350a:	f7fd fc1d 	bl	8000d48 <__aeabi_fmul>
 800350e:	4603      	mov	r3, r0
 8003510:	4618      	mov	r0, r3
 8003512:	f7fd fe05 	bl	8001120 <__aeabi_f2uiz>
 8003516:	4603      	mov	r3, r0
 8003518:	82bb      	strh	r3, [r7, #20]
        break;
 800351a:	e044      	b.n	80035a6 <dmp_set_tap_thresh+0x14a>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 800351c:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 8003520:	6938      	ldr	r0, [r7, #16]
 8003522:	f7fd fc11 	bl	8000d48 <__aeabi_fmul>
 8003526:	4603      	mov	r3, r0
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd fdf9 	bl	8001120 <__aeabi_f2uiz>
 800352e:	4603      	mov	r3, r0
 8003530:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8003532:	495c      	ldr	r1, [pc, #368]	; (80036a4 <dmp_set_tap_thresh+0x248>)
 8003534:	6938      	ldr	r0, [r7, #16]
 8003536:	f7fd fc07 	bl	8000d48 <__aeabi_fmul>
 800353a:	4603      	mov	r3, r0
 800353c:	4618      	mov	r0, r3
 800353e:	f7fd fdef 	bl	8001120 <__aeabi_f2uiz>
 8003542:	4603      	mov	r3, r0
 8003544:	82bb      	strh	r3, [r7, #20]
        break;
 8003546:	e02e      	b.n	80035a6 <dmp_set_tap_thresh+0x14a>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8003548:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800354c:	6938      	ldr	r0, [r7, #16]
 800354e:	f7fd fbfb 	bl	8000d48 <__aeabi_fmul>
 8003552:	4603      	mov	r3, r0
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd fde3 	bl	8001120 <__aeabi_f2uiz>
 800355a:	4603      	mov	r3, r0
 800355c:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 800355e:	4952      	ldr	r1, [pc, #328]	; (80036a8 <dmp_set_tap_thresh+0x24c>)
 8003560:	6938      	ldr	r0, [r7, #16]
 8003562:	f7fd fbf1 	bl	8000d48 <__aeabi_fmul>
 8003566:	4603      	mov	r3, r0
 8003568:	4618      	mov	r0, r3
 800356a:	f7fd fdd9 	bl	8001120 <__aeabi_f2uiz>
 800356e:	4603      	mov	r3, r0
 8003570:	82bb      	strh	r3, [r7, #20]
        break;
 8003572:	e018      	b.n	80035a6 <dmp_set_tap_thresh+0x14a>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8003574:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8003578:	6938      	ldr	r0, [r7, #16]
 800357a:	f7fd fbe5 	bl	8000d48 <__aeabi_fmul>
 800357e:	4603      	mov	r3, r0
 8003580:	4618      	mov	r0, r3
 8003582:	f7fd fdcd 	bl	8001120 <__aeabi_f2uiz>
 8003586:	4603      	mov	r3, r0
 8003588:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 800358a:	4948      	ldr	r1, [pc, #288]	; (80036ac <dmp_set_tap_thresh+0x250>)
 800358c:	6938      	ldr	r0, [r7, #16]
 800358e:	f7fd fbdb 	bl	8000d48 <__aeabi_fmul>
 8003592:	4603      	mov	r3, r0
 8003594:	4618      	mov	r0, r3
 8003596:	f7fd fdc3 	bl	8001120 <__aeabi_f2uiz>
 800359a:	4603      	mov	r3, r0
 800359c:	82bb      	strh	r3, [r7, #20]
        break;
 800359e:	e002      	b.n	80035a6 <dmp_set_tap_thresh+0x14a>
    default:
        return -1;
 80035a0:	f04f 33ff 	mov.w	r3, #4294967295
 80035a4:	e076      	b.n	8003694 <dmp_set_tap_thresh+0x238>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 80035a6:	8afb      	ldrh	r3, [r7, #22]
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 80035b0:	8afb      	ldrh	r3, [r7, #22]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 80035b6:	8abb      	ldrh	r3, [r7, #20]
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 80035c0:	8abb      	ldrh	r3, [r7, #20]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01c      	beq.n	800360a <dmp_set_tap_thresh+0x1ae>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 80035d0:	f107 030c 	add.w	r3, r7, #12
 80035d4:	461a      	mov	r2, r3
 80035d6:	2102      	movs	r1, #2
 80035d8:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 80035dc:	f7ff fb98 	bl	8002d10 <mpu_write_mem>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <dmp_set_tap_thresh+0x190>
            return -1;
 80035e6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ea:	e053      	b.n	8003694 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 80035ec:	f107 030c 	add.w	r3, r7, #12
 80035f0:	3302      	adds	r3, #2
 80035f2:	461a      	mov	r2, r3
 80035f4:	2102      	movs	r1, #2
 80035f6:	f44f 7092 	mov.w	r0, #292	; 0x124
 80035fa:	f7ff fb89 	bl	8002d10 <mpu_write_mem>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <dmp_set_tap_thresh+0x1ae>
            return -1;
 8003604:	f04f 33ff 	mov.w	r3, #4294967295
 8003608:	e044      	b.n	8003694 <dmp_set_tap_thresh+0x238>
    }
    if (axis & TAP_Y) {
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01c      	beq.n	800364e <dmp_set_tap_thresh+0x1f2>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8003614:	f107 030c 	add.w	r3, r7, #12
 8003618:	461a      	mov	r2, r3
 800361a:	2102      	movs	r1, #2
 800361c:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8003620:	f7ff fb76 	bl	8002d10 <mpu_write_mem>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <dmp_set_tap_thresh+0x1d4>
            return -1;
 800362a:	f04f 33ff 	mov.w	r3, #4294967295
 800362e:	e031      	b.n	8003694 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8003630:	f107 030c 	add.w	r3, r7, #12
 8003634:	3302      	adds	r3, #2
 8003636:	461a      	mov	r2, r3
 8003638:	2102      	movs	r1, #2
 800363a:	f44f 7094 	mov.w	r0, #296	; 0x128
 800363e:	f7ff fb67 	bl	8002d10 <mpu_write_mem>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <dmp_set_tap_thresh+0x1f2>
            return -1;
 8003648:	f04f 33ff 	mov.w	r3, #4294967295
 800364c:	e022      	b.n	8003694 <dmp_set_tap_thresh+0x238>
    }
    if (axis & TAP_Z) {
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01c      	beq.n	8003692 <dmp_set_tap_thresh+0x236>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8003658:	f107 030c 	add.w	r3, r7, #12
 800365c:	461a      	mov	r2, r3
 800365e:	2102      	movs	r1, #2
 8003660:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8003664:	f7ff fb54 	bl	8002d10 <mpu_write_mem>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <dmp_set_tap_thresh+0x218>
            return -1;
 800366e:	f04f 33ff 	mov.w	r3, #4294967295
 8003672:	e00f      	b.n	8003694 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8003674:	f107 030c 	add.w	r3, r7, #12
 8003678:	3302      	adds	r3, #2
 800367a:	461a      	mov	r2, r3
 800367c:	2102      	movs	r1, #2
 800367e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003682:	f7ff fb45 	bl	8002d10 <mpu_write_mem>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <dmp_set_tap_thresh+0x236>
            return -1;
 800368c:	f04f 33ff 	mov.w	r3, #4294967295
 8003690:	e000      	b.n	8003694 <dmp_set_tap_thresh+0x238>
    }
    return 0;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	43480000 	.word	0x43480000
 80036a0:	46400000 	.word	0x46400000
 80036a4:	45c00000 	.word	0x45c00000
 80036a8:	45400000 	.word	0x45400000
 80036ac:	44c00000 	.word	0x44c00000

080036b0 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d004      	beq.n	80036d2 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d004      	beq.n	80036e6 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	f043 030c 	orr.w	r3, r3, #12
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d004      	beq.n	80036fa <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	f043 0303 	orr.w	r3, r3, #3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 80036fa:	f107 030f 	add.w	r3, r7, #15
 80036fe:	461a      	mov	r2, r3
 8003700:	2101      	movs	r1, #1
 8003702:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8003706:	f7ff fb03 	bl	8002d10 <mpu_write_mem>
 800370a:	4603      	mov	r3, r0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <dmp_set_tap_count+0x16>
        min_taps = 1;
 8003724:	2301      	movs	r3, #1
 8003726:	71fb      	strb	r3, [r7, #7]
 8003728:	e004      	b.n	8003734 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d901      	bls.n	8003734 <dmp_set_tap_count+0x20>
        min_taps = 4;
 8003730:	2304      	movs	r3, #4
 8003732:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	3b01      	subs	r3, #1
 8003738:	b2db      	uxtb	r3, r3
 800373a:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 800373c:	f107 030f 	add.w	r3, r7, #15
 8003740:	461a      	mov	r2, r3
 8003742:	2101      	movs	r1, #1
 8003744:	f240 104f 	movw	r0, #335	; 0x14f
 8003748:	f7ff fae2 	bl	8002d10 <mpu_write_mem>
 800374c:	4603      	mov	r3, r0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <dmp_set_tap_time+0x40>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800376e:	89fb      	ldrh	r3, [r7, #14]
 8003770:	0a1b      	lsrs	r3, r3, #8
 8003772:	b29b      	uxth	r3, r3
 8003774:	b2db      	uxtb	r3, r3
 8003776:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003778:	89fb      	ldrh	r3, [r7, #14]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800377e:	f107 030c 	add.w	r3, r7, #12
 8003782:	461a      	mov	r2, r3
 8003784:	2102      	movs	r1, #2
 8003786:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 800378a:	f7ff fac1 	bl	8002d10 <mpu_write_mem>
 800378e:	4603      	mov	r3, r0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	cccccccd 	.word	0xcccccccd

0800379c <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	4a0c      	ldr	r2, [pc, #48]	; (80037dc <dmp_set_tap_time_multi+0x40>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	089b      	lsrs	r3, r3, #2
 80037b0:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 80037b2:	89fb      	ldrh	r3, [r7, #14]
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 80037bc:	89fb      	ldrh	r3, [r7, #14]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 80037c2:	f107 030c 	add.w	r3, r7, #12
 80037c6:	461a      	mov	r2, r3
 80037c8:	2102      	movs	r1, #2
 80037ca:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 80037ce:	f7ff fa9f 	bl	8002d10 <mpu_write_mem>
 80037d2:	4603      	mov	r3, r0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	cccccccd 	.word	0xcccccccd

080037e0 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a13      	ldr	r2, [pc, #76]	; (800383c <dmp_set_shake_reject_thresh+0x5c>)
 80037f0:	fb82 1203 	smull	r1, r2, r2, r3
 80037f4:	1192      	asrs	r2, r2, #6
 80037f6:	17db      	asrs	r3, r3, #31
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	887a      	ldrh	r2, [r7, #2]
 80037fc:	fb02 f303 	mul.w	r3, r2, r3
 8003800:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	161b      	asrs	r3, r3, #24
 8003806:	b2db      	uxtb	r3, r3
 8003808:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	141b      	asrs	r3, r3, #16
 800380e:	b2db      	uxtb	r3, r3
 8003810:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	121b      	asrs	r3, r3, #8
 8003816:	b2db      	uxtb	r3, r3
 8003818:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8003820:	f107 0308 	add.w	r3, r7, #8
 8003824:	461a      	mov	r2, r3
 8003826:	2104      	movs	r1, #4
 8003828:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 800382c:	f7ff fa70 	bl	8002d10 <mpu_write_mem>
 8003830:	4603      	mov	r3, r0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	10624dd3 	.word	0x10624dd3

08003840 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	4a0c      	ldr	r2, [pc, #48]	; (8003880 <dmp_set_shake_reject_time+0x40>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	089b      	lsrs	r3, r3, #2
 8003854:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	0a1b      	lsrs	r3, r3, #8
 800385a:	b29b      	uxth	r3, r3
 800385c:	b2db      	uxtb	r3, r3
 800385e:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 8003866:	f107 030c 	add.w	r3, r7, #12
 800386a:	461a      	mov	r2, r3
 800386c:	2102      	movs	r1, #2
 800386e:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 8003872:	f7ff fa4d 	bl	8002d10 <mpu_write_mem>
 8003876:	4603      	mov	r3, r0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	cccccccd 	.word	0xcccccccd

08003884 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	4a0c      	ldr	r2, [pc, #48]	; (80038c4 <dmp_set_shake_reject_timeout+0x40>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	b29b      	uxth	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 80038aa:	f107 030c 	add.w	r3, r7, #12
 80038ae:	461a      	mov	r2, r3
 80038b0:	2102      	movs	r1, #2
 80038b2:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80038b6:	f7ff fa2b 	bl	8002d10 <mpu_write_mem>
 80038ba:	4603      	mov	r3, r0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	cccccccd 	.word	0xcccccccd

080038c8 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 80038d2:	2302      	movs	r3, #2
 80038d4:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 80038d6:	23ca      	movs	r3, #202	; 0xca
 80038d8:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 80038da:	23e3      	movs	r3, #227	; 0xe3
 80038dc:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 80038de:	2309      	movs	r3, #9
 80038e0:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 80038e2:	f107 030c 	add.w	r3, r7, #12
 80038e6:	461a      	mov	r2, r3
 80038e8:	2104      	movs	r1, #4
 80038ea:	2068      	movs	r0, #104	; 0x68
 80038ec:	f7ff fa10 	bl	8002d10 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 80038f0:	23a3      	movs	r3, #163	; 0xa3
 80038f2:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80038f4:	88fb      	ldrh	r3, [r7, #6]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d006      	beq.n	800390c <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 80038fe:	23c0      	movs	r3, #192	; 0xc0
 8003900:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 8003902:	23c8      	movs	r3, #200	; 0xc8
 8003904:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 8003906:	23c2      	movs	r3, #194	; 0xc2
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	e005      	b.n	8003918 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 800390c:	23a3      	movs	r3, #163	; 0xa3
 800390e:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 8003910:	23a3      	movs	r3, #163	; 0xa3
 8003912:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 8003914:	23a3      	movs	r3, #163	; 0xa3
 8003916:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800391e:	2b00      	cmp	r3, #0
 8003920:	d006      	beq.n	8003930 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 8003922:	23c4      	movs	r3, #196	; 0xc4
 8003924:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 8003926:	23cc      	movs	r3, #204	; 0xcc
 8003928:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 800392a:	23c6      	movs	r3, #198	; 0xc6
 800392c:	74bb      	strb	r3, [r7, #18]
 800392e:	e005      	b.n	800393c <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 8003930:	23a3      	movs	r3, #163	; 0xa3
 8003932:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 8003934:	23a3      	movs	r3, #163	; 0xa3
 8003936:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 8003938:	23a3      	movs	r3, #163	; 0xa3
 800393a:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 800393c:	23a3      	movs	r3, #163	; 0xa3
 800393e:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8003940:	23a3      	movs	r3, #163	; 0xa3
 8003942:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 8003944:	23a3      	movs	r3, #163	; 0xa3
 8003946:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8003948:	f107 030c 	add.w	r3, r7, #12
 800394c:	461a      	mov	r2, r3
 800394e:	210a      	movs	r1, #10
 8003950:	f640 20a7 	movw	r0, #2727	; 0xaa7
 8003954:	f7ff f9dc 	bl	8002d10 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 8003962:	2320      	movs	r3, #32
 8003964:	733b      	strb	r3, [r7, #12]
 8003966:	e001      	b.n	800396c <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8003968:	23d8      	movs	r3, #216	; 0xd8
 800396a:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	461a      	mov	r2, r3
 8003972:	2101      	movs	r1, #1
 8003974:	f640 20b6 	movw	r0, #2742	; 0xab6
 8003978:	f7ff f9ca 	bl	8002d10 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 8003986:	2001      	movs	r0, #1
 8003988:	f000 f8c6 	bl	8003b18 <dmp_enable_gyro_cal>
 800398c:	e002      	b.n	8003994 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 800398e:	2000      	movs	r0, #0
 8003990:	f000 f8c2 	bl	8003b18 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800399a:	2b00      	cmp	r3, #0
 800399c:	d01d      	beq.n	80039da <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 800399e:	88fb      	ldrh	r3, [r7, #6]
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 80039a8:	23b2      	movs	r3, #178	; 0xb2
 80039aa:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 80039ac:	238b      	movs	r3, #139	; 0x8b
 80039ae:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 80039b0:	23b6      	movs	r3, #182	; 0xb6
 80039b2:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 80039b4:	239b      	movs	r3, #155	; 0x9b
 80039b6:	73fb      	strb	r3, [r7, #15]
 80039b8:	e007      	b.n	80039ca <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 80039ba:	23b0      	movs	r3, #176	; 0xb0
 80039bc:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 80039be:	2380      	movs	r3, #128	; 0x80
 80039c0:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 80039c2:	23b4      	movs	r3, #180	; 0xb4
 80039c4:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 80039c6:	2390      	movs	r3, #144	; 0x90
 80039c8:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 80039ca:	f107 030c 	add.w	r3, r7, #12
 80039ce:	461a      	mov	r2, r3
 80039d0:	2104      	movs	r1, #4
 80039d2:	f640 20a2 	movw	r0, #2722	; 0xaa2
 80039d6:	f7ff f99b 	bl	8002d10 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d025      	beq.n	8003a30 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 80039e4:	23f8      	movs	r3, #248	; 0xf8
 80039e6:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80039e8:	f107 030c 	add.w	r3, r7, #12
 80039ec:	461a      	mov	r2, r3
 80039ee:	2101      	movs	r1, #1
 80039f0:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 80039f4:	f7ff f98c 	bl	8002d10 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 80039f8:	21fa      	movs	r1, #250	; 0xfa
 80039fa:	2007      	movs	r0, #7
 80039fc:	f7ff fd2e 	bl	800345c <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8003a00:	2007      	movs	r0, #7
 8003a02:	f7ff fe55 	bl	80036b0 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 8003a06:	2001      	movs	r0, #1
 8003a08:	f7ff fe84 	bl	8003714 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8003a0c:	2064      	movs	r0, #100	; 0x64
 8003a0e:	f7ff fea3 	bl	8003758 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 8003a12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a16:	f7ff fec1 	bl	800379c <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8003a1a:	21c8      	movs	r1, #200	; 0xc8
 8003a1c:	483c      	ldr	r0, [pc, #240]	; (8003b10 <dmp_enable_feature+0x248>)
 8003a1e:	f7ff fedf 	bl	80037e0 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 8003a22:	2028      	movs	r0, #40	; 0x28
 8003a24:	f7ff ff0c 	bl	8003840 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 8003a28:	200a      	movs	r0, #10
 8003a2a:	f7ff ff2b 	bl	8003884 <dmp_set_shake_reject_timeout>
 8003a2e:	e009      	b.n	8003a44 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 8003a30:	23d8      	movs	r3, #216	; 0xd8
 8003a32:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8003a34:	f107 030c 	add.w	r3, r7, #12
 8003a38:	461a      	mov	r2, r3
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8003a40:	f7ff f966 	bl	8002d10 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 8003a44:	88fb      	ldrh	r3, [r7, #6]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 8003a4e:	23d9      	movs	r3, #217	; 0xd9
 8003a50:	733b      	strb	r3, [r7, #12]
 8003a52:	e001      	b.n	8003a58 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 8003a54:	23d8      	movs	r3, #216	; 0xd8
 8003a56:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8003a58:	f107 030c 	add.w	r3, r7, #12
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2101      	movs	r1, #1
 8003a60:	f240 703d 	movw	r0, #1853	; 0x73d
 8003a64:	f7ff f954 	bl	8002d10 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 8003a72:	2001      	movs	r0, #1
 8003a74:	f000 f880 	bl	8003b78 <dmp_enable_lp_quat>
 8003a78:	e002      	b.n	8003a80 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	f000 f87c 	bl	8003b78 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	f000 f89b 	bl	8003bc6 <dmp_enable_6x_lp_quat>
 8003a90:	e002      	b.n	8003a98 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 8003a92:	2000      	movs	r0, #0
 8003a94:	f000 f897 	bl	8003bc6 <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	f043 0308 	orr.w	r3, r3, #8
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <dmp_enable_feature+0x24c>)
 8003aa2:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8003aa4:	f7fe fb5a 	bl	800215c <mpu_reset_fifo>

    dmp.packet_length = 0;
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <dmp_enable_feature+0x24c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 8003ab8:	4b16      	ldr	r3, [pc, #88]	; (8003b14 <dmp_enable_feature+0x24c>)
 8003aba:	7b9b      	ldrb	r3, [r3, #14]
 8003abc:	3306      	adds	r3, #6
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <dmp_enable_feature+0x24c>)
 8003ac2:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <dmp_enable_feature+0x24c>)
 8003ad0:	7b9b      	ldrb	r3, [r3, #14]
 8003ad2:	3306      	adds	r3, #6
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <dmp_enable_feature+0x24c>)
 8003ad8:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	f003 0314 	and.w	r3, r3, #20
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <dmp_enable_feature+0x24c>)
 8003ae6:	7b9b      	ldrb	r3, [r3, #14]
 8003ae8:	3310      	adds	r3, #16
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <dmp_enable_feature+0x24c>)
 8003aee:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <dmp_enable_feature+0x24c>)
 8003afc:	7b9b      	ldrb	r3, [r3, #14]
 8003afe:	3304      	adds	r3, #4
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <dmp_enable_feature+0x24c>)
 8003b04:	739a      	strb	r2, [r3, #14]

    return 0;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	02cae309 	.word	0x02cae309
 8003b14:	20000230 	.word	0x20000230

08003b18 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00f      	beq.n	8003b48 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8003b28:	4a11      	ldr	r2, [pc, #68]	; (8003b70 <dmp_enable_gyro_cal+0x58>)
 8003b2a:	f107 0314 	add.w	r3, r7, #20
 8003b2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b30:	c303      	stmia	r3!, {r0, r1}
 8003b32:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	461a      	mov	r2, r3
 8003b3a:	2109      	movs	r1, #9
 8003b3c:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8003b40:	f7ff f8e6 	bl	8002d10 <mpu_write_mem>
 8003b44:	4603      	mov	r3, r0
 8003b46:	e00e      	b.n	8003b66 <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8003b48:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <dmp_enable_gyro_cal+0x5c>)
 8003b4a:	f107 0308 	add.w	r3, r7, #8
 8003b4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b50:	c303      	stmia	r3!, {r0, r1}
 8003b52:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8003b54:	f107 0308 	add.w	r3, r7, #8
 8003b58:	461a      	mov	r2, r3
 8003b5a:	2109      	movs	r1, #9
 8003b5c:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8003b60:	f7ff f8d6 	bl	8002d10 <mpu_write_mem>
 8003b64:	4603      	mov	r3, r0
    }
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	0800cdac 	.word	0x0800cdac
 8003b74:	0800cdb8 	.word	0x0800cdb8

08003b78 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 8003b88:	23c0      	movs	r3, #192	; 0xc0
 8003b8a:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8003b8c:	23c2      	movs	r3, #194	; 0xc2
 8003b8e:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8003b90:	23c4      	movs	r3, #196	; 0xc4
 8003b92:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8003b94:	23c6      	movs	r3, #198	; 0xc6
 8003b96:	73fb      	strb	r3, [r7, #15]
 8003b98:	e006      	b.n	8003ba8 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 8003b9a:	f107 030c 	add.w	r3, r7, #12
 8003b9e:	2204      	movs	r2, #4
 8003ba0:	218b      	movs	r1, #139	; 0x8b
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f007 f876 	bl	800ac94 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8003ba8:	f107 030c 	add.w	r3, r7, #12
 8003bac:	461a      	mov	r2, r3
 8003bae:	2104      	movs	r1, #4
 8003bb0:	f640 2098 	movw	r0, #2712	; 0xa98
 8003bb4:	f7ff f8ac 	bl	8002d10 <mpu_write_mem>

    return mpu_reset_fifo();
 8003bb8:	f7fe fad0 	bl	800215c <mpu_reset_fifo>
 8003bbc:	4603      	mov	r3, r0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b084      	sub	sp, #16
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	4603      	mov	r3, r0
 8003bce:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 8003bd6:	2320      	movs	r3, #32
 8003bd8:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 8003bda:	2328      	movs	r3, #40	; 0x28
 8003bdc:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 8003bde:	2330      	movs	r3, #48	; 0x30
 8003be0:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 8003be2:	2338      	movs	r3, #56	; 0x38
 8003be4:	73fb      	strb	r3, [r7, #15]
 8003be6:	e006      	b.n	8003bf6 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 8003be8:	f107 030c 	add.w	r3, r7, #12
 8003bec:	2204      	movs	r2, #4
 8003bee:	21a3      	movs	r1, #163	; 0xa3
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f007 f84f 	bl	800ac94 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 8003bf6:	f107 030c 	add.w	r3, r7, #12
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2104      	movs	r1, #4
 8003bfe:	f640 209e 	movw	r0, #2718	; 0xa9e
 8003c02:	f7ff f885 	bl	8002d10 <mpu_write_mem>

    return mpu_reset_fifo();
 8003c06:	f7fe faa9 	bl	800215c <mpu_reset_fifo>
 8003c0a:	4603      	mov	r3, r0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3303      	adds	r3, #3
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c26:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3303      	adds	r3, #3
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c32:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3301      	adds	r3, #1
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d012      	beq.n	8003c68 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 8003c42:	7bbb      	ldrb	r3, [r7, #14]
 8003c44:	08db      	lsrs	r3, r3, #3
 8003c46:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 8003c48:	7bbb      	ldrb	r3, [r7, #14]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	3301      	adds	r3, #1
 8003c52:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 8003c54:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <decode_gesture+0x84>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <decode_gesture+0x84>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	7b39      	ldrb	r1, [r7, #12]
 8003c62:	7b7a      	ldrb	r2, [r7, #13]
 8003c64:	4610      	mov	r0, r2
 8003c66:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 8003c76:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <decode_gesture+0x84>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d006      	beq.n	8003c8c <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <decode_gesture+0x84>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	7bfa      	ldrb	r2, [r7, #15]
 8003c84:	0992      	lsrs	r2, r2, #6
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4798      	blx	r3
    }

    return 0;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000230 	.word	0x20000230

08003c9c <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b092      	sub	sp, #72	; 0x48
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8003cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8003cb6:	4bb4      	ldr	r3, [pc, #720]	; (8003f88 <dmp_read_fifo+0x2ec>)
 8003cb8:	7b9b      	ldrb	r3, [r3, #14]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	f107 0120 	add.w	r1, r7, #32
 8003cc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe fe9c 	bl	8002a00 <mpu_read_fifo_stream>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <dmp_read_fifo+0x38>
        return -1;
 8003cce:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd2:	e154      	b.n	8003f7e <dmp_read_fifo+0x2e2>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8003cd4:	4bac      	ldr	r3, [pc, #688]	; (8003f88 <dmp_read_fifo+0x2ec>)
 8003cd6:	895b      	ldrh	r3, [r3, #10]
 8003cd8:	f003 0314 	and.w	r3, r3, #20
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 808a 	beq.w	8003df6 <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8003ce2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ce6:	061a      	lsls	r2, r3, #24
 8003ce8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8003cf0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003cf4:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8003cf6:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8003cf8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003cfc:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8003d02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d06:	061a      	lsls	r2, r3, #24
 8003d08:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8003d10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d14:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8003d16:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8003d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d1c:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8003d22:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8003d24:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8003d26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d2a:	061a      	lsls	r2, r3, #24
 8003d2c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8003d34:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003d38:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8003d3a:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8003d3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d40:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8003d46:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8003d48:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8003d4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003d4e:	061a      	lsls	r2, r3, #24
 8003d50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d54:	041b      	lsls	r3, r3, #16
 8003d56:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8003d58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d5c:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8003d5e:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8003d60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d64:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8003d6a:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8003d6c:	601a      	str	r2, [r3, #0]
        ii += 16;
 8003d6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d72:	3310      	adds	r3, #16
 8003d74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	141b      	asrs	r3, r3, #16
 8003d7e:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3304      	adds	r3, #4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	141b      	asrs	r3, r3, #16
 8003d88:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3308      	adds	r3, #8
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	141b      	asrs	r3, r3, #16
 8003d92:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	330c      	adds	r3, #12
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	141b      	asrs	r3, r3, #16
 8003d9c:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	fb02 f203 	mul.w	r2, r2, r3
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	6979      	ldr	r1, [r7, #20]
 8003daa:	fb01 f303 	mul.w	r3, r1, r3
 8003dae:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	69b9      	ldr	r1, [r7, #24]
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8003db8:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	69f9      	ldr	r1, [r7, #28]
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8003dc2:	4413      	add	r3, r2
 8003dc4:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8003dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003dcc:	db03      	blt.n	8003dd6 <dmp_read_fifo+0x13a>
 8003dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd0:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 8003dd4:	dd07      	ble.n	8003de6 <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8003dd6:	f7fe f9c1 	bl	800215c <mpu_reset_fifo>
            sensors[0] = 0;
 8003dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ddc:	2200      	movs	r2, #0
 8003dde:	801a      	strh	r2, [r3, #0]
            return -1;
 8003de0:	f04f 33ff 	mov.w	r3, #4294967295
 8003de4:	e0cb      	b.n	8003f7e <dmp_read_fifo+0x2e2>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8003de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df0:	b21a      	sxth	r2, r3
 8003df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df4:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8003df6:	4b64      	ldr	r3, [pc, #400]	; (8003f88 <dmp_read_fifo+0x2ec>)
 8003df8:	895b      	ldrh	r3, [r3, #10]
 8003dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d052      	beq.n	8003ea8 <dmp_read_fifo+0x20c>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8003e02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	b21a      	sxth	r2, r3
 8003e14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003e1e:	440b      	add	r3, r1
 8003e20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e24:	b21b      	sxth	r3, r3
 8003e26:	4313      	orrs	r3, r2
 8003e28:	b21a      	sxth	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8003e2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e32:	3302      	adds	r3, #2
 8003e34:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e38:	4413      	add	r3, r2
 8003e3a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	b219      	sxth	r1, r3
 8003e42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e46:	3303      	adds	r3, #3
 8003e48:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e52:	b21a      	sxth	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	3302      	adds	r3, #2
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	b212      	sxth	r2, r2
 8003e5c:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8003e5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e62:	3304      	adds	r3, #4
 8003e64:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e68:	4413      	add	r3, r2
 8003e6a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	b219      	sxth	r1, r3
 8003e72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e76:	3305      	adds	r3, #5
 8003e78:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e82:	b21a      	sxth	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	3304      	adds	r3, #4
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	b212      	sxth	r2, r2
 8003e8c:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8003e8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e92:	3306      	adds	r3, #6
 8003e94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8003e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e9e:	f043 0308 	orr.w	r3, r3, #8
 8003ea2:	b21a      	sxth	r2, r3
 8003ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea6:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8003ea8:	4b37      	ldr	r3, [pc, #220]	; (8003f88 <dmp_read_fifo+0x2ec>)
 8003eaa:	895b      	ldrh	r3, [r3, #10]
 8003eac:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d052      	beq.n	8003f5a <dmp_read_fifo+0x2be>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8003eb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003eb8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	b21a      	sxth	r2, r3
 8003ec6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003eca:	3301      	adds	r3, #1
 8003ecc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003ed0:	440b      	add	r3, r1
 8003ed2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ed6:	b21b      	sxth	r3, r3
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	b21a      	sxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8003ee0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003eea:	4413      	add	r3, r2
 8003eec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	b219      	sxth	r1, r3
 8003ef4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ef8:	3303      	adds	r3, #3
 8003efa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003efe:	4413      	add	r3, r2
 8003f00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f04:	b21a      	sxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	3302      	adds	r3, #2
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	b212      	sxth	r2, r2
 8003f0e:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8003f10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f14:	3304      	adds	r3, #4
 8003f16:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	b219      	sxth	r1, r3
 8003f24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f28:	3305      	adds	r3, #5
 8003f2a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f2e:	4413      	add	r3, r2
 8003f30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f34:	b21a      	sxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	b212      	sxth	r2, r2
 8003f3e:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8003f40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f44:	3306      	adds	r3, #6
 8003f46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 8003f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f50:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003f54:	b21a      	sxth	r2, r3
 8003f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f58:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <dmp_read_fifo+0x2ec>)
 8003f5c:	895b      	ldrh	r3, [r3, #10]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <dmp_read_fifo+0x2da>
        decode_gesture(fifo_data + ii);
 8003f66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f6a:	f107 0220 	add.w	r2, r7, #32
 8003f6e:	4413      	add	r3, r2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff fe4f 	bl	8003c14 <decode_gesture>

    get_ms(timestamp);
 8003f76:	6838      	ldr	r0, [r7, #0]
 8003f78:	f001 fa87 	bl	800548a <stm32_get_clock_ms>
    return 0;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3748      	adds	r7, #72	; 0x48
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000230 	.word	0x20000230

08003f8c <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Callback de recepción UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a33      	ldr	r2, [pc, #204]	; (8004068 <HAL_UART_RxCpltCallback+0xdc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d160      	bne.n	8004060 <HAL_UART_RxCpltCallback+0xd4>
    {
        static uint8_t receiving_command = 0;
        static uint8_t command_started = 0;

        if (rxData == 0x02) // STX
 8003f9e:	4b33      	ldr	r3, [pc, #204]	; (800406c <HAL_UART_RxCpltCallback+0xe0>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d106      	bne.n	8003fb4 <HAL_UART_RxCpltCallback+0x28>
        {
            command_index = 0;
 8003fa6:	4b32      	ldr	r3, [pc, #200]	; (8004070 <HAL_UART_RxCpltCallback+0xe4>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]
            command_started = 1;
 8003fac:	4b31      	ldr	r3, [pc, #196]	; (8004074 <HAL_UART_RxCpltCallback+0xe8>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
 8003fb2:	e050      	b.n	8004056 <HAL_UART_RxCpltCallback+0xca>
        }
        else if (rxData == 0x03 && command_started) // ETX
 8003fb4:	4b2d      	ldr	r3, [pc, #180]	; (800406c <HAL_UART_RxCpltCallback+0xe0>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d129      	bne.n	8004010 <HAL_UART_RxCpltCallback+0x84>
 8003fbc:	4b2d      	ldr	r3, [pc, #180]	; (8004074 <HAL_UART_RxCpltCallback+0xe8>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d025      	beq.n	8004010 <HAL_UART_RxCpltCallback+0x84>
        {
            command_buffer[command_index] = '\0'; // Terminar la cadena
 8003fc4:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <HAL_UART_RxCpltCallback+0xe4>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <HAL_UART_RxCpltCallback+0xec>)
 8003fce:	2100      	movs	r1, #0
 8003fd0:	5499      	strb	r1, [r3, r2]
            command_received = 1;
 8003fd2:	4b2a      	ldr	r3, [pc, #168]	; (800407c <HAL_UART_RxCpltCallback+0xf0>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]
            command_started = 0;
 8003fd8:	4b26      	ldr	r3, [pc, #152]	; (8004074 <HAL_UART_RxCpltCallback+0xe8>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]

            // Opcional: Echo del comando recibido para depuración
            HAL_UART_Transmit(&huart1, (uint8_t*)"Comando Recibido: ", 19, HAL_MAX_DELAY);
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe2:	2213      	movs	r2, #19
 8003fe4:	4926      	ldr	r1, [pc, #152]	; (8004080 <HAL_UART_RxCpltCallback+0xf4>)
 8003fe6:	4827      	ldr	r0, [pc, #156]	; (8004084 <HAL_UART_RxCpltCallback+0xf8>)
 8003fe8:	f004 fde7 	bl	8008bba <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart1, (uint8_t*)command_buffer, command_index, HAL_MAX_DELAY);
 8003fec:	4b20      	ldr	r3, [pc, #128]	; (8004070 <HAL_UART_RxCpltCallback+0xe4>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff8:	491f      	ldr	r1, [pc, #124]	; (8004078 <HAL_UART_RxCpltCallback+0xec>)
 8003ffa:	4822      	ldr	r0, [pc, #136]	; (8004084 <HAL_UART_RxCpltCallback+0xf8>)
 8003ffc:	f004 fddd 	bl	8008bba <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8004000:	f04f 33ff 	mov.w	r3, #4294967295
 8004004:	2202      	movs	r2, #2
 8004006:	4920      	ldr	r1, [pc, #128]	; (8004088 <HAL_UART_RxCpltCallback+0xfc>)
 8004008:	481e      	ldr	r0, [pc, #120]	; (8004084 <HAL_UART_RxCpltCallback+0xf8>)
 800400a:	f004 fdd6 	bl	8008bba <HAL_UART_Transmit>
 800400e:	e022      	b.n	8004056 <HAL_UART_RxCpltCallback+0xca>
        }
        else if (command_started)
 8004010:	4b18      	ldr	r3, [pc, #96]	; (8004074 <HAL_UART_RxCpltCallback+0xe8>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01e      	beq.n	8004056 <HAL_UART_RxCpltCallback+0xca>
        {
            if (command_index < UART_BUFFER_SIZE - 1)
 8004018:	4b15      	ldr	r3, [pc, #84]	; (8004070 <HAL_UART_RxCpltCallback+0xe4>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b3e      	cmp	r3, #62	; 0x3e
 8004020:	d80c      	bhi.n	800403c <HAL_UART_RxCpltCallback+0xb0>
            {
                command_buffer[command_index++] = rxData;
 8004022:	4b13      	ldr	r3, [pc, #76]	; (8004070 <HAL_UART_RxCpltCallback+0xe4>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	b2d1      	uxtb	r1, r2
 800402c:	4a10      	ldr	r2, [pc, #64]	; (8004070 <HAL_UART_RxCpltCallback+0xe4>)
 800402e:	7011      	strb	r1, [r2, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	4b0e      	ldr	r3, [pc, #56]	; (800406c <HAL_UART_RxCpltCallback+0xe0>)
 8004034:	7819      	ldrb	r1, [r3, #0]
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <HAL_UART_RxCpltCallback+0xec>)
 8004038:	5499      	strb	r1, [r3, r2]
 800403a:	e00c      	b.n	8004056 <HAL_UART_RxCpltCallback+0xca>
            }
            else
            {
                // Buffer overflow, resetear
                command_started = 0;
 800403c:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <HAL_UART_RxCpltCallback+0xe8>)
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
                command_index = 0;
 8004042:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_UART_RxCpltCallback+0xe4>)
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)"Error: Buffer Overflow\r\n", 23, HAL_MAX_DELAY);
 8004048:	f04f 33ff 	mov.w	r3, #4294967295
 800404c:	2217      	movs	r2, #23
 800404e:	490f      	ldr	r1, [pc, #60]	; (800408c <HAL_UART_RxCpltCallback+0x100>)
 8004050:	480c      	ldr	r0, [pc, #48]	; (8004084 <HAL_UART_RxCpltCallback+0xf8>)
 8004052:	f004 fdb2 	bl	8008bba <HAL_UART_Transmit>
            }
        }

        // Reiniciar la recepción
        HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8004056:	2201      	movs	r2, #1
 8004058:	4904      	ldr	r1, [pc, #16]	; (800406c <HAL_UART_RxCpltCallback+0xe0>)
 800405a:	480a      	ldr	r0, [pc, #40]	; (8004084 <HAL_UART_RxCpltCallback+0xf8>)
 800405c:	f004 fe38 	bl	8008cd0 <HAL_UART_Receive_IT>
    }
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40013800 	.word	0x40013800
 800406c:	20002b5c 	.word	0x20002b5c
 8004070:	2000028e 	.word	0x2000028e
 8004074:	2000028f 	.word	0x2000028f
 8004078:	20002d98 	.word	0x20002d98
 800407c:	2000028d 	.word	0x2000028d
 8004080:	0800ce3c 	.word	0x0800ce3c
 8004084:	20002c4c 	.word	0x20002c4c
 8004088:	0800ce50 	.word	0x0800ce50
 800408c:	0800ce54 	.word	0x0800ce54

08004090 <calculate_angle_error>:


float calculate_angle_error(float desired, float current) {
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
    float error = desired - current;
 800409a:	6839      	ldr	r1, [r7, #0]
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7fc fd49 	bl	8000b34 <__aeabi_fsub>
 80040a2:	4603      	mov	r3, r0
 80040a4:	60fb      	str	r3, [r7, #12]
    while (error > 180.0f) error -= 360.0f;
 80040a6:	e005      	b.n	80040b4 <calculate_angle_error+0x24>
 80040a8:	490f      	ldr	r1, [pc, #60]	; (80040e8 <calculate_angle_error+0x58>)
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f7fc fd42 	bl	8000b34 <__aeabi_fsub>
 80040b0:	4603      	mov	r3, r0
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	490d      	ldr	r1, [pc, #52]	; (80040ec <calculate_angle_error+0x5c>)
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f7fd f802 	bl	80010c0 <__aeabi_fcmpgt>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f2      	bne.n	80040a8 <calculate_angle_error+0x18>
    while (error < -180.0f) error += 360.0f;
 80040c2:	e005      	b.n	80040d0 <calculate_angle_error+0x40>
 80040c4:	4908      	ldr	r1, [pc, #32]	; (80040e8 <calculate_angle_error+0x58>)
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f7fc fd36 	bl	8000b38 <__addsf3>
 80040cc:	4603      	mov	r3, r0
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	4907      	ldr	r1, [pc, #28]	; (80040f0 <calculate_angle_error+0x60>)
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f7fc ffd6 	bl	8001084 <__aeabi_fcmplt>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f2      	bne.n	80040c4 <calculate_angle_error+0x34>
    return error;
 80040de:	68fb      	ldr	r3, [r7, #12]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	43b40000 	.word	0x43b40000
 80040ec:	43340000 	.word	0x43340000
 80040f0:	c3340000 	.word	0xc3340000

080040f4 <move_forward>:

void move_forward(int32_t encoder_target) {
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
    // Reiniciar el conteo del encoder
    posicion = 0;
 80040fc:	4b16      	ldr	r3, [pc, #88]	; (8004158 <move_forward+0x64>)
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]

    // Configurar la dirección del motor hacia adelante
    set_motor_direction(2); // Asumiendo que '2' es adelante
 8004102:	2002      	movs	r0, #2
 8004104:	f000 f8c4 	bl	8004290 <set_motor_direction>

    // Establecer una velocidad de avance
    set_speed(800); // Ajusta la velocidad según sea necesario
 8004108:	f44f 7048 	mov.w	r0, #800	; 0x320
 800410c:	f000 f8f8 	bl	8004300 <set_speed>

    // Esperar hasta que se alcance el conteo del encoder
    while (posicion < encoder_target) {
 8004110:	e002      	b.n	8004118 <move_forward+0x24>
        osDelay(10); // Verificar cada 10 ms
 8004112:	200a      	movs	r0, #10
 8004114:	f005 fbd6 	bl	80098c4 <osDelay>
    while (posicion < encoder_target) {
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <move_forward+0x64>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	429a      	cmp	r2, r3
 8004120:	dcf7      	bgt.n	8004112 <move_forward+0x1e>
    }

    // Detener el motor
    set_motor_direction(0);
 8004122:	2000      	movs	r0, #0
 8004124:	f000 f8b4 	bl	8004290 <set_motor_direction>
    set_speed(0);
 8004128:	2000      	movs	r0, #0
 800412a:	f000 f8e9 	bl	8004300 <set_speed>

    // Opcional: Enviar mensaje de depuración
    sprintf(square_msg, "Avanzó %ld pulsos\r\n", encoder_target);
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	490a      	ldr	r1, [pc, #40]	; (800415c <move_forward+0x68>)
 8004132:	480b      	ldr	r0, [pc, #44]	; (8004160 <move_forward+0x6c>)
 8004134:	f006 fdea 	bl	800ad0c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)square_msg, strlen(square_msg), HAL_MAX_DELAY);
 8004138:	4809      	ldr	r0, [pc, #36]	; (8004160 <move_forward+0x6c>)
 800413a:	f7fc f813 	bl	8000164 <strlen>
 800413e:	4603      	mov	r3, r0
 8004140:	b29a      	uxth	r2, r3
 8004142:	f04f 33ff 	mov.w	r3, #4294967295
 8004146:	4906      	ldr	r1, [pc, #24]	; (8004160 <move_forward+0x6c>)
 8004148:	4806      	ldr	r0, [pc, #24]	; (8004164 <move_forward+0x70>)
 800414a:	f004 fd36 	bl	8008bba <HAL_UART_Transmit>
}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	2000024c 	.word	0x2000024c
 800415c:	0800ce70 	.word	0x0800ce70
 8004160:	20002ce0 	.word	0x20002ce0
 8004164:	20002c4c 	.word	0x20002c4c

08004168 <turn_degrees>:

// Función para girar un ángulo específico utilizando el PID de dirección
// Función para girar un ángulo específico utilizando el PID de dirección
void turn_degrees(float angle)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
    // Guardar el heading inicial
    float initial_heading = heading_degree;
 8004170:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <turn_degrees+0x78>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60bb      	str	r3, [r7, #8]

    // Calcular el heading deseado
    float desired_heading_turn = angulo_deseado + angle;
 8004176:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <turn_degrees+0x7c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4619      	mov	r1, r3
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7fc fcdb 	bl	8000b38 <__addsf3>
 8004182:	4603      	mov	r3, r0
 8004184:	60fb      	str	r3, [r7, #12]
    angulo_deseado = desired_heading_turn;
 8004186:	4a17      	ldr	r2, [pc, #92]	; (80041e4 <turn_degrees+0x7c>)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6013      	str	r3, [r2, #0]

    // Normalizar el heading deseado entre 0 y 360 grados
    while (desired_heading_turn >= 360.0f) desired_heading_turn -= 360.0f;
 800418c:	e005      	b.n	800419a <turn_degrees+0x32>
 800418e:	4916      	ldr	r1, [pc, #88]	; (80041e8 <turn_degrees+0x80>)
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7fc fccf 	bl	8000b34 <__aeabi_fsub>
 8004196:	4603      	mov	r3, r0
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	4913      	ldr	r1, [pc, #76]	; (80041e8 <turn_degrees+0x80>)
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f7fc ff85 	bl	80010ac <__aeabi_fcmpge>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f2      	bne.n	800418e <turn_degrees+0x26>
    while (desired_heading_turn < 0.0f) desired_heading_turn += 360.0f;
 80041a8:	e005      	b.n	80041b6 <turn_degrees+0x4e>
 80041aa:	490f      	ldr	r1, [pc, #60]	; (80041e8 <turn_degrees+0x80>)
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7fc fcc3 	bl	8000b38 <__addsf3>
 80041b2:	4603      	mov	r3, r0
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	f04f 0100 	mov.w	r1, #0
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f7fc ff62 	bl	8001084 <__aeabi_fcmplt>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f1      	bne.n	80041aa <turn_degrees+0x42>

    // Establecer el heading deseado
    desired_heading = desired_heading_turn;
 80041c6:	4a09      	ldr	r2, [pc, #36]	; (80041ec <turn_degrees+0x84>)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6013      	str	r3, [r2, #0]



    // Detener el motor después del giro
    set_motor_direction(0);
 80041cc:	2000      	movs	r0, #0
 80041ce:	f000 f85f 	bl	8004290 <set_motor_direction>
    set_speed(0);
 80041d2:	2000      	movs	r0, #0
 80041d4:	f000 f894 	bl	8004300 <set_speed>

    // Opcional: Enviar mensaje de depuración
}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20000268 	.word	0x20000268
 80041e4:	20000274 	.word	0x20000274
 80041e8:	43b40000 	.word	0x43b40000
 80041ec:	20000250 	.word	0x20000250

080041f0 <I2C_Scan>:



// Función para escanear el bus I2C y detectar dispositivos
void I2C_Scan(I2C_HandleTypeDef *hi2c)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b090      	sub	sp, #64	; 0x40
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
    char msg[50];
    HAL_UART_Transmit(&huart1, (uint8_t*)"Scanning I2C bus...\r\n", 20, HAL_MAX_DELAY);
 80041f8:	f04f 33ff 	mov.w	r3, #4294967295
 80041fc:	2214      	movs	r2, #20
 80041fe:	491f      	ldr	r1, [pc, #124]	; (800427c <I2C_Scan+0x8c>)
 8004200:	481f      	ldr	r0, [pc, #124]	; (8004280 <I2C_Scan+0x90>)
 8004202:	f004 fcda 	bl	8008bba <HAL_UART_Transmit>
    for(uint16_t i=0; i<128; i++)
 8004206:	2300      	movs	r3, #0
 8004208:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800420a:	e029      	b.n	8004260 <I2C_Scan+0x70>
    {
        HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(hi2c, (uint16_t)(i<<1), 1, 10);
 800420c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	b299      	uxth	r1, r3
 8004212:	230a      	movs	r3, #10
 8004214:	2201      	movs	r2, #1
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f002 fd40 	bl	8006c9c <HAL_I2C_IsDeviceReady>
 800421c:	4603      	mov	r3, r0
 800421e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        if(result == HAL_OK)
 8004222:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004226:	2b00      	cmp	r3, #0
 8004228:	d117      	bne.n	800425a <I2C_Scan+0x6a>
        {
            i2cVar = i;
 800422a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800422c:	4a15      	ldr	r2, [pc, #84]	; (8004284 <I2C_Scan+0x94>)
 800422e:	6013      	str	r3, [r2, #0]
            sprintf(msg, "Device found at 0x%X\r\n", i);
 8004230:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004232:	f107 0308 	add.w	r3, r7, #8
 8004236:	4914      	ldr	r1, [pc, #80]	; (8004288 <I2C_Scan+0x98>)
 8004238:	4618      	mov	r0, r3
 800423a:	f006 fd67 	bl	800ad0c <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800423e:	f107 0308 	add.w	r3, r7, #8
 8004242:	4618      	mov	r0, r3
 8004244:	f7fb ff8e 	bl	8000164 <strlen>
 8004248:	4603      	mov	r3, r0
 800424a:	b29a      	uxth	r2, r3
 800424c:	f107 0108 	add.w	r1, r7, #8
 8004250:	f04f 33ff 	mov.w	r3, #4294967295
 8004254:	480a      	ldr	r0, [pc, #40]	; (8004280 <I2C_Scan+0x90>)
 8004256:	f004 fcb0 	bl	8008bba <HAL_UART_Transmit>
    for(uint16_t i=0; i<128; i++)
 800425a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800425c:	3301      	adds	r3, #1
 800425e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004260:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004262:	2b7f      	cmp	r3, #127	; 0x7f
 8004264:	d9d2      	bls.n	800420c <I2C_Scan+0x1c>
        }
    }
    HAL_UART_Transmit(&huart1, (uint8_t*)"I2C scan completed\r\n", 21, HAL_MAX_DELAY);
 8004266:	f04f 33ff 	mov.w	r3, #4294967295
 800426a:	2215      	movs	r2, #21
 800426c:	4907      	ldr	r1, [pc, #28]	; (800428c <I2C_Scan+0x9c>)
 800426e:	4804      	ldr	r0, [pc, #16]	; (8004280 <I2C_Scan+0x90>)
 8004270:	f004 fca3 	bl	8008bba <HAL_UART_Transmit>
}
 8004274:	bf00      	nop
 8004276:	3740      	adds	r7, #64	; 0x40
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	0800ce88 	.word	0x0800ce88
 8004280:	20002c4c 	.word	0x20002c4c
 8004284:	2000026c 	.word	0x2000026c
 8004288:	0800cea0 	.word	0x0800cea0
 800428c:	0800ceb8 	.word	0x0800ceb8

08004290 <set_motor_direction>:

// Configurar dirección del motor
void set_motor_direction(int direction)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
    switch (direction)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d013      	beq.n	80042c6 <set_motor_direction+0x36>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	dc26      	bgt.n	80042f2 <set_motor_direction+0x62>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d018      	beq.n	80042dc <set_motor_direction+0x4c>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d120      	bne.n	80042f2 <set_motor_direction+0x62>
    {
    case 1:  // Motor A encendido
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80042b0:	2201      	movs	r2, #1
 80042b2:	2140      	movs	r1, #64	; 0x40
 80042b4:	4811      	ldr	r0, [pc, #68]	; (80042fc <set_motor_direction+0x6c>)
 80042b6:	f002 f812 	bl	80062de <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80042ba:	2200      	movs	r2, #0
 80042bc:	2180      	movs	r1, #128	; 0x80
 80042be:	480f      	ldr	r0, [pc, #60]	; (80042fc <set_motor_direction+0x6c>)
 80042c0:	f002 f80d 	bl	80062de <HAL_GPIO_WritePin>
        break;
 80042c4:	e016      	b.n	80042f4 <set_motor_direction+0x64>
    case 2:  // Motor C encendido
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80042c6:	2200      	movs	r2, #0
 80042c8:	2140      	movs	r1, #64	; 0x40
 80042ca:	480c      	ldr	r0, [pc, #48]	; (80042fc <set_motor_direction+0x6c>)
 80042cc:	f002 f807 	bl	80062de <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80042d0:	2201      	movs	r2, #1
 80042d2:	2180      	movs	r1, #128	; 0x80
 80042d4:	4809      	ldr	r0, [pc, #36]	; (80042fc <set_motor_direction+0x6c>)
 80042d6:	f002 f802 	bl	80062de <HAL_GPIO_WritePin>
        break;
 80042da:	e00b      	b.n	80042f4 <set_motor_direction+0x64>
    case 0:  // Apagar ambos motores
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80042dc:	2200      	movs	r2, #0
 80042de:	2140      	movs	r1, #64	; 0x40
 80042e0:	4806      	ldr	r0, [pc, #24]	; (80042fc <set_motor_direction+0x6c>)
 80042e2:	f001 fffc 	bl	80062de <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80042e6:	2200      	movs	r2, #0
 80042e8:	2180      	movs	r1, #128	; 0x80
 80042ea:	4804      	ldr	r0, [pc, #16]	; (80042fc <set_motor_direction+0x6c>)
 80042ec:	f001 fff7 	bl	80062de <HAL_GPIO_WritePin>
        break;
 80042f0:	e000      	b.n	80042f4 <set_motor_direction+0x64>
    default:
        break;
 80042f2:	bf00      	nop
    }
}
 80042f4:	bf00      	nop
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40010c00 	.word	0x40010c00

08004300 <set_speed>:
}

// Establecer velocidad directamente
// Actualizar la velocidad en la función set_speed
void set_speed(int desired_speed)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
    if (desired_speed > SPEED_SCALE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800430e:	dd03      	ble.n	8004318 <set_speed+0x18>
        desired_speed = SPEED_SCALE;
 8004310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004314:	607b      	str	r3, [r7, #4]
 8004316:	e004      	b.n	8004322 <set_speed+0x22>
    else if (desired_speed < 0)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	da01      	bge.n	8004322 <set_speed+0x22>
        desired_speed = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	607b      	str	r3, [r7, #4]

    speed_scale = desired_speed;
 8004322:	4a1f      	ldr	r2, [pc, #124]	; (80043a0 <set_speed+0xa0>)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6013      	str	r3, [r2, #0]

    if (speed_scale == 0)
 8004328:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <set_speed+0xa0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d103      	bne.n	8004338 <set_speed+0x38>
    {
        velocidad = 0;
 8004330:	4b1c      	ldr	r3, [pc, #112]	; (80043a4 <set_speed+0xa4>)
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	e024      	b.n	8004382 <set_speed+0x82>
    }
    else
    {
        velocidad = VELOCIDAD_MIN + ((long)speed_scale * (VELOCIDAD_MAX - VELOCIDAD_MIN)) / SPEED_SCALE;
 8004338:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <set_speed+0xa0>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f24b 12df 	movw	r2, #45535	; 0xb1df
 8004340:	fb02 f303 	mul.w	r3, r2, r3
 8004344:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <set_speed+0xa8>)
 8004346:	fb82 1203 	smull	r1, r2, r2, r3
 800434a:	1192      	asrs	r2, r2, #6
 800434c:	17db      	asrs	r3, r3, #31
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8004354:	3320      	adds	r3, #32
 8004356:	4a13      	ldr	r2, [pc, #76]	; (80043a4 <set_speed+0xa4>)
 8004358:	6013      	str	r3, [r2, #0]

        if (velocidad > VELOCIDAD_MAX)
 800435a:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <set_speed+0xa4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004362:	db04      	blt.n	800436e <set_speed+0x6e>
            velocidad = VELOCIDAD_MAX;
 8004364:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <set_speed+0xa4>)
 8004366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	e009      	b.n	8004382 <set_speed+0x82>
        else if (velocidad < VELOCIDAD_MIN)
 800436e:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <set_speed+0xa4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004376:	4293      	cmp	r3, r2
 8004378:	dc03      	bgt.n	8004382 <set_speed+0x82>
            velocidad = VELOCIDAD_MIN;
 800437a:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <set_speed+0xa4>)
 800437c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004380:	601a      	str	r2, [r3, #0]
    }

    // Actualizar la velocidad actual
    velocidad_actual = velocidad;
 8004382:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <set_speed+0xa4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a09      	ldr	r2, [pc, #36]	; (80043ac <set_speed+0xac>)
 8004388:	6013      	str	r3, [r2, #0]

    // Actualizar el PWM del motor
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, velocidad);
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <set_speed+0xa4>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <set_speed+0xb0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20000248 	.word	0x20000248
 80043a4:	20000244 	.word	0x20000244
 80043a8:	10624dd3 	.word	0x10624dd3
 80043ac:	20000280 	.word	0x20000280
 80043b0:	20002c98 	.word	0x20002c98

080043b4 <update_servo_position>:
    }
}

// Actualizar posición del servo
void update_servo_position(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
    // 1. Limitar el desplazamiento angular al rango permitido (-80° a +80°)
    if (Grados > MAX_DELTA_ANGLE)
 80043ba:	4b31      	ldr	r3, [pc, #196]	; (8004480 <update_servo_position+0xcc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b50      	cmp	r3, #80	; 0x50
 80043c0:	dd03      	ble.n	80043ca <update_servo_position+0x16>
        Grados = MAX_DELTA_ANGLE;
 80043c2:	4b2f      	ldr	r3, [pc, #188]	; (8004480 <update_servo_position+0xcc>)
 80043c4:	2250      	movs	r2, #80	; 0x50
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	e008      	b.n	80043dc <update_servo_position+0x28>
    else if (Grados < -MAX_DELTA_ANGLE)
 80043ca:	4b2d      	ldr	r3, [pc, #180]	; (8004480 <update_servo_position+0xcc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f113 0f50 	cmn.w	r3, #80	; 0x50
 80043d2:	da03      	bge.n	80043dc <update_servo_position+0x28>
        Grados = -MAX_DELTA_ANGLE;
 80043d4:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <update_servo_position+0xcc>)
 80043d6:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 80043da:	601a      	str	r2, [r3, #0]

    // 2. Calcular el ángulo real del servo sumando el desplazamiento al ángulo central
    int servo_angle = ANGLE_CENTER + Grados;
 80043dc:	4b28      	ldr	r3, [pc, #160]	; (8004480 <update_servo_position+0xcc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3350      	adds	r3, #80	; 0x50
 80043e2:	603b      	str	r3, [r7, #0]

    // 3. Calcular el valor PWM objetivo usando la fórmula ajustada
    // La fórmula mapea el ángulo (0° a 180°) al rango PWM_MIN a PWM_MAX
    int pwm_target = PWM_MIN + ((servo_angle) * (PWM_MAX - PWM_MIN)) / 180;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	4a25      	ldr	r2, [pc, #148]	; (8004484 <update_servo_position+0xd0>)
 80043f0:	fb82 1203 	smull	r1, r2, r2, r3
 80043f4:	441a      	add	r2, r3
 80043f6:	11d2      	asrs	r2, r2, #7
 80043f8:	17db      	asrs	r3, r3, #31
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004400:	607b      	str	r3, [r7, #4]

    // 4. Asegurarse de que pwm_target esté dentro de los límites PWM_MIN y PWM_MAX
    if (pwm_target > PWM_MAX)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004408:	dd03      	ble.n	8004412 <update_servo_position+0x5e>
        pwm_target = PWM_MAX;
 800440a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800440e:	607b      	str	r3, [r7, #4]
 8004410:	e006      	b.n	8004420 <update_servo_position+0x6c>
    else if (pwm_target < PWM_MIN)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004418:	da02      	bge.n	8004420 <update_servo_position+0x6c>
        pwm_target = PWM_MIN;
 800441a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800441e:	607b      	str	r3, [r7, #4]

    // 5. Ajustar pwm_val hacia pwm_target en pasos definidos por PWM_STEP_SERVO para un movimiento suave
    if (pwm_val < pwm_target)
 8004420:	4b19      	ldr	r3, [pc, #100]	; (8004488 <update_servo_position+0xd4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	429a      	cmp	r2, r3
 8004428:	dd0d      	ble.n	8004446 <update_servo_position+0x92>
    {
        pwm_val += PWM_STEP_SERVO;
 800442a:	4b17      	ldr	r3, [pc, #92]	; (8004488 <update_servo_position+0xd4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3332      	adds	r3, #50	; 0x32
 8004430:	4a15      	ldr	r2, [pc, #84]	; (8004488 <update_servo_position+0xd4>)
 8004432:	6013      	str	r3, [r2, #0]
        if (pwm_val > pwm_target)
 8004434:	4b14      	ldr	r3, [pc, #80]	; (8004488 <update_servo_position+0xd4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	429a      	cmp	r2, r3
 800443c:	da15      	bge.n	800446a <update_servo_position+0xb6>
            pwm_val = pwm_target;
 800443e:	4a12      	ldr	r2, [pc, #72]	; (8004488 <update_servo_position+0xd4>)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	e011      	b.n	800446a <update_servo_position+0xb6>
    }
    else if (pwm_val > pwm_target)
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <update_servo_position+0xd4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	429a      	cmp	r2, r3
 800444e:	da0c      	bge.n	800446a <update_servo_position+0xb6>
    {
        pwm_val -= PWM_STEP_SERVO;
 8004450:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <update_servo_position+0xd4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3b32      	subs	r3, #50	; 0x32
 8004456:	4a0c      	ldr	r2, [pc, #48]	; (8004488 <update_servo_position+0xd4>)
 8004458:	6013      	str	r3, [r2, #0]
        if (pwm_val < pwm_target)
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <update_servo_position+0xd4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	429a      	cmp	r2, r3
 8004462:	dd02      	ble.n	800446a <update_servo_position+0xb6>
            pwm_val = pwm_target;
 8004464:	4a08      	ldr	r2, [pc, #32]	; (8004488 <update_servo_position+0xd4>)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6013      	str	r3, [r2, #0]
    }

    // 6. Actualizar PWM del servo
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_val);
 800446a:	4b07      	ldr	r3, [pc, #28]	; (8004488 <update_servo_position+0xd4>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b07      	ldr	r3, [pc, #28]	; (800448c <update_servo_position+0xd8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20000240 	.word	0x20000240
 8004484:	b60b60b7 	.word	0xb60b60b7
 8004488:	20000038 	.word	0x20000038
 800448c:	20002d4c 	.word	0x20002d4c

08004490 <HAL_GPIO_EXTI_Callback>:
    }
}

// Callback de interrupción GPIO
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == ChannelA_Pin)
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	2b08      	cmp	r3, #8
 800449e:	d111      	bne.n	80044c4 <HAL_GPIO_EXTI_Callback+0x34>
    {
        if (HAL_GPIO_ReadPin(ChannelB_GPIO_Port, ChannelB_Pin))
 80044a0:	2110      	movs	r1, #16
 80044a2:	4823      	ldr	r0, [pc, #140]	; (8004530 <HAL_GPIO_EXTI_Callback+0xa0>)
 80044a4:	f001 ff04 	bl	80062b0 <HAL_GPIO_ReadPin>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <HAL_GPIO_EXTI_Callback+0x2a>
            posicion--;
 80044ae:	4b21      	ldr	r3, [pc, #132]	; (8004534 <HAL_GPIO_EXTI_Callback+0xa4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	4a1f      	ldr	r2, [pc, #124]	; (8004534 <HAL_GPIO_EXTI_Callback+0xa4>)
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	e004      	b.n	80044c4 <HAL_GPIO_EXTI_Callback+0x34>
        else
            posicion++;
 80044ba:	4b1e      	ldr	r3, [pc, #120]	; (8004534 <HAL_GPIO_EXTI_Callback+0xa4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3301      	adds	r3, #1
 80044c0:	4a1c      	ldr	r2, [pc, #112]	; (8004534 <HAL_GPIO_EXTI_Callback+0xa4>)
 80044c2:	6013      	str	r3, [r2, #0]
    }

    // Calcular la distancia recorrida por este pulso
   float distance_per_pulse = 1.0f / PULSES_PER_CM; // cm por pulso
 80044c4:	4b1c      	ldr	r3, [pc, #112]	; (8004538 <HAL_GPIO_EXTI_Callback+0xa8>)
 80044c6:	60fb      	str	r3, [r7, #12]

   // Obtener el ángulo actual en radianes
   float angle_rad = heading_degree * (3.14159265359f / 180.0f);
 80044c8:	4b1c      	ldr	r3, [pc, #112]	; (800453c <HAL_GPIO_EXTI_Callback+0xac>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	491c      	ldr	r1, [pc, #112]	; (8004540 <HAL_GPIO_EXTI_Callback+0xb0>)
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fc fc3a 	bl	8000d48 <__aeabi_fmul>
 80044d4:	4603      	mov	r3, r0
 80044d6:	60bb      	str	r3, [r7, #8]

   // Actualizar las posiciones X e Y
   pos_x += distance_per_pulse * cosf(angle_rad);
 80044d8:	68b8      	ldr	r0, [r7, #8]
 80044da:	f007 f905 	bl	800b6e8 <cosf>
 80044de:	4603      	mov	r3, r0
 80044e0:	68f9      	ldr	r1, [r7, #12]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fc fc30 	bl	8000d48 <__aeabi_fmul>
 80044e8:	4603      	mov	r3, r0
 80044ea:	461a      	mov	r2, r3
 80044ec:	4b15      	ldr	r3, [pc, #84]	; (8004544 <HAL_GPIO_EXTI_Callback+0xb4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4619      	mov	r1, r3
 80044f2:	4610      	mov	r0, r2
 80044f4:	f7fc fb20 	bl	8000b38 <__addsf3>
 80044f8:	4603      	mov	r3, r0
 80044fa:	461a      	mov	r2, r3
 80044fc:	4b11      	ldr	r3, [pc, #68]	; (8004544 <HAL_GPIO_EXTI_Callback+0xb4>)
 80044fe:	601a      	str	r2, [r3, #0]
   pos_y += distance_per_pulse * sinf(angle_rad);
 8004500:	68b8      	ldr	r0, [r7, #8]
 8004502:	f007 f925 	bl	800b750 <sinf>
 8004506:	4603      	mov	r3, r0
 8004508:	68f9      	ldr	r1, [r7, #12]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fc fc1c 	bl	8000d48 <__aeabi_fmul>
 8004510:	4603      	mov	r3, r0
 8004512:	461a      	mov	r2, r3
 8004514:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <HAL_GPIO_EXTI_Callback+0xb8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4619      	mov	r1, r3
 800451a:	4610      	mov	r0, r2
 800451c:	f7fc fb0c 	bl	8000b38 <__addsf3>
 8004520:	4603      	mov	r3, r0
 8004522:	461a      	mov	r2, r3
 8004524:	4b08      	ldr	r3, [pc, #32]	; (8004548 <HAL_GPIO_EXTI_Callback+0xb8>)
 8004526:	601a      	str	r2, [r3, #0]

}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40010800 	.word	0x40010800
 8004534:	2000024c 	.word	0x2000024c
 8004538:	3eb6db6e 	.word	0x3eb6db6e
 800453c:	20000268 	.word	0x20000268
 8004540:	3c8efa35 	.word	0x3c8efa35
 8004544:	20000278 	.word	0x20000278
 8004548:	2000027c 	.word	0x2000027c

0800454c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800454c:	b5b0      	push	{r4, r5, r7, lr}
 800454e:	b0c4      	sub	sp, #272	; 0x110
 8004550:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004552:	f001 fae3 	bl	8005b1c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004556:	2003      	movs	r0, #3
 8004558:	f001 fc32 	bl	8005dc0 <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800455c:	f000 f96c 	bl	8004838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* No se realizaron cambios aquí */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004560:	f000 fb74 	bl	8004c4c <MX_GPIO_Init>
  MX_I2C2_Init();
 8004564:	f000 f9ae 	bl	80048c4 <MX_I2C2_Init>
  MX_TIM1_Init();
 8004568:	f000 f9da 	bl	8004920 <MX_TIM1_Init>
  MX_TIM2_Init();
 800456c:	f000 fa78 	bl	8004a60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004570:	f000 faec 	bl	8004b4c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004574:	f000 fb38 	bl	8004be8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  // Inicializar PWM para el servo
  pwm_val = PWM_MIN + (90 * (PWM_MAX - PWM_MIN) / 180);
 8004578:	4b95      	ldr	r3, [pc, #596]	; (80047d0 <main+0x284>)
 800457a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800457e:	601a      	str	r2, [r3, #0]

  // Inicializar sensores y módulos
  I2C_Scan(&hi2c2);
 8004580:	4894      	ldr	r0, [pc, #592]	; (80047d4 <main+0x288>)
 8004582:	f7ff fe35 	bl	80041f0 <I2C_Scan>
  MPU9250_DMP();
 8004586:	f7fc fdeb 	bl	8001160 <MPU9250_DMP>

  // Inicializar MPU9250 con reintentos
  int result = INV_ERROR; // Inicializamos con un valor de error
 800458a:	2320      	movs	r3, #32
 800458c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  int attempts = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  const int max_attempts = 5; // Máximo de 5 intentos
 8004596:	2305      	movs	r3, #5
 8004598:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

  while (result != INV_SUCCESS && attempts < max_attempts) {
 800459c:	e023      	b.n	80045e6 <main+0x9a>
      result = MPU9250_begin();
 800459e:	f7fc fdf9 	bl	8001194 <MPU9250_begin>
 80045a2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

      if (result != INV_SUCCESS) {
 80045a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d01b      	beq.n	80045e6 <main+0x9a>
          char error_msg[64];
          snprintf(error_msg, sizeof(error_msg), "MPU9250 attempt %d failed\r\n", attempts + 1);
 80045ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80045b2:	3301      	adds	r3, #1
 80045b4:	4638      	mov	r0, r7
 80045b6:	4a88      	ldr	r2, [pc, #544]	; (80047d8 <main+0x28c>)
 80045b8:	2140      	movs	r1, #64	; 0x40
 80045ba:	f006 fb73 	bl	800aca4 <sniprintf>
          HAL_UART_Transmit(&huart1, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 80045be:	463b      	mov	r3, r7
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fb fdcf 	bl	8000164 <strlen>
 80045c6:	4603      	mov	r3, r0
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	4639      	mov	r1, r7
 80045cc:	f04f 33ff 	mov.w	r3, #4294967295
 80045d0:	4882      	ldr	r0, [pc, #520]	; (80047dc <main+0x290>)
 80045d2:	f004 faf2 	bl	8008bba <HAL_UART_Transmit>
          HAL_Delay(200); // Retraso antes de reintentar
 80045d6:	20c8      	movs	r0, #200	; 0xc8
 80045d8:	f001 fb02 	bl	8005be0 <HAL_Delay>
          attempts++;
 80045dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80045e0:	3301      	adds	r3, #1
 80045e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  while (result != INV_SUCCESS && attempts < max_attempts) {
 80045e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <main+0xae>
 80045ee:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80045f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045f6:	429a      	cmp	r2, r3
 80045f8:	dbd1      	blt.n	800459e <main+0x52>
      }
  }

  if (result != INV_SUCCESS) {
 80045fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <main+0xca>
      HAL_UART_Transmit(&huart1, (uint8_t*)"MPU9250 failed after max attempts\r\n", 35, HAL_MAX_DELAY);
 8004602:	f04f 33ff 	mov.w	r3, #4294967295
 8004606:	2223      	movs	r2, #35	; 0x23
 8004608:	4975      	ldr	r1, [pc, #468]	; (80047e0 <main+0x294>)
 800460a:	4874      	ldr	r0, [pc, #464]	; (80047dc <main+0x290>)
 800460c:	f004 fad5 	bl	8008bba <HAL_UART_Transmit>
      Error_Handler(); // Manejar el error (reiniciar o notificar)
 8004610:	f000 ff36 	bl	8005480 <Error_Handler>
 8004614:	e006      	b.n	8004624 <main+0xd8>
  } else {
      HAL_UART_Transmit(&huart1, (uint8_t*)"MPU9250 initialized successfully\r\n", 35, HAL_MAX_DELAY);
 8004616:	f04f 33ff 	mov.w	r3, #4294967295
 800461a:	2223      	movs	r2, #35	; 0x23
 800461c:	4971      	ldr	r1, [pc, #452]	; (80047e4 <main+0x298>)
 800461e:	486f      	ldr	r0, [pc, #444]	; (80047dc <main+0x290>)
 8004620:	f004 facb 	bl	8008bba <HAL_UART_Transmit>
  }

  result = MPU9250_setSensors(INV_XYZ_COMPASS | INV_XYZ_GYRO | INV_XYZ_ACCEL);
 8004624:	2079      	movs	r0, #121	; 0x79
 8004626:	f7fc fe23 	bl	8001270 <MPU9250_setSensors>
 800462a:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  if (result != INV_SUCCESS) {
 800462e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <main+0xfc>
      // Manejar error
      HAL_UART_Transmit(&huart1, (uint8_t*)"MPU9250_setSensors failed\r\n", 27, HAL_MAX_DELAY);
 8004636:	f04f 33ff 	mov.w	r3, #4294967295
 800463a:	221b      	movs	r2, #27
 800463c:	496a      	ldr	r1, [pc, #424]	; (80047e8 <main+0x29c>)
 800463e:	4867      	ldr	r0, [pc, #412]	; (80047dc <main+0x290>)
 8004640:	f004 fabb 	bl	8008bba <HAL_UART_Transmit>
      Error_Handler();
 8004644:	f000 ff1c 	bl	8005480 <Error_Handler>
  }

  result = MPU9250_dmpBegin(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL, 10);
 8004648:	210a      	movs	r1, #10
 800464a:	2070      	movs	r0, #112	; 0x70
 800464c:	f7fc fefc 	bl	8001448 <MPU9250_dmpBegin>
 8004650:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  if (result != INV_SUCCESS) {
 8004654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <main+0x122>
      // Manejar error
      HAL_UART_Transmit(&huart1, (uint8_t*)"MPU9250_dmpBegin failed\r\n", 25, HAL_MAX_DELAY);
 800465c:	f04f 33ff 	mov.w	r3, #4294967295
 8004660:	2219      	movs	r2, #25
 8004662:	4962      	ldr	r1, [pc, #392]	; (80047ec <main+0x2a0>)
 8004664:	485d      	ldr	r0, [pc, #372]	; (80047dc <main+0x290>)
 8004666:	f004 faa8 	bl	8008bba <HAL_UART_Transmit>
      Error_Handler();
 800466a:	f000 ff09 	bl	8005480 <Error_Handler>
  }

  if (HAL_UART_Receive_IT(&huart1, &rxData, 1) != HAL_OK)
 800466e:	2201      	movs	r2, #1
 8004670:	495f      	ldr	r1, [pc, #380]	; (80047f0 <main+0x2a4>)
 8004672:	485a      	ldr	r0, [pc, #360]	; (80047dc <main+0x290>)
 8004674:	f004 fb2c 	bl	8008cd0 <HAL_UART_Receive_IT>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <main+0x144>
  {
      HAL_UART_Transmit(&huart1, (uint8_t*)"HAL UART IT failed\r\n", 25, HAL_MAX_DELAY);
 800467e:	f04f 33ff 	mov.w	r3, #4294967295
 8004682:	2219      	movs	r2, #25
 8004684:	495b      	ldr	r1, [pc, #364]	; (80047f4 <main+0x2a8>)
 8004686:	4855      	ldr	r0, [pc, #340]	; (80047dc <main+0x290>)
 8004688:	f004 fa97 	bl	8008bba <HAL_UART_Transmit>
      Error_Handler();
 800468c:	f000 fef8 	bl	8005480 <Error_Handler>
  }


  // Inicializar sensor ultrasónico
  ultrasonic_init();
 8004690:	f001 f994 	bl	80059bc <ultrasonic_init>

  // Habilitar interrupciones UART
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8004694:	2201      	movs	r2, #1
 8004696:	4956      	ldr	r1, [pc, #344]	; (80047f0 <main+0x2a4>)
 8004698:	4850      	ldr	r0, [pc, #320]	; (80047dc <main+0x290>)
 800469a:	f004 fb19 	bl	8008cd0 <HAL_UART_Receive_IT>

  // Iniciar PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Motor
 800469e:	2100      	movs	r1, #0
 80046a0:	4855      	ldr	r0, [pc, #340]	; (80047f8 <main+0x2ac>)
 80046a2:	f003 fcaf 	bl	8008004 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);  // Servo
 80046a6:	2104      	movs	r1, #4
 80046a8:	4854      	ldr	r0, [pc, #336]	; (80047fc <main+0x2b0>)
 80046aa:	f003 fcab 	bl	8008004 <HAL_TIM_PWM_Start>

  // Establecer el valor inicial del PWM del servo
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_val);
 80046ae:	4b48      	ldr	r3, [pc, #288]	; (80047d0 <main+0x284>)
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4b52      	ldr	r3, [pc, #328]	; (80047fc <main+0x2b0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	639a      	str	r2, [r3, #56]	; 0x38

  HAL_Delay(25000); // Esperar 20 segundos antes de iniciar las tareas
 80046b8:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80046bc:	f001 fa90 	bl	8005be0 <HAL_Delay>
  /* No se añadieron colas */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of UART_Task */
  osThreadDef(UART_Task, StartUartTask, osPriorityNormal, 0, 128);
 80046c0:	4b4f      	ldr	r3, [pc, #316]	; (8004800 <main+0x2b4>)
 80046c2:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 80046c6:	461d      	mov	r5, r3
 80046c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80046d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_TaskHandle = osThreadCreate(osThread(UART_Task), NULL);
 80046d4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80046d8:	2100      	movs	r1, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f005 f8a6 	bl	800982c <osThreadCreate>
 80046e0:	4603      	mov	r3, r0
 80046e2:	4a48      	ldr	r2, [pc, #288]	; (8004804 <main+0x2b8>)
 80046e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Servo_Task */
  osThreadDef(Servo_Task, StartServoTask, osPriorityHigh, 0, 128);
 80046e6:	4b48      	ldr	r3, [pc, #288]	; (8004808 <main+0x2bc>)
 80046e8:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 80046ec:	461d      	mov	r5, r3
 80046ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80046f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Servo_TaskHandle = osThreadCreate(osThread(Servo_Task), NULL);
 80046fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80046fe:	2100      	movs	r1, #0
 8004700:	4618      	mov	r0, r3
 8004702:	f005 f893 	bl	800982c <osThreadCreate>
 8004706:	4603      	mov	r3, r0
 8004708:	4a40      	ldr	r2, [pc, #256]	; (800480c <main+0x2c0>)
 800470a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Motor_Task */
  osThreadDef(Motor_Task, StartMotorTask, osPriorityNormal, 0, 128);
 800470c:	4b40      	ldr	r3, [pc, #256]	; (8004810 <main+0x2c4>)
 800470e:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8004712:	461d      	mov	r5, r3
 8004714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004718:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800471c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Motor_TaskHandle = osThreadCreate(osThread(Motor_Task), NULL);
 8004720:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f005 f880 	bl	800982c <osThreadCreate>
 800472c:	4603      	mov	r3, r0
 800472e:	4a39      	ldr	r2, [pc, #228]	; (8004814 <main+0x2c8>)
 8004730:	6013      	str	r3, [r2, #0]

  /* definition and creation of Ultrasonic_Task */
  osThreadDef(Ultrasonic_Task, StartUltrasonicoTask, osPriorityIdle, 0, 64);
 8004732:	4b39      	ldr	r3, [pc, #228]	; (8004818 <main+0x2cc>)
 8004734:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8004738:	461d      	mov	r5, r3
 800473a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800473c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800473e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004742:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Ultrasonic_TaskHandle = osThreadCreate(osThread(Ultrasonic_Task), NULL);
 8004746:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800474a:	2100      	movs	r1, #0
 800474c:	4618      	mov	r0, r3
 800474e:	f005 f86d 	bl	800982c <osThreadCreate>
 8004752:	4603      	mov	r3, r0
 8004754:	4a31      	ldr	r2, [pc, #196]	; (800481c <main+0x2d0>)
 8004756:	6013      	str	r3, [r2, #0]

  /* definition and creation of Encoder_Task */
  osThreadDef(Encoder_Task, StartEncoderTask, osPriorityLow, 0, 256);
 8004758:	4b31      	ldr	r3, [pc, #196]	; (8004820 <main+0x2d4>)
 800475a:	f107 0478 	add.w	r4, r7, #120	; 0x78
 800475e:	461d      	mov	r5, r3
 8004760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004764:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004768:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Encoder_TaskHandle = osThreadCreate(osThread(Encoder_Task), NULL);
 800476c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004770:	2100      	movs	r1, #0
 8004772:	4618      	mov	r0, r3
 8004774:	f005 f85a 	bl	800982c <osThreadCreate>
 8004778:	4603      	mov	r3, r0
 800477a:	4a2a      	ldr	r2, [pc, #168]	; (8004824 <main+0x2d8>)
 800477c:	6013      	str	r3, [r2, #0]

  /* definition and creation of MPU_Task */
  osThreadDef(MPU_Task, StartMPU9250Task, osPriorityHigh, 0, 256);
 800477e:	4b2a      	ldr	r3, [pc, #168]	; (8004828 <main+0x2dc>)
 8004780:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8004784:	461d      	mov	r5, r3
 8004786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800478a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800478e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MPU_TaskHandle = osThreadCreate(osThread(MPU_Task), NULL);
 8004792:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004796:	2100      	movs	r1, #0
 8004798:	4618      	mov	r0, r3
 800479a:	f005 f847 	bl	800982c <osThreadCreate>
 800479e:	4603      	mov	r3, r0
 80047a0:	4a22      	ldr	r2, [pc, #136]	; (800482c <main+0x2e0>)
 80047a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Bluetooth_Task */
  osThreadDef(Bluetooth_Task, StartBluetoothTask, osPriorityNormal, 0, 256);
 80047a4:	4b22      	ldr	r3, [pc, #136]	; (8004830 <main+0x2e4>)
 80047a6:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80047aa:	461d      	mov	r5, r3
 80047ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80047b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Bluetooth_TaskHandle = osThreadCreate(osThread(Bluetooth_Task), NULL);
 80047b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f005 f834 	bl	800982c <osThreadCreate>
 80047c4:	4603      	mov	r3, r0
 80047c6:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <main+0x2e8>)
 80047c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* No se añadieron más threads */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80047ca:	f005 f828 	bl	800981e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80047ce:	e7fe      	b.n	80047ce <main+0x282>
 80047d0:	20000038 	.word	0x20000038
 80047d4:	20002b70 	.word	0x20002b70
 80047d8:	0800ced0 	.word	0x0800ced0
 80047dc:	20002c4c 	.word	0x20002c4c
 80047e0:	0800ceec 	.word	0x0800ceec
 80047e4:	0800cf10 	.word	0x0800cf10
 80047e8:	0800cf34 	.word	0x0800cf34
 80047ec:	0800cf50 	.word	0x0800cf50
 80047f0:	20002b5c 	.word	0x20002b5c
 80047f4:	0800cf6c 	.word	0x0800cf6c
 80047f8:	20002c98 	.word	0x20002c98
 80047fc:	20002d4c 	.word	0x20002d4c
 8004800:	0800cf84 	.word	0x0800cf84
 8004804:	20002c44 	.word	0x20002c44
 8004808:	0800cfa0 	.word	0x0800cfa0
 800480c:	20002b64 	.word	0x20002b64
 8004810:	0800cfbc 	.word	0x0800cfbc
 8004814:	20002d94 	.word	0x20002d94
 8004818:	0800cfd8 	.word	0x0800cfd8
 800481c:	20002bc4 	.word	0x20002bc4
 8004820:	0800cff4 	.word	0x0800cff4
 8004824:	20002d44 	.word	0x20002d44
 8004828:	0800d010 	.word	0x0800d010
 800482c:	20002b60 	.word	0x20002b60
 8004830:	0800d02c 	.word	0x0800d02c
 8004834:	20002c94 	.word	0x20002c94

08004838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b090      	sub	sp, #64	; 0x40
 800483c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800483e:	f107 0318 	add.w	r3, r7, #24
 8004842:	2228      	movs	r2, #40	; 0x28
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f006 fa24 	bl	800ac94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800484c:	1d3b      	adds	r3, r7, #4
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	605a      	str	r2, [r3, #4]
 8004854:	609a      	str	r2, [r3, #8]
 8004856:	60da      	str	r2, [r3, #12]
 8004858:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800485a:	2301      	movs	r3, #1
 800485c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800485e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004862:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004864:	2300      	movs	r3, #0
 8004866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004868:	2301      	movs	r3, #1
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800486c:	2302      	movs	r3, #2
 800486e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004874:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004876:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800487a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800487c:	f107 0318 	add.w	r3, r7, #24
 8004880:	4618      	mov	r0, r3
 8004882:	f002 febf 	bl	8007604 <HAL_RCC_OscConfig>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800488c:	f000 fdf8 	bl	8005480 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004890:	230f      	movs	r3, #15
 8004892:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004894:	2302      	movs	r3, #2
 8004896:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800489c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80048a6:	1d3b      	adds	r3, r7, #4
 80048a8:	2102      	movs	r1, #2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f003 f92a 	bl	8007b04 <HAL_RCC_ClockConfig>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80048b6:	f000 fde3 	bl	8005480 <Error_Handler>
  }
}
 80048ba:	bf00      	nop
 80048bc:	3740      	adds	r7, #64	; 0x40
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80048c8:	4b12      	ldr	r3, [pc, #72]	; (8004914 <MX_I2C2_Init+0x50>)
 80048ca:	4a13      	ldr	r2, [pc, #76]	; (8004918 <MX_I2C2_Init+0x54>)
 80048cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80048ce:	4b11      	ldr	r3, [pc, #68]	; (8004914 <MX_I2C2_Init+0x50>)
 80048d0:	4a12      	ldr	r2, [pc, #72]	; (800491c <MX_I2C2_Init+0x58>)
 80048d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80048d4:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <MX_I2C2_Init+0x50>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80048da:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <MX_I2C2_Init+0x50>)
 80048dc:	2200      	movs	r2, #0
 80048de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048e0:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <MX_I2C2_Init+0x50>)
 80048e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80048e8:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <MX_I2C2_Init+0x50>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80048ee:	4b09      	ldr	r3, [pc, #36]	; (8004914 <MX_I2C2_Init+0x50>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <MX_I2C2_Init+0x50>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80048fa:	4b06      	ldr	r3, [pc, #24]	; (8004914 <MX_I2C2_Init+0x50>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004900:	4804      	ldr	r0, [pc, #16]	; (8004914 <MX_I2C2_Init+0x50>)
 8004902:	f001 fd1d 	bl	8006340 <HAL_I2C_Init>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800490c:	f000 fdb8 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004910:	bf00      	nop
 8004912:	bd80      	pop	{r7, pc}
 8004914:	20002b70 	.word	0x20002b70
 8004918:	40005800 	.word	0x40005800
 800491c:	000186a0 	.word	0x000186a0

08004920 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b096      	sub	sp, #88	; 0x58
 8004924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_Init 0 */


  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004926:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	605a      	str	r2, [r3, #4]
 8004930:	609a      	str	r2, [r3, #8]
 8004932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800493e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	605a      	str	r2, [r3, #4]
 8004948:	609a      	str	r2, [r3, #8]
 800494a:	60da      	str	r2, [r3, #12]
 800494c:	611a      	str	r2, [r3, #16]
 800494e:	615a      	str	r2, [r3, #20]
 8004950:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004952:	1d3b      	adds	r3, r7, #4
 8004954:	2220      	movs	r2, #32
 8004956:	2100      	movs	r1, #0
 8004958:	4618      	mov	r0, r3
 800495a:	f006 f99b 	bl	800ac94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800495e:	4b3e      	ldr	r3, [pc, #248]	; (8004a58 <MX_TIM1_Init+0x138>)
 8004960:	4a3e      	ldr	r2, [pc, #248]	; (8004a5c <MX_TIM1_Init+0x13c>)
 8004962:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004964:	4b3c      	ldr	r3, [pc, #240]	; (8004a58 <MX_TIM1_Init+0x138>)
 8004966:	2200      	movs	r2, #0
 8004968:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800496a:	4b3b      	ldr	r3, [pc, #236]	; (8004a58 <MX_TIM1_Init+0x138>)
 800496c:	2200      	movs	r2, #0
 800496e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004970:	4b39      	ldr	r3, [pc, #228]	; (8004a58 <MX_TIM1_Init+0x138>)
 8004972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004976:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004978:	4b37      	ldr	r3, [pc, #220]	; (8004a58 <MX_TIM1_Init+0x138>)
 800497a:	2200      	movs	r2, #0
 800497c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800497e:	4b36      	ldr	r3, [pc, #216]	; (8004a58 <MX_TIM1_Init+0x138>)
 8004980:	2200      	movs	r2, #0
 8004982:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004984:	4b34      	ldr	r3, [pc, #208]	; (8004a58 <MX_TIM1_Init+0x138>)
 8004986:	2200      	movs	r2, #0
 8004988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800498a:	4833      	ldr	r0, [pc, #204]	; (8004a58 <MX_TIM1_Init+0x138>)
 800498c:	f003 fa48 	bl	8007e20 <HAL_TIM_Base_Init>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004996:	f000 fd73 	bl	8005480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800499a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800499e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80049a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049a4:	4619      	mov	r1, r3
 80049a6:	482c      	ldr	r0, [pc, #176]	; (8004a58 <MX_TIM1_Init+0x138>)
 80049a8:	f003 fc90 	bl	80082cc <HAL_TIM_ConfigClockSource>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80049b2:	f000 fd65 	bl	8005480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80049b6:	4828      	ldr	r0, [pc, #160]	; (8004a58 <MX_TIM1_Init+0x138>)
 80049b8:	f003 facc 	bl	8007f54 <HAL_TIM_PWM_Init>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80049c2:	f000 fd5d 	bl	8005480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049c6:	2300      	movs	r3, #0
 80049c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049ca:	2300      	movs	r3, #0
 80049cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80049ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80049d2:	4619      	mov	r1, r3
 80049d4:	4820      	ldr	r0, [pc, #128]	; (8004a58 <MX_TIM1_Init+0x138>)
 80049d6:	f003 fff1 	bl	80089bc <HAL_TIMEx_MasterConfigSynchronization>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80049e0:	f000 fd4e 	bl	8005480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049e4:	2360      	movs	r3, #96	; 0x60
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049ec:	2300      	movs	r3, #0
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80049f0:	2300      	movs	r3, #0
 80049f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049f4:	2300      	movs	r3, #0
 80049f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80049f8:	2300      	movs	r3, #0
 80049fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80049fc:	2300      	movs	r3, #0
 80049fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a04:	2200      	movs	r2, #0
 8004a06:	4619      	mov	r1, r3
 8004a08:	4813      	ldr	r0, [pc, #76]	; (8004a58 <MX_TIM1_Init+0x138>)
 8004a0a:	f003 fb9d 	bl	8008148 <HAL_TIM_PWM_ConfigChannel>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004a14:	f000 fd34 	bl	8005480 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a20:	2300      	movs	r3, #0
 8004a22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004a36:	1d3b      	adds	r3, r7, #4
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4807      	ldr	r0, [pc, #28]	; (8004a58 <MX_TIM1_Init+0x138>)
 8004a3c:	f004 f81c 	bl	8008a78 <HAL_TIMEx_ConfigBreakDeadTime>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8004a46:	f000 fd1b 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004a4a:	4803      	ldr	r0, [pc, #12]	; (8004a58 <MX_TIM1_Init+0x138>)
 8004a4c:	f000 fea0 	bl	8005790 <HAL_TIM_MspPostInit>

}
 8004a50:	bf00      	nop
 8004a52:	3758      	adds	r7, #88	; 0x58
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20002c98 	.word	0x20002c98
 8004a5c:	40012c00 	.word	0x40012c00

08004a60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08e      	sub	sp, #56	; 0x38
 8004a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	605a      	str	r2, [r3, #4]
 8004a70:	609a      	str	r2, [r3, #8]
 8004a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a74:	f107 0320 	add.w	r3, r7, #32
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a7e:	1d3b      	adds	r3, r7, #4
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	605a      	str	r2, [r3, #4]
 8004a86:	609a      	str	r2, [r3, #8]
 8004a88:	60da      	str	r2, [r3, #12]
 8004a8a:	611a      	str	r2, [r3, #16]
 8004a8c:	615a      	str	r2, [r3, #20]
 8004a8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004a90:	4b2d      	ldr	r3, [pc, #180]	; (8004b48 <MX_TIM2_Init+0xe8>)
 8004a92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8004a98:	4b2b      	ldr	r3, [pc, #172]	; (8004b48 <MX_TIM2_Init+0xe8>)
 8004a9a:	2247      	movs	r2, #71	; 0x47
 8004a9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a9e:	4b2a      	ldr	r3, [pc, #168]	; (8004b48 <MX_TIM2_Init+0xe8>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8004aa4:	4b28      	ldr	r3, [pc, #160]	; (8004b48 <MX_TIM2_Init+0xe8>)
 8004aa6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004aaa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004aac:	4b26      	ldr	r3, [pc, #152]	; (8004b48 <MX_TIM2_Init+0xe8>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ab2:	4b25      	ldr	r3, [pc, #148]	; (8004b48 <MX_TIM2_Init+0xe8>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004ab8:	4823      	ldr	r0, [pc, #140]	; (8004b48 <MX_TIM2_Init+0xe8>)
 8004aba:	f003 f9b1 	bl	8007e20 <HAL_TIM_Base_Init>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004ac4:	f000 fcdc 	bl	8005480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004acc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	481c      	ldr	r0, [pc, #112]	; (8004b48 <MX_TIM2_Init+0xe8>)
 8004ad6:	f003 fbf9 	bl	80082cc <HAL_TIM_ConfigClockSource>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004ae0:	f000 fcce 	bl	8005480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004ae4:	4818      	ldr	r0, [pc, #96]	; (8004b48 <MX_TIM2_Init+0xe8>)
 8004ae6:	f003 fa35 	bl	8007f54 <HAL_TIM_PWM_Init>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004af0:	f000 fcc6 	bl	8005480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004af4:	2300      	movs	r3, #0
 8004af6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004afc:	f107 0320 	add.w	r3, r7, #32
 8004b00:	4619      	mov	r1, r3
 8004b02:	4811      	ldr	r0, [pc, #68]	; (8004b48 <MX_TIM2_Init+0xe8>)
 8004b04:	f003 ff5a 	bl	80089bc <HAL_TIMEx_MasterConfigSynchronization>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004b0e:	f000 fcb7 	bl	8005480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b12:	2360      	movs	r3, #96	; 0x60
 8004b14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004b22:	1d3b      	adds	r3, r7, #4
 8004b24:	2204      	movs	r2, #4
 8004b26:	4619      	mov	r1, r3
 8004b28:	4807      	ldr	r0, [pc, #28]	; (8004b48 <MX_TIM2_Init+0xe8>)
 8004b2a:	f003 fb0d 	bl	8008148 <HAL_TIM_PWM_ConfigChannel>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004b34:	f000 fca4 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004b38:	4803      	ldr	r0, [pc, #12]	; (8004b48 <MX_TIM2_Init+0xe8>)
 8004b3a:	f000 fe29 	bl	8005790 <HAL_TIM_MspPostInit>

}
 8004b3e:	bf00      	nop
 8004b40:	3738      	adds	r7, #56	; 0x38
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20002d4c 	.word	0x20002d4c

08004b4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b52:	f107 0308 	add.w	r3, r7, #8
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	605a      	str	r2, [r3, #4]
 8004b5c:	609a      	str	r2, [r3, #8]
 8004b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b60:	463b      	mov	r3, r7
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004b68:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <MX_TIM3_Init+0x94>)
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <MX_TIM3_Init+0x98>)
 8004b6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8004b6e:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <MX_TIM3_Init+0x94>)
 8004b70:	2247      	movs	r2, #71	; 0x47
 8004b72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b74:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <MX_TIM3_Init+0x94>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004b7a:	4b19      	ldr	r3, [pc, #100]	; (8004be0 <MX_TIM3_Init+0x94>)
 8004b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b82:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <MX_TIM3_Init+0x94>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b88:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <MX_TIM3_Init+0x94>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004b8e:	4814      	ldr	r0, [pc, #80]	; (8004be0 <MX_TIM3_Init+0x94>)
 8004b90:	f003 f946 	bl	8007e20 <HAL_TIM_Base_Init>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004b9a:	f000 fc71 	bl	8005480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ba2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004ba4:	f107 0308 	add.w	r3, r7, #8
 8004ba8:	4619      	mov	r1, r3
 8004baa:	480d      	ldr	r0, [pc, #52]	; (8004be0 <MX_TIM3_Init+0x94>)
 8004bac:	f003 fb8e 	bl	80082cc <HAL_TIM_ConfigClockSource>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8004bb6:	f000 fc63 	bl	8005480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004bc2:	463b      	mov	r3, r7
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4806      	ldr	r0, [pc, #24]	; (8004be0 <MX_TIM3_Init+0x94>)
 8004bc8:	f003 fef8 	bl	80089bc <HAL_TIMEx_MasterConfigSynchronization>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8004bd2:	f000 fc55 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004bd6:	bf00      	nop
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20002bc8 	.word	0x20002bc8
 8004be4:	40000400 	.word	0x40000400

08004be8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004bec:	4b15      	ldr	r3, [pc, #84]	; (8004c44 <MX_USART1_UART_Init+0x5c>)
 8004bee:	4a16      	ldr	r2, [pc, #88]	; (8004c48 <MX_USART1_UART_Init+0x60>)
 8004bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004bf2:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <MX_USART1_UART_Init+0x5c>)
 8004bf4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004bf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004bfa:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <MX_USART1_UART_Init+0x5c>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004c00:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <MX_USART1_UART_Init+0x5c>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004c06:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <MX_USART1_UART_Init+0x5c>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <MX_USART1_UART_Init+0x5c>)
 8004c0e:	220c      	movs	r2, #12
 8004c10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c12:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <MX_USART1_UART_Init+0x5c>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c18:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <MX_USART1_UART_Init+0x5c>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004c1e:	4809      	ldr	r0, [pc, #36]	; (8004c44 <MX_USART1_UART_Init+0x5c>)
 8004c20:	f003 ff7b 	bl	8008b1a <HAL_UART_Init>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004c2a:	f000 fc29 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0); // Prioridad 5 (ajústala si es necesario)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2105      	movs	r1, #5
 8004c32:	2025      	movs	r0, #37	; 0x25
 8004c34:	f001 f8cf 	bl	8005dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c38:	2025      	movs	r0, #37	; 0x25
 8004c3a:	f001 f8e8 	bl	8005e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 8004c3e:	bf00      	nop
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20002c4c 	.word	0x20002c4c
 8004c48:	40013800 	.word	0x40013800

08004c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c52:	f107 0310 	add.w	r3, r7, #16
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	605a      	str	r2, [r3, #4]
 8004c5c:	609a      	str	r2, [r3, #8]
 8004c5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c60:	4b3c      	ldr	r3, [pc, #240]	; (8004d54 <MX_GPIO_Init+0x108>)
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	4a3b      	ldr	r2, [pc, #236]	; (8004d54 <MX_GPIO_Init+0x108>)
 8004c66:	f043 0320 	orr.w	r3, r3, #32
 8004c6a:	6193      	str	r3, [r2, #24]
 8004c6c:	4b39      	ldr	r3, [pc, #228]	; (8004d54 <MX_GPIO_Init+0x108>)
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c78:	4b36      	ldr	r3, [pc, #216]	; (8004d54 <MX_GPIO_Init+0x108>)
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	4a35      	ldr	r2, [pc, #212]	; (8004d54 <MX_GPIO_Init+0x108>)
 8004c7e:	f043 0304 	orr.w	r3, r3, #4
 8004c82:	6193      	str	r3, [r2, #24]
 8004c84:	4b33      	ldr	r3, [pc, #204]	; (8004d54 <MX_GPIO_Init+0x108>)
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c90:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <MX_GPIO_Init+0x108>)
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	4a2f      	ldr	r2, [pc, #188]	; (8004d54 <MX_GPIO_Init+0x108>)
 8004c96:	f043 0308 	orr.w	r3, r3, #8
 8004c9a:	6193      	str	r3, [r2, #24]
 8004c9c:	4b2d      	ldr	r3, [pc, #180]	; (8004d54 <MX_GPIO_Init+0x108>)
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	607b      	str	r3, [r7, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Triger_GPIO_Port, Triger_Pin, GPIO_PIN_RESET);
 8004ca8:	2200      	movs	r2, #0
 8004caa:	2140      	movs	r1, #64	; 0x40
 8004cac:	482a      	ldr	r0, [pc, #168]	; (8004d58 <MX_GPIO_Init+0x10c>)
 8004cae:	f001 fb16 	bl	80062de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INI2_Pin|INI1_Pin, GPIO_PIN_RESET);
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	21c0      	movs	r1, #192	; 0xc0
 8004cb6:	4829      	ldr	r0, [pc, #164]	; (8004d5c <MX_GPIO_Init+0x110>)
 8004cb8:	f001 fb11 	bl	80062de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Enc_A_Pin */
  GPIO_InitStruct.Pin = Enc_A_Pin;
 8004cbc:	2308      	movs	r3, #8
 8004cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004cc0:	4b27      	ldr	r3, [pc, #156]	; (8004d60 <MX_GPIO_Init+0x114>)
 8004cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Enc_A_GPIO_Port, &GPIO_InitStruct);
 8004cc8:	f107 0310 	add.w	r3, r7, #16
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4822      	ldr	r0, [pc, #136]	; (8004d58 <MX_GPIO_Init+0x10c>)
 8004cd0:	f001 f96a 	bl	8005fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Enc_B_Pin */
  GPIO_InitStruct.Pin = Enc_B_Pin;
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Enc_B_GPIO_Port, &GPIO_InitStruct);
 8004ce0:	f107 0310 	add.w	r3, r7, #16
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	481c      	ldr	r0, [pc, #112]	; (8004d58 <MX_GPIO_Init+0x10c>)
 8004ce8:	f001 f95e 	bl	8005fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8004cec:	2320      	movs	r3, #32
 8004cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8004cf8:	f107 0310 	add.w	r3, r7, #16
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4816      	ldr	r0, [pc, #88]	; (8004d58 <MX_GPIO_Init+0x10c>)
 8004d00:	f001 f952 	bl	8005fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Triger_Pin */
  GPIO_InitStruct.Pin = Triger_Pin;
 8004d04:	2340      	movs	r3, #64	; 0x40
 8004d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d10:	2302      	movs	r3, #2
 8004d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Triger_GPIO_Port, &GPIO_InitStruct);
 8004d14:	f107 0310 	add.w	r3, r7, #16
 8004d18:	4619      	mov	r1, r3
 8004d1a:	480f      	ldr	r0, [pc, #60]	; (8004d58 <MX_GPIO_Init+0x10c>)
 8004d1c:	f001 f944 	bl	8005fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INI2_Pin INI1_Pin */
  GPIO_InitStruct.Pin = INI2_Pin|INI1_Pin;
 8004d20:	23c0      	movs	r3, #192	; 0xc0
 8004d22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d30:	f107 0310 	add.w	r3, r7, #16
 8004d34:	4619      	mov	r1, r3
 8004d36:	4809      	ldr	r0, [pc, #36]	; (8004d5c <MX_GPIO_Init+0x110>)
 8004d38:	f001 f936 	bl	8005fa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2105      	movs	r1, #5
 8004d40:	2009      	movs	r0, #9
 8004d42:	f001 f848 	bl	8005dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004d46:	2009      	movs	r0, #9
 8004d48:	f001 f861 	bl	8005e0e <HAL_NVIC_EnableIRQ>

}
 8004d4c:	bf00      	nop
 8004d4e:	3720      	adds	r7, #32
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40021000 	.word	0x40021000
 8004d58:	40010800 	.word	0x40010800
 8004d5c:	40010c00 	.word	0x40010c00
 8004d60:	10110000 	.word	0x10110000

08004d64 <parse_command>:

/* USER CODE BEGIN 4 */

// Función para extraer dos enteros de un buffer
int parse_command(const char *buffer, int *angulo, int *velocidad) {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
    char *comma_pos = strchr(buffer, ','); // Buscar la coma
 8004d70:	212c      	movs	r1, #44	; 0x2c
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f005 ffea 	bl	800ad4c <strchr>
 8004d78:	6178      	str	r0, [r7, #20]
    if (comma_pos == NULL) {
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <parse_command+0x20>
        return 0; // Formato inválido
 8004d80:	2300      	movs	r3, #0
 8004d82:	e014      	b.n	8004dae <parse_command+0x4a>
    }

    // Extraer los valores antes y después de la coma
    *comma_pos = '\0'; // Reemplazar coma por terminador nulo temporalmente
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2200      	movs	r2, #0
 8004d88:	701a      	strb	r2, [r3, #0]
    *angulo = atoi(buffer); // Convertir la primera parte a entero
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f005 ff38 	bl	800ac00 <atoi>
 8004d90:	4602      	mov	r2, r0
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	601a      	str	r2, [r3, #0]
    *comma_pos = ',';       // Restaurar la coma
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	222c      	movs	r2, #44	; 0x2c
 8004d9a:	701a      	strb	r2, [r3, #0]
    *velocidad = atoi(comma_pos + 1); // Convertir la segunda parte a entero
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	4618      	mov	r0, r3
 8004da2:	f005 ff2d 	bl	800ac00 <atoi>
 8004da6:	4602      	mov	r2, r0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	601a      	str	r2, [r3, #0]

    return 1; // Éxito
 8004dac:	2301      	movs	r3, #1
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <process_received_command>:


void process_received_command(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
    if (command_received)
 8004dbe:	4b49      	ldr	r3, [pc, #292]	; (8004ee4 <process_received_command+0x12c>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 8089 	beq.w	8004edc <process_received_command+0x124>
    {
        command_received = 0;
 8004dca:	4b46      	ldr	r3, [pc, #280]	; (8004ee4 <process_received_command+0x12c>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]

        // Verificar si el comando comienza con "MODE:"
        if (strncmp(command_buffer, "MODE:", 5) == 0)
 8004dd0:	2205      	movs	r2, #5
 8004dd2:	4945      	ldr	r1, [pc, #276]	; (8004ee8 <process_received_command+0x130>)
 8004dd4:	4845      	ldr	r0, [pc, #276]	; (8004eec <process_received_command+0x134>)
 8004dd6:	f005 ffc6 	bl	800ad66 <strncmp>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d13e      	bne.n	8004e5e <process_received_command+0xa6>
        {
            char mode[7]; // "MANUAL" o "AUTO"
            strncpy(mode, command_buffer + 5, 6);
 8004de0:	4943      	ldr	r1, [pc, #268]	; (8004ef0 <process_received_command+0x138>)
 8004de2:	f107 0308 	add.w	r3, r7, #8
 8004de6:	2206      	movs	r2, #6
 8004de8:	4618      	mov	r0, r3
 8004dea:	f005 ffce 	bl	800ad8a <strncpy>
            mode[6] = '\0'; // Asegurar terminación de cadena
 8004dee:	2300      	movs	r3, #0
 8004df0:	73bb      	strb	r3, [r7, #14]

            if (strcmp(mode, "MANUAL") == 0)
 8004df2:	f107 0308 	add.w	r3, r7, #8
 8004df6:	493f      	ldr	r1, [pc, #252]	; (8004ef4 <process_received_command+0x13c>)
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fb f9a9 	bl	8000150 <strcmp>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d110      	bne.n	8004e26 <process_received_command+0x6e>
            {
                current_mode = MODE_MANUAL;
 8004e04:	4b3c      	ldr	r3, [pc, #240]	; (8004ef8 <process_received_command+0x140>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	701a      	strb	r2, [r3, #0]
                set_motor_direction(0); // Detener motores al cambiar a manual
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	f7ff fa40 	bl	8004290 <set_motor_direction>
                set_speed(0);
 8004e10:	2000      	movs	r0, #0
 8004e12:	f7ff fa75 	bl	8004300 <set_speed>
                HAL_UART_Transmit(&huart1, (uint8_t*)"Modo Manual Activado\r\n", 22, HAL_MAX_DELAY);
 8004e16:	f04f 33ff 	mov.w	r3, #4294967295
 8004e1a:	2216      	movs	r2, #22
 8004e1c:	4937      	ldr	r1, [pc, #220]	; (8004efc <process_received_command+0x144>)
 8004e1e:	4838      	ldr	r0, [pc, #224]	; (8004f00 <process_received_command+0x148>)
 8004e20:	f003 fecb 	bl	8008bba <HAL_UART_Transmit>
 8004e24:	e05a      	b.n	8004edc <process_received_command+0x124>
            }
            else if (strcmp(mode, "AUTO") == 0)
 8004e26:	f107 0308 	add.w	r3, r7, #8
 8004e2a:	4936      	ldr	r1, [pc, #216]	; (8004f04 <process_received_command+0x14c>)
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fb f98f 	bl	8000150 <strcmp>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10a      	bne.n	8004e4e <process_received_command+0x96>
            {
                current_mode = MODE_AUTONOMOUS;
 8004e38:	4b2f      	ldr	r3, [pc, #188]	; (8004ef8 <process_received_command+0x140>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)"Modo Autonómico Activado\r\n", 25, HAL_MAX_DELAY);
 8004e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e42:	2219      	movs	r2, #25
 8004e44:	4930      	ldr	r1, [pc, #192]	; (8004f08 <process_received_command+0x150>)
 8004e46:	482e      	ldr	r0, [pc, #184]	; (8004f00 <process_received_command+0x148>)
 8004e48:	f003 feb7 	bl	8008bba <HAL_UART_Transmit>
 8004e4c:	e046      	b.n	8004edc <process_received_command+0x124>
            }
            else
            {
                HAL_UART_Transmit(&huart1, (uint8_t*)"Modo Desconocido\r\n", 19, HAL_MAX_DELAY);
 8004e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e52:	2213      	movs	r2, #19
 8004e54:	492d      	ldr	r1, [pc, #180]	; (8004f0c <process_received_command+0x154>)
 8004e56:	482a      	ldr	r0, [pc, #168]	; (8004f00 <process_received_command+0x148>)
 8004e58:	f003 feaf 	bl	8008bba <HAL_UART_Transmit>
 8004e5c:	e03e      	b.n	8004edc <process_received_command+0x124>
            }
        }
        // Verificar si el comando comienza con 'M' para Manual Control
        else if (command_buffer[0] == 'M')
 8004e5e:	4b23      	ldr	r3, [pc, #140]	; (8004eec <process_received_command+0x134>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b4d      	cmp	r3, #77	; 0x4d
 8004e64:	d13a      	bne.n	8004edc <process_received_command+0x124>
        {
            if (current_mode != MODE_MANUAL)
 8004e66:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <process_received_command+0x140>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d007      	beq.n	8004e80 <process_received_command+0xc8>
            {
                // Ignorar comandos manuales si no estamos en modo manual
                HAL_UART_Transmit(&huart1, (uint8_t*)"No está en modo manual\r\n", 23, HAL_MAX_DELAY);
 8004e70:	f04f 33ff 	mov.w	r3, #4294967295
 8004e74:	2217      	movs	r2, #23
 8004e76:	4926      	ldr	r1, [pc, #152]	; (8004f10 <process_received_command+0x158>)
 8004e78:	4821      	ldr	r0, [pc, #132]	; (8004f00 <process_received_command+0x148>)
 8004e7a:	f003 fe9e 	bl	8008bba <HAL_UART_Transmit>
 8004e7e:	e02d      	b.n	8004edc <process_received_command+0x124>
                return;
            }

            // Parsear los valores de ángulo y velocidad
            int angulo = 0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	607b      	str	r3, [r7, #4]
            int velocidad_m = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	603b      	str	r3, [r7, #0]

            // Usar sscanf para extraer los valores
            if (parse_command(command_buffer + 1, &angulo, &velocidad_m))
 8004e88:	4822      	ldr	r0, [pc, #136]	; (8004f14 <process_received_command+0x15c>)
 8004e8a:	463a      	mov	r2, r7
 8004e8c:	1d3b      	adds	r3, r7, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	f7ff ff68 	bl	8004d64 <parse_command>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d020      	beq.n	8004edc <process_received_command+0x124>
            {

              velocidad_manual = velocidad_m;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <process_received_command+0x160>)
 8004e9e:	6013      	str	r3, [r2, #0]
		      grados_manual = angulo;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a1e      	ldr	r2, [pc, #120]	; (8004f1c <process_received_command+0x164>)
 8004ea4:	6013      	str	r3, [r2, #0]


		      if (velocidad_m < 0)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	da06      	bge.n	8004eba <process_received_command+0x102>
		      {
		    	  velocidad_m = -velocidad_m;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	425b      	negs	r3, r3
 8004eb0:	603b      	str	r3, [r7, #0]
		          set_motor_direction(2);
 8004eb2:	2002      	movs	r0, #2
 8004eb4:	f7ff f9ec 	bl	8004290 <set_motor_direction>
 8004eb8:	e009      	b.n	8004ece <process_received_command+0x116>
		      }
		      else if (velocidad_m > 0)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	dd03      	ble.n	8004ec8 <process_received_command+0x110>
			  {
				  set_motor_direction(1);
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	f7ff f9e5 	bl	8004290 <set_motor_direction>
 8004ec6:	e002      	b.n	8004ece <process_received_command+0x116>
			  }
		      else
		      {
			        set_motor_direction(0);
 8004ec8:	2000      	movs	r0, #0
 8004eca:	f7ff f9e1 	bl	8004290 <set_motor_direction>
		      }


		      set_speed(velocidad_m);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff fa15 	bl	8004300 <set_speed>
		      Grados = angulo;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a11      	ldr	r2, [pc, #68]	; (8004f20 <process_received_command+0x168>)
 8004eda:	6013      	str	r3, [r2, #0]
            }
        }


    }
}
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	2000028d 	.word	0x2000028d
 8004ee8:	0800d048 	.word	0x0800d048
 8004eec:	20002d98 	.word	0x20002d98
 8004ef0:	20002d9d 	.word	0x20002d9d
 8004ef4:	0800d050 	.word	0x0800d050
 8004ef8:	2000028c 	.word	0x2000028c
 8004efc:	0800d058 	.word	0x0800d058
 8004f00:	20002c4c 	.word	0x20002c4c
 8004f04:	0800d070 	.word	0x0800d070
 8004f08:	0800d078 	.word	0x0800d078
 8004f0c:	0800d094 	.word	0x0800d094
 8004f10:	0800d0a8 	.word	0x0800d0a8
 8004f14:	20002d99 	.word	0x20002d99
 8004f18:	20000284 	.word	0x20000284
 8004f1c:	20000288 	.word	0x20000288
 8004f20:	20000240 	.word	0x20000240

08004f24 <send_data_over_bluetooth>:

void send_data_over_bluetooth(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b0a4      	sub	sp, #144	; 0x90
 8004f28:	af04      	add	r7, sp, #16
    char data_packet[100]; // Ajusta el tamaño según sea necesario
    // Escalar los valores flotantes a enteros (×100)
    int velocidad_scaled = velocidad_actual; // Asegúrate de que velocidad_actual ya está en enteros
 8004f2a:	4b2d      	ldr	r3, [pc, #180]	; (8004fe0 <send_data_over_bluetooth+0xbc>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	67fb      	str	r3, [r7, #124]	; 0x7c
    int pos_x_scaled = (int)(pos_x * 100);
 8004f30:	4b2c      	ldr	r3, [pc, #176]	; (8004fe4 <send_data_over_bluetooth+0xc0>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	492c      	ldr	r1, [pc, #176]	; (8004fe8 <send_data_over_bluetooth+0xc4>)
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fb ff06 	bl	8000d48 <__aeabi_fmul>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fc f8c8 	bl	80010d4 <__aeabi_f2iz>
 8004f44:	4603      	mov	r3, r0
 8004f46:	67bb      	str	r3, [r7, #120]	; 0x78
    int pos_y_scaled = (int)(pos_y * 100);
 8004f48:	4b28      	ldr	r3, [pc, #160]	; (8004fec <send_data_over_bluetooth+0xc8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4926      	ldr	r1, [pc, #152]	; (8004fe8 <send_data_over_bluetooth+0xc4>)
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fb fefa 	bl	8000d48 <__aeabi_fmul>
 8004f54:	4603      	mov	r3, r0
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fc f8bc 	bl	80010d4 <__aeabi_f2iz>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	677b      	str	r3, [r7, #116]	; 0x74
    int yaw_scaled = (int)(heading_degree * 100);
 8004f60:	4b23      	ldr	r3, [pc, #140]	; (8004ff0 <send_data_over_bluetooth+0xcc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4920      	ldr	r1, [pc, #128]	; (8004fe8 <send_data_over_bluetooth+0xc4>)
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fb feee 	bl	8000d48 <__aeabi_fmul>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fc f8b0 	bl	80010d4 <__aeabi_f2iz>
 8004f74:	4603      	mov	r3, r0
 8004f76:	673b      	str	r3, [r7, #112]	; 0x70

    // Formatear el paquete con enteros
    int length = snprintf(data_packet, sizeof(data_packet), "D,%d,%d,%d,%d", velocidad_scaled, pos_x_scaled, pos_y_scaled, yaw_scaled);
 8004f78:	f107 0008 	add.w	r0, r7, #8
 8004f7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f7e:	9302      	str	r3, [sp, #8]
 8004f80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f82:	9301      	str	r3, [sp, #4]
 8004f84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f8a:	4a1a      	ldr	r2, [pc, #104]	; (8004ff4 <send_data_over_bluetooth+0xd0>)
 8004f8c:	2164      	movs	r1, #100	; 0x64
 8004f8e:	f005 fe89 	bl	800aca4 <sniprintf>
 8004f92:	66f8      	str	r0, [r7, #108]	; 0x6c

    if (length > 0 && length < sizeof(data_packet))
 8004f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	dd1d      	ble.n	8004fd6 <send_data_over_bluetooth+0xb2>
 8004f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9c:	2b63      	cmp	r3, #99	; 0x63
 8004f9e:	d81a      	bhi.n	8004fd6 <send_data_over_bluetooth+0xb2>
    {
        uint8_t start_byte = 0x02;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	71fb      	strb	r3, [r7, #7]
        uint8_t end_byte = 0x03;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	71bb      	strb	r3, [r7, #6]

        // Enviar el paquete por UART
        HAL_UART_Transmit(&huart1, &start_byte, 1, HAL_MAX_DELAY);
 8004fa8:	1df9      	adds	r1, r7, #7
 8004faa:	f04f 33ff 	mov.w	r3, #4294967295
 8004fae:	2201      	movs	r2, #1
 8004fb0:	4811      	ldr	r0, [pc, #68]	; (8004ff8 <send_data_over_bluetooth+0xd4>)
 8004fb2:	f003 fe02 	bl	8008bba <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)data_packet, length, HAL_MAX_DELAY);
 8004fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	f107 0108 	add.w	r1, r7, #8
 8004fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc2:	480d      	ldr	r0, [pc, #52]	; (8004ff8 <send_data_over_bluetooth+0xd4>)
 8004fc4:	f003 fdf9 	bl	8008bba <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, &end_byte, 1, HAL_MAX_DELAY);
 8004fc8:	1db9      	adds	r1, r7, #6
 8004fca:	f04f 33ff 	mov.w	r3, #4294967295
 8004fce:	2201      	movs	r2, #1
 8004fd0:	4809      	ldr	r0, [pc, #36]	; (8004ff8 <send_data_over_bluetooth+0xd4>)
 8004fd2:	f003 fdf2 	bl	8008bba <HAL_UART_Transmit>


    }


}
 8004fd6:	bf00      	nop
 8004fd8:	3780      	adds	r7, #128	; 0x80
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000280 	.word	0x20000280
 8004fe4:	20000278 	.word	0x20000278
 8004fe8:	42c80000 	.word	0x42c80000
 8004fec:	2000027c 	.word	0x2000027c
 8004ff0:	20000268 	.word	0x20000268
 8004ff4:	0800d0c4 	.word	0x0800d0c4
 8004ff8:	20002c4c 	.word	0x20002c4c

08004ffc <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void const * argument)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (command_received)
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <StartUartTask+0x20>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <StartUartTask+0x16>
	        {
	            process_received_command();
 800500e:	f7ff fed3 	bl	8004db8 <process_received_command>
	        }

	        osDelay(100); // Retard
 8005012:	2064      	movs	r0, #100	; 0x64
 8005014:	f004 fc56 	bl	80098c4 <osDelay>
	  if (command_received)
 8005018:	e7f4      	b.n	8005004 <StartUartTask+0x8>
 800501a:	bf00      	nop
 800501c:	2000028d 	.word	0x2000028d

08005020 <StartServoTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServoTask */
void StartServoTask(void const * argument)
{
 8005020:	b590      	push	{r4, r7, lr}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartServoTask */
	uint32_t antes = HAL_GetTick();
 8005028:	f000 fdd0 	bl	8005bcc <HAL_GetTick>
 800502c:	60f8      	str	r0, [r7, #12]
	uint32_t ahora = antes;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	617b      	str	r3, [r7, #20]
	float intervalo = 0.0f;
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {

	  if (current_mode != MODE_MANUAL)
 8005038:	4b5b      	ldr	r3, [pc, #364]	; (80051a8 <StartServoTask+0x188>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b01      	cmp	r3, #1
 8005040:	f000 80ac 	beq.w	800519c <StartServoTask+0x17c>
	  {
	  // Implementación del PID para la dirección
	        // 1. Calcular el error

	        error_dir = calculate_angle_error(desired_heading, heading_degree);
 8005044:	4b59      	ldr	r3, [pc, #356]	; (80051ac <StartServoTask+0x18c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a59      	ldr	r2, [pc, #356]	; (80051b0 <StartServoTask+0x190>)
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	4611      	mov	r1, r2
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff f81e 	bl	8004090 <calculate_angle_error>
 8005054:	4603      	mov	r3, r0
 8005056:	4a57      	ldr	r2, [pc, #348]	; (80051b4 <StartServoTask+0x194>)
 8005058:	6013      	str	r3, [r2, #0]

	        // 2. Calcular la integral del error (anti-windup)

	        antes = ahora;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	60fb      	str	r3, [r7, #12]
	        ahora = HAL_GetTick();
 800505e:	f000 fdb5 	bl	8005bcc <HAL_GetTick>
 8005062:	6178      	str	r0, [r7, #20]
	        intervalo = (float)(ahora - antes) / 1000.0f;
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	4618      	mov	r0, r3
 800506c:	f7fb fe14 	bl	8000c98 <__aeabi_ui2f>
 8005070:	4603      	mov	r3, r0
 8005072:	4951      	ldr	r1, [pc, #324]	; (80051b8 <StartServoTask+0x198>)
 8005074:	4618      	mov	r0, r3
 8005076:	f7fb ff1b 	bl	8000eb0 <__aeabi_fdiv>
 800507a:	4603      	mov	r3, r0
 800507c:	613b      	str	r3, [r7, #16]

	        if (intervalo <= 0.0f)
 800507e:	f04f 0100 	mov.w	r1, #0
 8005082:	6938      	ldr	r0, [r7, #16]
 8005084:	f7fc f808 	bl	8001098 <__aeabi_fcmple>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <StartServoTask+0x72>
			{
				intervalo = 0.001f; // Asignar un valor pequeño
 800508e:	4b4b      	ldr	r3, [pc, #300]	; (80051bc <StartServoTask+0x19c>)
 8005090:	613b      	str	r3, [r7, #16]
			}

	        integral_dir += error_dir * intervalo; // Integración en segundos
 8005092:	4b48      	ldr	r3, [pc, #288]	; (80051b4 <StartServoTask+0x194>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6939      	ldr	r1, [r7, #16]
 8005098:	4618      	mov	r0, r3
 800509a:	f7fb fe55 	bl	8000d48 <__aeabi_fmul>
 800509e:	4603      	mov	r3, r0
 80050a0:	461a      	mov	r2, r3
 80050a2:	4b47      	ldr	r3, [pc, #284]	; (80051c0 <StartServoTask+0x1a0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4619      	mov	r1, r3
 80050a8:	4610      	mov	r0, r2
 80050aa:	f7fb fd45 	bl	8000b38 <__addsf3>
 80050ae:	4603      	mov	r3, r0
 80050b0:	461a      	mov	r2, r3
 80050b2:	4b43      	ldr	r3, [pc, #268]	; (80051c0 <StartServoTask+0x1a0>)
 80050b4:	601a      	str	r2, [r3, #0]


	        if (integral_dir > INTEGRAL_MAX_DIR)
 80050b6:	4b42      	ldr	r3, [pc, #264]	; (80051c0 <StartServoTask+0x1a0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fb fffe 	bl	80010c0 <__aeabi_fcmpgt>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d004      	beq.n	80050d4 <StartServoTask+0xb4>
	            integral_dir = INTEGRAL_MAX_DIR;
 80050ca:	4b3d      	ldr	r3, [pc, #244]	; (80051c0 <StartServoTask+0x1a0>)
 80050cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	e00b      	b.n	80050ec <StartServoTask+0xcc>
	        else if (integral_dir < INTEGRAL_MIN_DIR)
 80050d4:	4b3a      	ldr	r3, [pc, #232]	; (80051c0 <StartServoTask+0x1a0>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	493a      	ldr	r1, [pc, #232]	; (80051c4 <StartServoTask+0x1a4>)
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fb ffd2 	bl	8001084 <__aeabi_fcmplt>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <StartServoTask+0xcc>
	            integral_dir = INTEGRAL_MIN_DIR;
 80050e6:	4b36      	ldr	r3, [pc, #216]	; (80051c0 <StartServoTask+0x1a0>)
 80050e8:	4a36      	ldr	r2, [pc, #216]	; (80051c4 <StartServoTask+0x1a4>)
 80050ea:	601a      	str	r2, [r3, #0]

	        // 3. Calcular la derivada del error
	        derivative_dir = (error_dir - prev_error_dir) / (PWM_UPDATE_PERIOD_MS / 1000.0f);
 80050ec:	4b31      	ldr	r3, [pc, #196]	; (80051b4 <StartServoTask+0x194>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a35      	ldr	r2, [pc, #212]	; (80051c8 <StartServoTask+0x1a8>)
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	4611      	mov	r1, r2
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fb fd1c 	bl	8000b34 <__aeabi_fsub>
 80050fc:	4603      	mov	r3, r0
 80050fe:	4933      	ldr	r1, [pc, #204]	; (80051cc <StartServoTask+0x1ac>)
 8005100:	4618      	mov	r0, r3
 8005102:	f7fb fed5 	bl	8000eb0 <__aeabi_fdiv>
 8005106:	4603      	mov	r3, r0
 8005108:	461a      	mov	r2, r3
 800510a:	4b31      	ldr	r3, [pc, #196]	; (80051d0 <StartServoTask+0x1b0>)
 800510c:	601a      	str	r2, [r3, #0]

	        // 4. Calcular la salida del PID
	        output_dir = kp_dir * error_dir + ki_dir * integral_dir + kd_dir * derivative_dir;
 800510e:	4b31      	ldr	r3, [pc, #196]	; (80051d4 <StartServoTask+0x1b4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a28      	ldr	r2, [pc, #160]	; (80051b4 <StartServoTask+0x194>)
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	4611      	mov	r1, r2
 8005118:	4618      	mov	r0, r3
 800511a:	f7fb fe15 	bl	8000d48 <__aeabi_fmul>
 800511e:	4603      	mov	r3, r0
 8005120:	461c      	mov	r4, r3
 8005122:	4b2d      	ldr	r3, [pc, #180]	; (80051d8 <StartServoTask+0x1b8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a26      	ldr	r2, [pc, #152]	; (80051c0 <StartServoTask+0x1a0>)
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	4611      	mov	r1, r2
 800512c:	4618      	mov	r0, r3
 800512e:	f7fb fe0b 	bl	8000d48 <__aeabi_fmul>
 8005132:	4603      	mov	r3, r0
 8005134:	4619      	mov	r1, r3
 8005136:	4620      	mov	r0, r4
 8005138:	f7fb fcfe 	bl	8000b38 <__addsf3>
 800513c:	4603      	mov	r3, r0
 800513e:	461c      	mov	r4, r3
 8005140:	4b26      	ldr	r3, [pc, #152]	; (80051dc <StartServoTask+0x1bc>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a22      	ldr	r2, [pc, #136]	; (80051d0 <StartServoTask+0x1b0>)
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	4611      	mov	r1, r2
 800514a:	4618      	mov	r0, r3
 800514c:	f7fb fdfc 	bl	8000d48 <__aeabi_fmul>
 8005150:	4603      	mov	r3, r0
 8005152:	4619      	mov	r1, r3
 8005154:	4620      	mov	r0, r4
 8005156:	f7fb fcef 	bl	8000b38 <__addsf3>
 800515a:	4603      	mov	r3, r0
 800515c:	461a      	mov	r2, r3
 800515e:	4b20      	ldr	r3, [pc, #128]	; (80051e0 <StartServoTask+0x1c0>)
 8005160:	601a      	str	r2, [r3, #0]

	        // 5. Actualizar el error previo
	        prev_error_dir = error_dir;
 8005162:	4b14      	ldr	r3, [pc, #80]	; (80051b4 <StartServoTask+0x194>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <StartServoTask+0x1a8>)
 8005168:	6013      	str	r3, [r2, #0]

	        // 6. Ajustar Grados basado en la salida del PID
	        Grados= output_dir;
 800516a:	4b1d      	ldr	r3, [pc, #116]	; (80051e0 <StartServoTask+0x1c0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f7fb ffb0 	bl	80010d4 <__aeabi_f2iz>
 8005174:	4603      	mov	r3, r0
 8005176:	4a1b      	ldr	r2, [pc, #108]	; (80051e4 <StartServoTask+0x1c4>)
 8005178:	6013      	str	r3, [r2, #0]

	        // 7. Asegurar que Grados esté dentro de los límites
	        if (Grados > MAX_DELTA_ANGLE)
 800517a:	4b1a      	ldr	r3, [pc, #104]	; (80051e4 <StartServoTask+0x1c4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b50      	cmp	r3, #80	; 0x50
 8005180:	dd03      	ble.n	800518a <StartServoTask+0x16a>
	            Grados = MAX_DELTA_ANGLE;
 8005182:	4b18      	ldr	r3, [pc, #96]	; (80051e4 <StartServoTask+0x1c4>)
 8005184:	2250      	movs	r2, #80	; 0x50
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	e008      	b.n	800519c <StartServoTask+0x17c>
	        else if (Grados < -MAX_DELTA_ANGLE)
 800518a:	4b16      	ldr	r3, [pc, #88]	; (80051e4 <StartServoTask+0x1c4>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f113 0f50 	cmn.w	r3, #80	; 0x50
 8005192:	da03      	bge.n	800519c <StartServoTask+0x17c>
	            Grados = -MAX_DELTA_ANGLE;
 8005194:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <StartServoTask+0x1c4>)
 8005196:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 800519a:	601a      	str	r2, [r3, #0]

	        // 8. Actualizar la posición del servo

	  }
	  update_servo_position();
 800519c:	f7ff f90a 	bl	80043b4 <update_servo_position>

	        osDelay(PWM_UPDATE_PERIOD_MS); // Actualiza cada PWM_UPDATE_PERIOD_MS ms
 80051a0:	200a      	movs	r0, #10
 80051a2:	f004 fb8f 	bl	80098c4 <osDelay>
	  if (current_mode != MODE_MANUAL)
 80051a6:	e747      	b.n	8005038 <StartServoTask+0x18>
 80051a8:	2000028c 	.word	0x2000028c
 80051ac:	20000250 	.word	0x20000250
 80051b0:	20000268 	.word	0x20000268
 80051b4:	20000254 	.word	0x20000254
 80051b8:	447a0000 	.word	0x447a0000
 80051bc:	3a83126f 	.word	0x3a83126f
 80051c0:	2000025c 	.word	0x2000025c
 80051c4:	bf800000 	.word	0xbf800000
 80051c8:	20000258 	.word	0x20000258
 80051cc:	3c23d70a 	.word	0x3c23d70a
 80051d0:	20000260 	.word	0x20000260
 80051d4:	2000003c 	.word	0x2000003c
 80051d8:	20000040 	.word	0x20000040
 80051dc:	20000044 	.word	0x20000044
 80051e0:	20000264 	.word	0x20000264
 80051e4:	20000240 	.word	0x20000240

080051e8 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  /* Infinite loop */
  for(;;)
  {
      if (current_mode == MODE_AUTONOMOUS)
 80051f0:	4b28      	ldr	r3, [pc, #160]	; (8005294 <StartMotorTask+0xac>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d140      	bne.n	800527c <StartMotorTask+0x94>
      {
          // Secuencia autónoma
          move_forward(SIDE_ENCODER_COUNT - 115);
 80051fa:	f240 1039 	movw	r0, #313	; 0x139
 80051fe:	f7fe ff79 	bl	80040f4 <move_forward>
          osDelay(5000);
 8005202:	f241 3088 	movw	r0, #5000	; 0x1388
 8005206:	f004 fb5d 	bl	80098c4 <osDelay>

          // Girar 90 grados
          turn_degrees(TURN_ANGLE_DEGREES);
 800520a:	4823      	ldr	r0, [pc, #140]	; (8005298 <StartMotorTask+0xb0>)
 800520c:	f7fe ffac 	bl	8004168 <turn_degrees>
          osDelay(5000);
 8005210:	f241 3088 	movw	r0, #5000	; 0x1388
 8005214:	f004 fb56 	bl	80098c4 <osDelay>

          for(int side = 0; side < 2; side++)
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	e011      	b.n	8005242 <StartMotorTask+0x5a>
          {
              move_forward(SIDE_ENCODER_COUNT-10);
 800521e:	f44f 70d1 	mov.w	r0, #418	; 0x1a2
 8005222:	f7fe ff67 	bl	80040f4 <move_forward>
              osDelay(5000);
 8005226:	f241 3088 	movw	r0, #5000	; 0x1388
 800522a:	f004 fb4b 	bl	80098c4 <osDelay>

              turn_degrees(TURN_ANGLE_DEGREES);
 800522e:	481a      	ldr	r0, [pc, #104]	; (8005298 <StartMotorTask+0xb0>)
 8005230:	f7fe ff9a 	bl	8004168 <turn_degrees>
              osDelay(5000);
 8005234:	f241 3088 	movw	r0, #5000	; 0x1388
 8005238:	f004 fb44 	bl	80098c4 <osDelay>
          for(int side = 0; side < 2; side++)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3301      	adds	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b01      	cmp	r3, #1
 8005246:	ddea      	ble.n	800521e <StartMotorTask+0x36>
          }

          move_forward(SIDE_ENCODER_COUNT + 15);
 8005248:	f240 10bb 	movw	r0, #443	; 0x1bb
 800524c:	f7fe ff52 	bl	80040f4 <move_forward>
          osDelay(5000);
 8005250:	f241 3088 	movw	r0, #5000	; 0x1388
 8005254:	f004 fb36 	bl	80098c4 <osDelay>

          turn_degrees(TURN_ANGLE_DEGREES);
 8005258:	480f      	ldr	r0, [pc, #60]	; (8005298 <StartMotorTask+0xb0>)
 800525a:	f7fe ff85 	bl	8004168 <turn_degrees>
          osDelay(5000);
 800525e:	f241 3088 	movw	r0, #5000	; 0x1388
 8005262:	f004 fb2f 	bl	80098c4 <osDelay>

          // Detener el motor después de completar la secuencia
          set_motor_direction(0);
 8005266:	2000      	movs	r0, #0
 8005268:	f7ff f812 	bl	8004290 <set_motor_direction>
          set_speed(0);
 800526c:	2000      	movs	r0, #0
 800526e:	f7ff f847 	bl	8004300 <set_speed>

          // Esperar antes de repetir la secuencia
          osDelay(1000);
 8005272:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005276:	f004 fb25 	bl	80098c4 <osDelay>
 800527a:	e007      	b.n	800528c <StartMotorTask+0xa4>
      }
      else if (current_mode == MODE_MANUAL)
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <StartMotorTask+0xac>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	d102      	bne.n	800528c <StartMotorTask+0xa4>
      {
          // En modo manual, permitir que las tareas de comandos controlen el motor
          // No realizar ninguna acción específica aquí
          osDelay(100); // Ajusta el delay según sea necesario
 8005286:	2064      	movs	r0, #100	; 0x64
 8005288:	f004 fb1c 	bl	80098c4 <osDelay>
      }

      osDelay(100); // Ajusta el delay según sea necesario
 800528c:	2064      	movs	r0, #100	; 0x64
 800528e:	f004 fb19 	bl	80098c4 <osDelay>
      if (current_mode == MODE_AUTONOMOUS)
 8005292:	e7ad      	b.n	80051f0 <StartMotorTask+0x8>
 8005294:	2000028c 	.word	0x2000028c
 8005298:	42b40000 	.word	0x42b40000

0800529c <StartUltrasonicoTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUltrasonicoTask */
void StartUltrasonicoTask(void const * argument)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUltrasonicoTask */
  /* Infinite loop */
  for(;;)
  {
      if(ultrasonic_measure_distance() < DISTANCE_THRESHOLD)
 80052a4:	f000 fb9c 	bl	80059e0 <ultrasonic_measure_distance>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b1d      	cmp	r3, #29
 80052ac:	d802      	bhi.n	80052b4 <StartUltrasonicoTask+0x18>
          set_motor_direction(0);
 80052ae:	2000      	movs	r0, #0
 80052b0:	f7fe ffee 	bl	8004290 <set_motor_direction>
      osDelay(400);
 80052b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80052b8:	f004 fb04 	bl	80098c4 <osDelay>
      if(ultrasonic_measure_distance() < DISTANCE_THRESHOLD)
 80052bc:	e7f2      	b.n	80052a4 <StartUltrasonicoTask+0x8>
	...

080052c0 <StartEncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void const * argument)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08a      	sub	sp, #40	; 0x28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */

  const uint32_t t_in_ms = 500;  // Intervalo de medición en milisegundos
 80052c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Infinite loop */
  for(;;)
  {

	  int pos_x_scaled = (int)(pos_x  * (180.0f / 3.141592f) * 100); // Escalar por 100
 80052ce:	4b11      	ldr	r3, [pc, #68]	; (8005314 <StartEncoderTask+0x54>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4911      	ldr	r1, [pc, #68]	; (8005318 <StartEncoderTask+0x58>)
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fb fd37 	bl	8000d48 <__aeabi_fmul>
 80052da:	4603      	mov	r3, r0
 80052dc:	490f      	ldr	r1, [pc, #60]	; (800531c <StartEncoderTask+0x5c>)
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fb fd32 	bl	8000d48 <__aeabi_fmul>
 80052e4:	4603      	mov	r3, r0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fb fef4 	bl	80010d4 <__aeabi_f2iz>
 80052ec:	4603      	mov	r3, r0
 80052ee:	623b      	str	r3, [r7, #32]
	  int pos_y_scaled = (int)(pos_y  * (180.0f / 3.141592f) * 100); // Escalar por 100
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <StartEncoderTask+0x60>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4908      	ldr	r1, [pc, #32]	; (8005318 <StartEncoderTask+0x58>)
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fb fd26 	bl	8000d48 <__aeabi_fmul>
 80052fc:	4603      	mov	r3, r0
 80052fe:	4907      	ldr	r1, [pc, #28]	; (800531c <StartEncoderTask+0x5c>)
 8005300:	4618      	mov	r0, r3
 8005302:	f7fb fd21 	bl	8000d48 <__aeabi_fmul>
 8005306:	4603      	mov	r3, r0
 8005308:	4618      	mov	r0, r3
 800530a:	f7fb fee3 	bl	80010d4 <__aeabi_f2iz>
 800530e:	4603      	mov	r3, r0
 8005310:	61fb      	str	r3, [r7, #28]
  {
 8005312:	e7dc      	b.n	80052ce <StartEncoderTask+0xe>
 8005314:	20000278 	.word	0x20000278
 8005318:	42652ee4 	.word	0x42652ee4
 800531c:	42c80000 	.word	0x42c80000
 8005320:	2000027c 	.word	0x2000027c

08005324 <normalize_angle.9860>:

	    static uint8_t is_calibrated = 0;     // Bandera de calibración

	    // Función para normalizar ángulos a 0-360 grados
	    float normalize_angle(float angle)
	    {
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	f8c7 c000 	str.w	ip, [r7]
	        while (angle < 0.0f)
 8005330:	e005      	b.n	800533e <normalize_angle.9860+0x1a>
	            angle += 360.0f;
 8005332:	4910      	ldr	r1, [pc, #64]	; (8005374 <normalize_angle.9860+0x50>)
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7fb fbff 	bl	8000b38 <__addsf3>
 800533a:	4603      	mov	r3, r0
 800533c:	607b      	str	r3, [r7, #4]
	        while (angle < 0.0f)
 800533e:	f04f 0100 	mov.w	r1, #0
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fb fe9e 	bl	8001084 <__aeabi_fcmplt>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f1      	bne.n	8005332 <normalize_angle.9860+0xe>
	        while (angle >= 360.0f)
 800534e:	e005      	b.n	800535c <normalize_angle.9860+0x38>
	            angle -= 360.0f;
 8005350:	4908      	ldr	r1, [pc, #32]	; (8005374 <normalize_angle.9860+0x50>)
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fb fbee 	bl	8000b34 <__aeabi_fsub>
 8005358:	4603      	mov	r3, r0
 800535a:	607b      	str	r3, [r7, #4]
	        while (angle >= 360.0f)
 800535c:	4905      	ldr	r1, [pc, #20]	; (8005374 <normalize_angle.9860+0x50>)
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fb fea4 	bl	80010ac <__aeabi_fcmpge>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f2      	bne.n	8005350 <normalize_angle.9860+0x2c>
	        return angle;
 800536a:	687b      	ldr	r3, [r7, #4]
	    }
 800536c:	4618      	mov	r0, r3
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	43b40000 	.word	0x43b40000

08005378 <StartMPU9250Task>:
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	; 0x28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
void StartMPU9250Task(void const * argument)
 8005380:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005384:	60fb      	str	r3, [r7, #12]
	float gyro_heading = 0.0f;
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	623b      	str	r3, [r7, #32]
	    float mag_heading = 0.0f;
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	61fb      	str	r3, [r7, #28]
	    float current_heading = 0;
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	627b      	str	r3, [r7, #36]	; 0x24

	    for(;;)
	    {
	    	if (current_mode == MODE_AUTONOMOUS)
 8005398:	4b2a      	ldr	r3, [pc, #168]	; (8005444 <StartMPU9250Task+0xcc>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d14c      	bne.n	800543c <StartMPU9250Task+0xc4>
	    	{
	        // COMPASS SENSOR
	        if (MPU9250_dataReady())
 80053a2:	f7fb ff73 	bl	800128c <MPU9250_dataReady>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <StartMPU9250Task+0x4a>
	        {
	            MPU9250_update(UPDATE_COMPASS | UPDATE_ACCEL | UPDATE_GYRO);
 80053ac:	200e      	movs	r0, #14
 80053ae:	f7fb ff86 	bl	80012be <MPU9250_update>

	            if (MPU9250_updateCompass() == INV_SUCCESS)
 80053b2:	f7fc f811 	bl	80013d8 <MPU9250_updateCompass>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <StartMPU9250Task+0x4a>
	            {
	                mag_heading = MPU9250_computeCompassHeading();
 80053bc:	f7fc fb10 	bl	80019e0 <MPU9250_computeCompassHeading>
 80053c0:	61f8      	str	r0, [r7, #28]
	            }
	        }

	        if (MPU9250_fifoAvailable())
 80053c2:	f7fb ff32 	bl	800122a <MPU9250_fifoAvailable>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d037      	beq.n	800543c <StartMPU9250Task+0xc4>
	        {
	            // Usar dmpUpdateFifo para actualizar los valores ax, gx, mx, etc.
	            if (MPU9250_dmpUpdateFifo() == INV_SUCCESS)
 80053cc:	f7fc f8aa 	bl	8001524 <MPU9250_dmpUpdateFifo>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d132      	bne.n	800543c <StartMPU9250Task+0xc4>
	            {


	            	if (!is_calibrated && current_heading != 0 )
 80053d6:	4b1c      	ldr	r3, [pc, #112]	; (8005448 <StartMPU9250Task+0xd0>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10d      	bne.n	80053fa <StartMPU9250Task+0x82>
 80053de:	f04f 0100 	mov.w	r1, #0
 80053e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053e4:	f7fb fe44 	bl	8001070 <__aeabi_fcmpeq>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d105      	bne.n	80053fa <StartMPU9250Task+0x82>
					{
						error_correction = current_heading; // Almacenar el ángulo inicial como 0
 80053ee:	4a17      	ldr	r2, [pc, #92]	; (800544c <StartMPU9250Task+0xd4>)
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	6013      	str	r3, [r2, #0]
						is_calibrated = 1;
 80053f4:	4b14      	ldr	r3, [pc, #80]	; (8005448 <StartMPU9250Task+0xd0>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
					}
	                // computeEulerAngles puede ser usado para estimar roll, pitch y yaw
	                MPU9250_computeEulerAngles(false);
 80053fa:	2000      	movs	r0, #0
 80053fc:	f7fc f958 	bl	80016b0 <MPU9250_computeEulerAngles>
	                gyro_heading = yaw_inside;
 8005400:	4b13      	ldr	r3, [pc, #76]	; (8005450 <StartMPU9250Task+0xd8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	623b      	str	r3, [r7, #32]

	                // Calcular el heading en grados
	                current_heading = gyro_heading * (180.0f / 3.141592f); // Convertir a grados
 8005406:	4913      	ldr	r1, [pc, #76]	; (8005454 <StartMPU9250Task+0xdc>)
 8005408:	6a38      	ldr	r0, [r7, #32]
 800540a:	f7fb fc9d 	bl	8000d48 <__aeabi_fmul>
 800540e:	4603      	mov	r3, r0
 8005410:	627b      	str	r3, [r7, #36]	; 0x24

	                // Ajustar el heading restando el ángulo de calibración
					heading_degree = current_heading - error_correction;
 8005412:	4b0e      	ldr	r3, [pc, #56]	; (800544c <StartMPU9250Task+0xd4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4619      	mov	r1, r3
 8005418:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800541a:	f7fb fb8b 	bl	8000b34 <__aeabi_fsub>
 800541e:	4603      	mov	r3, r0
 8005420:	461a      	mov	r2, r3
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <StartMPU9250Task+0xe0>)
 8005424:	601a      	str	r2, [r3, #0]

					// Normalizar heading_degree a 0-360 grados
					heading_degree = normalize_angle(heading_degree);
 8005426:	4b0c      	ldr	r3, [pc, #48]	; (8005458 <StartMPU9250Task+0xe0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f107 020c 	add.w	r2, r7, #12
 800542e:	4694      	mov	ip, r2
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff ff77 	bl	8005324 <normalize_angle.9860>
 8005436:	4603      	mov	r3, r0
 8005438:	4a07      	ldr	r2, [pc, #28]	; (8005458 <StartMPU9250Task+0xe0>)
 800543a:	6013      	str	r3, [r2, #0]
	        }


	    	}

	        osDelay(10); // Ajusta según la frecuencia deseada (por ejemplo, 10 ms)
 800543c:	200a      	movs	r0, #10
 800543e:	f004 fa41 	bl	80098c4 <osDelay>
	    	if (current_mode == MODE_AUTONOMOUS)
 8005442:	e7a9      	b.n	8005398 <StartMPU9250Task+0x20>
 8005444:	2000028c 	.word	0x2000028c
 8005448:	20000290 	.word	0x20000290
 800544c:	20000270 	.word	0x20000270
 8005450:	20002b40 	.word	0x20002b40
 8005454:	42652ee4 	.word	0x42652ee4
 8005458:	20000268 	.word	0x20000268

0800545c <StartBluetoothTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBluetoothTask */
void StartBluetoothTask(void const * argument)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBluetoothTask */
  /* Infinite loop */
  for(;;)
  {
	  if (current_mode == MODE_AUTONOMOUS)
 8005464:	4b05      	ldr	r3, [pc, #20]	; (800547c <StartBluetoothTask+0x20>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <StartBluetoothTask+0x16>
	        {
	  send_data_over_bluetooth();
 800546e:	f7ff fd59 	bl	8004f24 <send_data_over_bluetooth>
	        }

	  osDelay(100); // Enviar datos cada 100 ms
 8005472:	2064      	movs	r0, #100	; 0x64
 8005474:	f004 fa26 	bl	80098c4 <osDelay>
	  if (current_mode == MODE_AUTONOMOUS)
 8005478:	e7f4      	b.n	8005464 <StartBluetoothTask+0x8>
 800547a:	bf00      	nop
 800547c:	2000028c 	.word	0x2000028c

08005480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005484:	b672      	cpsid	i
}
 8005486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* Usuario puede agregar su propio código para manejar el error */
  __disable_irq();
  while (1)
 8005488:	e7fe      	b.n	8005488 <Error_Handler+0x8>

0800548a <stm32_get_clock_ms>:
#include "stm32_mpu9250_clk.h"

int stm32_get_clock_ms(unsigned long *count)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b082      	sub	sp, #8
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
	*count = HAL_GetTick();
 8005492:	f000 fb9b 	bl	8005bcc <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	601a      	str	r2, [r3, #0]
	return 0;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <stm32_delay_ms>:

int stm32_delay_ms(unsigned long num_ms)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
	HAL_Delay(num_ms);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fb96 	bl	8005be0 <HAL_Delay>
	return 0;
 80054b4:	2300      	movs	r3, #0
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <I2C_ClearBusyFlagErratum>:
    }
    return ret;
}

static void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef* handle, uint32_t timeout)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
    SET_BIT(handle->Instance->CR1, I2C_CR1_PE);
    asm("nop");

    // Call initialization function.
    HAL_I2C_Init(handle)*/
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr
	...

080054d4 <stm32_i2c_write>:

int stm32_i2c_write(unsigned char slave_addr, unsigned char reg_addr,
                       unsigned char length, unsigned char * data)
{
 80054d4:	b5b0      	push	{r4, r5, r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af02      	add	r7, sp, #8
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	4603      	mov	r3, r0
 80054de:	71fb      	strb	r3, [r7, #7]
 80054e0:	460b      	mov	r3, r1
 80054e2:	71bb      	strb	r3, [r7, #6]
 80054e4:	4613      	mov	r3, r2
 80054e6:	717b      	strb	r3, [r7, #5]
 80054e8:	466b      	mov	r3, sp
 80054ea:	461d      	mov	r5, r3
    uint8_t data_for_transmit[length + 1];
 80054ec:	797b      	ldrb	r3, [r7, #5]
 80054ee:	1c5c      	adds	r4, r3, #1
 80054f0:	1e63      	subs	r3, r4, #1
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	4623      	mov	r3, r4
 80054f6:	4618      	mov	r0, r3
 80054f8:	f04f 0100 	mov.w	r1, #0
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	00cb      	lsls	r3, r1, #3
 8005506:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800550a:	00c2      	lsls	r2, r0, #3
 800550c:	4623      	mov	r3, r4
 800550e:	4618      	mov	r0, r3
 8005510:	f04f 0100 	mov.w	r1, #0
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	00cb      	lsls	r3, r1, #3
 800551e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005522:	00c2      	lsls	r2, r0, #3
 8005524:	4623      	mov	r3, r4
 8005526:	3307      	adds	r3, #7
 8005528:	08db      	lsrs	r3, r3, #3
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	ebad 0d03 	sub.w	sp, sp, r3
 8005530:	ab02      	add	r3, sp, #8
 8005532:	3300      	adds	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]

    data_for_transmit[0] = reg_addr;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	79ba      	ldrb	r2, [r7, #6]
 800553a:	701a      	strb	r2, [r3, #0]

    for (unsigned char i = 0; i < length; i++)
 800553c:	2300      	movs	r3, #0
 800553e:	75fb      	strb	r3, [r7, #23]
 8005540:	e00a      	b.n	8005558 <stm32_i2c_write+0x84>
    {
        data_for_transmit[i + 1] = data[i];
 8005542:	7dfb      	ldrb	r3, [r7, #23]
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	441a      	add	r2, r3
 8005548:	7dfb      	ldrb	r3, [r7, #23]
 800554a:	3301      	adds	r3, #1
 800554c:	7811      	ldrb	r1, [r2, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	54d1      	strb	r1, [r2, r3]
    for (unsigned char i = 0; i < length; i++)
 8005552:	7dfb      	ldrb	r3, [r7, #23]
 8005554:	3301      	adds	r3, #1
 8005556:	75fb      	strb	r3, [r7, #23]
 8005558:	7dfa      	ldrb	r2, [r7, #23]
 800555a:	797b      	ldrb	r3, [r7, #5]
 800555c:	429a      	cmp	r2, r3
 800555e:	d3f0      	bcc.n	8005542 <stm32_i2c_write+0x6e>
    }

    HAL_StatusTypeDef ret_V = HAL_I2C_Master_Transmit(&hi2c2, slave_addr << 1, data_for_transmit, (length + 1), 0xff);
 8005560:	79fb      	ldrb	r3, [r7, #7]
 8005562:	b29b      	uxth	r3, r3
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	b299      	uxth	r1, r3
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	797b      	ldrb	r3, [r7, #5]
 800556c:	b29b      	uxth	r3, r3
 800556e:	3301      	adds	r3, #1
 8005570:	b29b      	uxth	r3, r3
 8005572:	20ff      	movs	r0, #255	; 0xff
 8005574:	9000      	str	r0, [sp, #0]
 8005576:	4809      	ldr	r0, [pc, #36]	; (800559c <stm32_i2c_write+0xc8>)
 8005578:	f001 f826 	bl	80065c8 <HAL_I2C_Master_Transmit>
 800557c:	4603      	mov	r3, r0
 800557e:	72fb      	strb	r3, [r7, #11]

    if (ret_V != HAL_OK)
 8005580:	7afb      	ldrb	r3, [r7, #11]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <stm32_i2c_write+0xba>
    {
        I2C_ClearBusyFlagErratum(&hi2c2, 10);
 8005586:	210a      	movs	r1, #10
 8005588:	4804      	ldr	r0, [pc, #16]	; (800559c <stm32_i2c_write+0xc8>)
 800558a:	f7ff ff98 	bl	80054be <I2C_ClearBusyFlagErratum>
    }

    return ret_V;
 800558e:	7afb      	ldrb	r3, [r7, #11]
 8005590:	46ad      	mov	sp, r5
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bdb0      	pop	{r4, r5, r7, pc}
 800559a:	bf00      	nop
 800559c:	20002b70 	.word	0x20002b70

080055a0 <stm32_i2c_read>:

int stm32_i2c_read(unsigned char slave_addr, unsigned char reg_addr,
                       unsigned char length, unsigned char * data)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	4603      	mov	r3, r0
 80055aa:	71fb      	strb	r3, [r7, #7]
 80055ac:	460b      	mov	r3, r1
 80055ae:	71bb      	strb	r3, [r7, #6]
 80055b0:	4613      	mov	r3, r2
 80055b2:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef ret_V = HAL_I2C_Master_Transmit(&hi2c2, slave_addr << 1, &reg_addr, 1, 0xff);
 80055b4:	79fb      	ldrb	r3, [r7, #7]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	b299      	uxth	r1, r3
 80055bc:	1dba      	adds	r2, r7, #6
 80055be:	23ff      	movs	r3, #255	; 0xff
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	2301      	movs	r3, #1
 80055c4:	4813      	ldr	r0, [pc, #76]	; (8005614 <stm32_i2c_read+0x74>)
 80055c6:	f000 ffff 	bl	80065c8 <HAL_I2C_Master_Transmit>
 80055ca:	4603      	mov	r3, r0
 80055cc:	73fb      	strb	r3, [r7, #15]
    if (ret_V != HAL_OK)
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <stm32_i2c_read+0x40>
    {
        I2C_ClearBusyFlagErratum(&hi2c2, 10);
 80055d4:	210a      	movs	r1, #10
 80055d6:	480f      	ldr	r0, [pc, #60]	; (8005614 <stm32_i2c_read+0x74>)
 80055d8:	f7ff ff71 	bl	80054be <I2C_ClearBusyFlagErratum>
        return ret_V;
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
 80055de:	e015      	b.n	800560c <stm32_i2c_read+0x6c>
    }

    ret_V = HAL_I2C_Master_Receive(&hi2c2, slave_addr << 1, data, length, 0xff);
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	b299      	uxth	r1, r3
 80055e8:	797b      	ldrb	r3, [r7, #5]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	22ff      	movs	r2, #255	; 0xff
 80055ee:	9200      	str	r2, [sp, #0]
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	4808      	ldr	r0, [pc, #32]	; (8005614 <stm32_i2c_read+0x74>)
 80055f4:	f001 f8e6 	bl	80067c4 <HAL_I2C_Master_Receive>
 80055f8:	4603      	mov	r3, r0
 80055fa:	73fb      	strb	r3, [r7, #15]

    if (ret_V != HAL_OK)
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <stm32_i2c_read+0x6a>
    {
        I2C_ClearBusyFlagErratum(&hi2c2, 10);
 8005602:	210a      	movs	r1, #10
 8005604:	4803      	ldr	r0, [pc, #12]	; (8005614 <stm32_i2c_read+0x74>)
 8005606:	f7ff ff5a 	bl	80054be <I2C_ClearBusyFlagErratum>
    }

    return ret_V;
 800560a:	7bfb      	ldrb	r3, [r7, #15]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	20002b70 	.word	0x20002b70

08005618 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800561e:	4b18      	ldr	r3, [pc, #96]	; (8005680 <HAL_MspInit+0x68>)
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	4a17      	ldr	r2, [pc, #92]	; (8005680 <HAL_MspInit+0x68>)
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	6193      	str	r3, [r2, #24]
 800562a:	4b15      	ldr	r3, [pc, #84]	; (8005680 <HAL_MspInit+0x68>)
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	60bb      	str	r3, [r7, #8]
 8005634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005636:	4b12      	ldr	r3, [pc, #72]	; (8005680 <HAL_MspInit+0x68>)
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	4a11      	ldr	r2, [pc, #68]	; (8005680 <HAL_MspInit+0x68>)
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005640:	61d3      	str	r3, [r2, #28]
 8005642:	4b0f      	ldr	r3, [pc, #60]	; (8005680 <HAL_MspInit+0x68>)
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564a:	607b      	str	r3, [r7, #4]
 800564c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800564e:	2200      	movs	r2, #0
 8005650:	210f      	movs	r1, #15
 8005652:	f06f 0001 	mvn.w	r0, #1
 8005656:	f000 fbbe 	bl	8005dd6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800565a:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <HAL_MspInit+0x6c>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	4a04      	ldr	r2, [pc, #16]	; (8005684 <HAL_MspInit+0x6c>)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40021000 	.word	0x40021000
 8005684:	40010000 	.word	0x40010000

08005688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005690:	f107 0310 	add.w	r3, r7, #16
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	605a      	str	r2, [r3, #4]
 800569a:	609a      	str	r2, [r3, #8]
 800569c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a16      	ldr	r2, [pc, #88]	; (80056fc <HAL_I2C_MspInit+0x74>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d124      	bne.n	80056f2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056a8:	4b15      	ldr	r3, [pc, #84]	; (8005700 <HAL_I2C_MspInit+0x78>)
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	4a14      	ldr	r2, [pc, #80]	; (8005700 <HAL_I2C_MspInit+0x78>)
 80056ae:	f043 0308 	orr.w	r3, r3, #8
 80056b2:	6193      	str	r3, [r2, #24]
 80056b4:	4b12      	ldr	r3, [pc, #72]	; (8005700 <HAL_I2C_MspInit+0x78>)
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80056c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80056c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056c6:	2312      	movs	r3, #18
 80056c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056ca:	2303      	movs	r3, #3
 80056cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056ce:	f107 0310 	add.w	r3, r7, #16
 80056d2:	4619      	mov	r1, r3
 80056d4:	480b      	ldr	r0, [pc, #44]	; (8005704 <HAL_I2C_MspInit+0x7c>)
 80056d6:	f000 fc67 	bl	8005fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80056da:	4b09      	ldr	r3, [pc, #36]	; (8005700 <HAL_I2C_MspInit+0x78>)
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	4a08      	ldr	r2, [pc, #32]	; (8005700 <HAL_I2C_MspInit+0x78>)
 80056e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056e4:	61d3      	str	r3, [r2, #28]
 80056e6:	4b06      	ldr	r3, [pc, #24]	; (8005700 <HAL_I2C_MspInit+0x78>)
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ee:	60bb      	str	r3, [r7, #8]
 80056f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80056f2:	bf00      	nop
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40005800 	.word	0x40005800
 8005700:	40021000 	.word	0x40021000
 8005704:	40010c00 	.word	0x40010c00

08005708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1b      	ldr	r2, [pc, #108]	; (8005784 <HAL_TIM_Base_MspInit+0x7c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d10c      	bne.n	8005734 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800571a:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <HAL_TIM_Base_MspInit+0x80>)
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	4a1a      	ldr	r2, [pc, #104]	; (8005788 <HAL_TIM_Base_MspInit+0x80>)
 8005720:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005724:	6193      	str	r3, [r2, #24]
 8005726:	4b18      	ldr	r3, [pc, #96]	; (8005788 <HAL_TIM_Base_MspInit+0x80>)
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005732:	e022      	b.n	800577a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573c:	d10c      	bne.n	8005758 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800573e:	4b12      	ldr	r3, [pc, #72]	; (8005788 <HAL_TIM_Base_MspInit+0x80>)
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	4a11      	ldr	r2, [pc, #68]	; (8005788 <HAL_TIM_Base_MspInit+0x80>)
 8005744:	f043 0301 	orr.w	r3, r3, #1
 8005748:	61d3      	str	r3, [r2, #28]
 800574a:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <HAL_TIM_Base_MspInit+0x80>)
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	693b      	ldr	r3, [r7, #16]
}
 8005756:	e010      	b.n	800577a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a0b      	ldr	r2, [pc, #44]	; (800578c <HAL_TIM_Base_MspInit+0x84>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d10b      	bne.n	800577a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005762:	4b09      	ldr	r3, [pc, #36]	; (8005788 <HAL_TIM_Base_MspInit+0x80>)
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	4a08      	ldr	r2, [pc, #32]	; (8005788 <HAL_TIM_Base_MspInit+0x80>)
 8005768:	f043 0302 	orr.w	r3, r3, #2
 800576c:	61d3      	str	r3, [r2, #28]
 800576e:	4b06      	ldr	r3, [pc, #24]	; (8005788 <HAL_TIM_Base_MspInit+0x80>)
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
}
 800577a:	bf00      	nop
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr
 8005784:	40012c00 	.word	0x40012c00
 8005788:	40021000 	.word	0x40021000
 800578c:	40000400 	.word	0x40000400

08005790 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005798:	f107 0310 	add.w	r3, r7, #16
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	605a      	str	r2, [r3, #4]
 80057a2:	609a      	str	r2, [r3, #8]
 80057a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1f      	ldr	r2, [pc, #124]	; (8005828 <HAL_TIM_MspPostInit+0x98>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d119      	bne.n	80057e4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057b0:	4b1e      	ldr	r3, [pc, #120]	; (800582c <HAL_TIM_MspPostInit+0x9c>)
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	4a1d      	ldr	r2, [pc, #116]	; (800582c <HAL_TIM_MspPostInit+0x9c>)
 80057b6:	f043 0304 	orr.w	r3, r3, #4
 80057ba:	6193      	str	r3, [r2, #24]
 80057bc:	4b1b      	ldr	r3, [pc, #108]	; (800582c <HAL_TIM_MspPostInit+0x9c>)
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80057c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ce:	2302      	movs	r3, #2
 80057d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057d2:	2302      	movs	r3, #2
 80057d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057d6:	f107 0310 	add.w	r3, r7, #16
 80057da:	4619      	mov	r1, r3
 80057dc:	4814      	ldr	r0, [pc, #80]	; (8005830 <HAL_TIM_MspPostInit+0xa0>)
 80057de:	f000 fbe3 	bl	8005fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80057e2:	e01c      	b.n	800581e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ec:	d117      	bne.n	800581e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ee:	4b0f      	ldr	r3, [pc, #60]	; (800582c <HAL_TIM_MspPostInit+0x9c>)
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	4a0e      	ldr	r2, [pc, #56]	; (800582c <HAL_TIM_MspPostInit+0x9c>)
 80057f4:	f043 0304 	orr.w	r3, r3, #4
 80057f8:	6193      	str	r3, [r2, #24]
 80057fa:	4b0c      	ldr	r3, [pc, #48]	; (800582c <HAL_TIM_MspPostInit+0x9c>)
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	60bb      	str	r3, [r7, #8]
 8005804:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005806:	2302      	movs	r3, #2
 8005808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800580a:	2302      	movs	r3, #2
 800580c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800580e:	2302      	movs	r3, #2
 8005810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005812:	f107 0310 	add.w	r3, r7, #16
 8005816:	4619      	mov	r1, r3
 8005818:	4805      	ldr	r0, [pc, #20]	; (8005830 <HAL_TIM_MspPostInit+0xa0>)
 800581a:	f000 fbc5 	bl	8005fa8 <HAL_GPIO_Init>
}
 800581e:	bf00      	nop
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40012c00 	.word	0x40012c00
 800582c:	40021000 	.word	0x40021000
 8005830:	40010800 	.word	0x40010800

08005834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800583c:	f107 0310 	add.w	r3, r7, #16
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	605a      	str	r2, [r3, #4]
 8005846:	609a      	str	r2, [r3, #8]
 8005848:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a20      	ldr	r2, [pc, #128]	; (80058d0 <HAL_UART_MspInit+0x9c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d139      	bne.n	80058c8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005854:	4b1f      	ldr	r3, [pc, #124]	; (80058d4 <HAL_UART_MspInit+0xa0>)
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	4a1e      	ldr	r2, [pc, #120]	; (80058d4 <HAL_UART_MspInit+0xa0>)
 800585a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800585e:	6193      	str	r3, [r2, #24]
 8005860:	4b1c      	ldr	r3, [pc, #112]	; (80058d4 <HAL_UART_MspInit+0xa0>)
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800586c:	4b19      	ldr	r3, [pc, #100]	; (80058d4 <HAL_UART_MspInit+0xa0>)
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <HAL_UART_MspInit+0xa0>)
 8005872:	f043 0304 	orr.w	r3, r3, #4
 8005876:	6193      	str	r3, [r2, #24]
 8005878:	4b16      	ldr	r3, [pc, #88]	; (80058d4 <HAL_UART_MspInit+0xa0>)
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	60bb      	str	r3, [r7, #8]
 8005882:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005888:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800588a:	2302      	movs	r3, #2
 800588c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800588e:	2303      	movs	r3, #3
 8005890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005892:	f107 0310 	add.w	r3, r7, #16
 8005896:	4619      	mov	r1, r3
 8005898:	480f      	ldr	r0, [pc, #60]	; (80058d8 <HAL_UART_MspInit+0xa4>)
 800589a:	f000 fb85 	bl	8005fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800589e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058a4:	2300      	movs	r3, #0
 80058a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a8:	2300      	movs	r3, #0
 80058aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ac:	f107 0310 	add.w	r3, r7, #16
 80058b0:	4619      	mov	r1, r3
 80058b2:	4809      	ldr	r0, [pc, #36]	; (80058d8 <HAL_UART_MspInit+0xa4>)
 80058b4:	f000 fb78 	bl	8005fa8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80058b8:	2200      	movs	r2, #0
 80058ba:	2105      	movs	r1, #5
 80058bc:	2025      	movs	r0, #37	; 0x25
 80058be:	f000 fa8a 	bl	8005dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80058c2:	2025      	movs	r0, #37	; 0x25
 80058c4:	f000 faa3 	bl	8005e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80058c8:	bf00      	nop
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40013800 	.word	0x40013800
 80058d4:	40021000 	.word	0x40021000
 80058d8:	40010800 	.word	0x40010800

080058dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80058e0:	e7fe      	b.n	80058e0 <NMI_Handler+0x4>

080058e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058e2:	b480      	push	{r7}
 80058e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058e6:	e7fe      	b.n	80058e6 <HardFault_Handler+0x4>

080058e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058ec:	e7fe      	b.n	80058ec <MemManage_Handler+0x4>

080058ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058ee:	b480      	push	{r7}
 80058f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058f2:	e7fe      	b.n	80058f2 <BusFault_Handler+0x4>

080058f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058f8:	e7fe      	b.n	80058f8 <UsageFault_Handler+0x4>

080058fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058fa:	b480      	push	{r7}
 80058fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058fe:	bf00      	nop
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr

08005906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800590a:	f000 f94d 	bl	8005ba8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800590e:	f004 fd55 	bl	800a3bc <xTaskGetSchedulerState>
 8005912:	4603      	mov	r3, r0
 8005914:	2b01      	cmp	r3, #1
 8005916:	d001      	beq.n	800591c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8005918:	f004 ff46 	bl	800a7a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800591c:	bf00      	nop
 800591e:	bd80      	pop	{r7, pc}

08005920 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005924:	2008      	movs	r0, #8
 8005926:	f000 fcf3 	bl	8006310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800592a:	bf00      	nop
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005934:	4802      	ldr	r0, [pc, #8]	; (8005940 <USART1_IRQHandler+0x10>)
 8005936:	f003 f9f1 	bl	8008d1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800593a:	bf00      	nop
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20002c4c 	.word	0x20002c4c

08005944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800594c:	4a14      	ldr	r2, [pc, #80]	; (80059a0 <_sbrk+0x5c>)
 800594e:	4b15      	ldr	r3, [pc, #84]	; (80059a4 <_sbrk+0x60>)
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005958:	4b13      	ldr	r3, [pc, #76]	; (80059a8 <_sbrk+0x64>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d102      	bne.n	8005966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005960:	4b11      	ldr	r3, [pc, #68]	; (80059a8 <_sbrk+0x64>)
 8005962:	4a12      	ldr	r2, [pc, #72]	; (80059ac <_sbrk+0x68>)
 8005964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005966:	4b10      	ldr	r3, [pc, #64]	; (80059a8 <_sbrk+0x64>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4413      	add	r3, r2
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	429a      	cmp	r2, r3
 8005972:	d207      	bcs.n	8005984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005974:	f005 f948 	bl	800ac08 <__errno>
 8005978:	4603      	mov	r3, r0
 800597a:	220c      	movs	r2, #12
 800597c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800597e:	f04f 33ff 	mov.w	r3, #4294967295
 8005982:	e009      	b.n	8005998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005984:	4b08      	ldr	r3, [pc, #32]	; (80059a8 <_sbrk+0x64>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800598a:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <_sbrk+0x64>)
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4413      	add	r3, r2
 8005992:	4a05      	ldr	r2, [pc, #20]	; (80059a8 <_sbrk+0x64>)
 8005994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005996:	68fb      	ldr	r3, [r7, #12]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20005000 	.word	0x20005000
 80059a4:	00000400 	.word	0x00000400
 80059a8:	20000294 	.word	0x20000294
 80059ac:	20002e30 	.word	0x20002e30

080059b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059b4:	bf00      	nop
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <ultrasonic_init>:

#define timmer htim3 // Reemplaza 'htim3' por el timer que estés utilizando

extern TIM_HandleTypeDef timmer;

void ultrasonic_init(void) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&timmer);
 80059c0:	4804      	ldr	r0, [pc, #16]	; (80059d4 <ultrasonic_init+0x18>)
 80059c2:	f002 fa7d 	bl	8007ec0 <HAL_TIM_Base_Start>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // Poner el trigger en bajo
 80059c6:	2200      	movs	r2, #0
 80059c8:	2140      	movs	r1, #64	; 0x40
 80059ca:	4803      	ldr	r0, [pc, #12]	; (80059d8 <ultrasonic_init+0x1c>)
 80059cc:	f000 fc87 	bl	80062de <HAL_GPIO_WritePin>
}
 80059d0:	bf00      	nop
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	20002bc8 	.word	0x20002bc8
 80059d8:	40010800 	.word	0x40010800
 80059dc:	00000000 	.word	0x00000000

080059e0 <ultrasonic_measure_distance>:

uint16_t ultrasonic_measure_distance(void) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
    uint32_t pMillis = HAL_GetTick();
 80059e6:	f000 f8f1 	bl	8005bcc <HAL_GetTick>
 80059ea:	60f8      	str	r0, [r7, #12]
    uint32_t Value1 = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60bb      	str	r3, [r7, #8]
    uint32_t Value2 = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	607b      	str	r3, [r7, #4]

    uint16_t Distance  = 0;  // cm
 80059f4:	2300      	movs	r3, #0
 80059f6:	807b      	strh	r3, [r7, #2]

    // Generar pulso de trigger
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // Poner el trigger en alto
 80059f8:	2201      	movs	r2, #1
 80059fa:	2140      	movs	r1, #64	; 0x40
 80059fc:	4832      	ldr	r0, [pc, #200]	; (8005ac8 <ultrasonic_measure_distance+0xe8>)
 80059fe:	f000 fc6e 	bl	80062de <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COUNTER(&timmer, 0);
 8005a02:	4b32      	ldr	r3, [pc, #200]	; (8005acc <ultrasonic_measure_distance+0xec>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2200      	movs	r2, #0
 8005a08:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&timmer) < 10);  // Esperar 10 us
 8005a0a:	bf00      	nop
 8005a0c:	4b2f      	ldr	r3, [pc, #188]	; (8005acc <ultrasonic_measure_distance+0xec>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	2b09      	cmp	r3, #9
 8005a14:	d9fa      	bls.n	8005a0c <ultrasonic_measure_distance+0x2c>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // Poner el trigger en bajo nuevamente.
 8005a16:	2200      	movs	r2, #0
 8005a18:	2140      	movs	r1, #64	; 0x40
 8005a1a:	482b      	ldr	r0, [pc, #172]	; (8005ac8 <ultrasonic_measure_distance+0xe8>)
 8005a1c:	f000 fc5f 	bl	80062de <HAL_GPIO_WritePin>

    pMillis = HAL_GetTick();
 8005a20:	f000 f8d4 	bl	8005bcc <HAL_GetTick>
 8005a24:	60f8      	str	r0, [r7, #12]
    // Esperar que el echo reciba el pulso
    while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && (HAL_GetTick() - pMillis) < 10);
 8005a26:	bf00      	nop
 8005a28:	2120      	movs	r1, #32
 8005a2a:	4827      	ldr	r0, [pc, #156]	; (8005ac8 <ultrasonic_measure_distance+0xe8>)
 8005a2c:	f000 fc40 	bl	80062b0 <HAL_GPIO_ReadPin>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <ultrasonic_measure_distance+0x64>
 8005a36:	f000 f8c9 	bl	8005bcc <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b09      	cmp	r3, #9
 8005a42:	d9f1      	bls.n	8005a28 <ultrasonic_measure_distance+0x48>
    Value1 = __HAL_TIM_GET_COUNTER(&timmer);
 8005a44:	4b21      	ldr	r3, [pc, #132]	; (8005acc <ultrasonic_measure_distance+0xec>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	60bb      	str	r3, [r7, #8]

    pMillis = HAL_GetTick();
 8005a4c:	f000 f8be 	bl	8005bcc <HAL_GetTick>
 8005a50:	60f8      	str	r0, [r7, #12]
    // Esperar que el pin echo esté en bajo
    while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && (HAL_GetTick() - pMillis) < 50);
 8005a52:	bf00      	nop
 8005a54:	2120      	movs	r1, #32
 8005a56:	481c      	ldr	r0, [pc, #112]	; (8005ac8 <ultrasonic_measure_distance+0xe8>)
 8005a58:	f000 fc2a 	bl	80062b0 <HAL_GPIO_ReadPin>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d006      	beq.n	8005a70 <ultrasonic_measure_distance+0x90>
 8005a62:	f000 f8b3 	bl	8005bcc <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b31      	cmp	r3, #49	; 0x31
 8005a6e:	d9f1      	bls.n	8005a54 <ultrasonic_measure_distance+0x74>
    Value2 = __HAL_TIM_GET_COUNTER(&timmer);
 8005a70:	4b16      	ldr	r3, [pc, #88]	; (8005acc <ultrasonic_measure_distance+0xec>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	607b      	str	r3, [r7, #4]

    Distance = (Value2 - Value1) * 0.034 / 2; // Calcular distancia en cm
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fa fcba 	bl	80003f8 <__aeabi_ui2d>
 8005a84:	a30e      	add	r3, pc, #56	; (adr r3, 8005ac0 <ultrasonic_measure_distance+0xe0>)
 8005a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8a:	f7fa fd2f 	bl	80004ec <__aeabi_dmul>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4610      	mov	r0, r2
 8005a94:	4619      	mov	r1, r3
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a9e:	f7fa fe4f 	bl	8000740 <__aeabi_ddiv>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	f7fa ffcf 	bl	8000a4c <__aeabi_d2uiz>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	807b      	strh	r3, [r7, #2]
    return Distance;
 8005ab2:	887b      	ldrh	r3, [r7, #2]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	f3af 8000 	nop.w
 8005ac0:	b020c49c 	.word	0xb020c49c
 8005ac4:	3fa16872 	.word	0x3fa16872
 8005ac8:	40010800 	.word	0x40010800
 8005acc:	20002bc8 	.word	0x20002bc8

08005ad0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005ad0:	f7ff ff6e 	bl	80059b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ad4:	480b      	ldr	r0, [pc, #44]	; (8005b04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005ad6:	490c      	ldr	r1, [pc, #48]	; (8005b08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005ad8:	4a0c      	ldr	r2, [pc, #48]	; (8005b0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8005ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005adc:	e002      	b.n	8005ae4 <LoopCopyDataInit>

08005ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ae2:	3304      	adds	r3, #4

08005ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ae8:	d3f9      	bcc.n	8005ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005aea:	4a09      	ldr	r2, [pc, #36]	; (8005b10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005aec:	4c09      	ldr	r4, [pc, #36]	; (8005b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005af0:	e001      	b.n	8005af6 <LoopFillZerobss>

08005af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005af4:	3204      	adds	r2, #4

08005af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005af8:	d3fb      	bcc.n	8005af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005afa:	f005 f88b 	bl	800ac14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005afe:	f7fe fd25 	bl	800454c <main>
  bx lr
 8005b02:	4770      	bx	lr
  ldr r0, =_sdata
 8005b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b08:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8005b0c:	0800e2e8 	.word	0x0800e2e8
  ldr r2, =_sbss
 8005b10:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8005b14:	20002e2c 	.word	0x20002e2c

08005b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005b18:	e7fe      	b.n	8005b18 <ADC1_2_IRQHandler>
	...

08005b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b20:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <HAL_Init+0x28>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a07      	ldr	r2, [pc, #28]	; (8005b44 <HAL_Init+0x28>)
 8005b26:	f043 0310 	orr.w	r3, r3, #16
 8005b2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b2c:	2003      	movs	r0, #3
 8005b2e:	f000 f947 	bl	8005dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b32:	200f      	movs	r0, #15
 8005b34:	f000 f808 	bl	8005b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b38:	f7ff fd6e 	bl	8005618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40022000 	.word	0x40022000

08005b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b50:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <HAL_InitTick+0x54>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <HAL_InitTick+0x58>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f95f 	bl	8005e2a <HAL_SYSTICK_Config>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e00e      	b.n	8005b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b0f      	cmp	r3, #15
 8005b7a:	d80a      	bhi.n	8005b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	f04f 30ff 	mov.w	r0, #4294967295
 8005b84:	f000 f927 	bl	8005dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b88:	4a06      	ldr	r2, [pc, #24]	; (8005ba4 <HAL_InitTick+0x5c>)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	e000      	b.n	8005b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20000048 	.word	0x20000048
 8005ba0:	20000050 	.word	0x20000050
 8005ba4:	2000004c 	.word	0x2000004c

08005ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <HAL_IncTick+0x1c>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <HAL_IncTick+0x20>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	4a03      	ldr	r2, [pc, #12]	; (8005bc8 <HAL_IncTick+0x20>)
 8005bba:	6013      	str	r3, [r2, #0]
}
 8005bbc:	bf00      	nop
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr
 8005bc4:	20000050 	.word	0x20000050
 8005bc8:	20002e18 	.word	0x20002e18

08005bcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  return uwTick;
 8005bd0:	4b02      	ldr	r3, [pc, #8]	; (8005bdc <HAL_GetTick+0x10>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr
 8005bdc:	20002e18 	.word	0x20002e18

08005be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005be8:	f7ff fff0 	bl	8005bcc <HAL_GetTick>
 8005bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf8:	d005      	beq.n	8005c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <HAL_Delay+0x44>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c06:	bf00      	nop
 8005c08:	f7ff ffe0 	bl	8005bcc <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d8f7      	bhi.n	8005c08 <HAL_Delay+0x28>
  {
  }
}
 8005c18:	bf00      	nop
 8005c1a:	bf00      	nop
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	20000050 	.word	0x20000050

08005c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c38:	4b0c      	ldr	r3, [pc, #48]	; (8005c6c <__NVIC_SetPriorityGrouping+0x44>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c44:	4013      	ands	r3, r2
 8005c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c5a:	4a04      	ldr	r2, [pc, #16]	; (8005c6c <__NVIC_SetPriorityGrouping+0x44>)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	60d3      	str	r3, [r2, #12]
}
 8005c60:	bf00      	nop
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	e000ed00 	.word	0xe000ed00

08005c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c74:	4b04      	ldr	r3, [pc, #16]	; (8005c88 <__NVIC_GetPriorityGrouping+0x18>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	0a1b      	lsrs	r3, r3, #8
 8005c7a:	f003 0307 	and.w	r3, r3, #7
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bc80      	pop	{r7}
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	e000ed00 	.word	0xe000ed00

08005c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	db0b      	blt.n	8005cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	f003 021f 	and.w	r2, r3, #31
 8005ca4:	4906      	ldr	r1, [pc, #24]	; (8005cc0 <__NVIC_EnableIRQ+0x34>)
 8005ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	2001      	movs	r0, #1
 8005cae:	fa00 f202 	lsl.w	r2, r0, r2
 8005cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr
 8005cc0:	e000e100 	.word	0xe000e100

08005cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	6039      	str	r1, [r7, #0]
 8005cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	db0a      	blt.n	8005cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	490c      	ldr	r1, [pc, #48]	; (8005d10 <__NVIC_SetPriority+0x4c>)
 8005cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ce2:	0112      	lsls	r2, r2, #4
 8005ce4:	b2d2      	uxtb	r2, r2
 8005ce6:	440b      	add	r3, r1
 8005ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005cec:	e00a      	b.n	8005d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	4908      	ldr	r1, [pc, #32]	; (8005d14 <__NVIC_SetPriority+0x50>)
 8005cf4:	79fb      	ldrb	r3, [r7, #7]
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	3b04      	subs	r3, #4
 8005cfc:	0112      	lsls	r2, r2, #4
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	440b      	add	r3, r1
 8005d02:	761a      	strb	r2, [r3, #24]
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	e000e100 	.word	0xe000e100
 8005d14:	e000ed00 	.word	0xe000ed00

08005d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b089      	sub	sp, #36	; 0x24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f003 0307 	and.w	r3, r3, #7
 8005d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f1c3 0307 	rsb	r3, r3, #7
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	bf28      	it	cs
 8005d36:	2304      	movcs	r3, #4
 8005d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	2b06      	cmp	r3, #6
 8005d40:	d902      	bls.n	8005d48 <NVIC_EncodePriority+0x30>
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	3b03      	subs	r3, #3
 8005d46:	e000      	b.n	8005d4a <NVIC_EncodePriority+0x32>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	fa02 f303 	lsl.w	r3, r2, r3
 8005d56:	43da      	mvns	r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	401a      	ands	r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d60:	f04f 31ff 	mov.w	r1, #4294967295
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	fa01 f303 	lsl.w	r3, r1, r3
 8005d6a:	43d9      	mvns	r1, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d70:	4313      	orrs	r3, r2
         );
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3724      	adds	r7, #36	; 0x24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr

08005d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d8c:	d301      	bcc.n	8005d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e00f      	b.n	8005db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d92:	4a0a      	ldr	r2, [pc, #40]	; (8005dbc <SysTick_Config+0x40>)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d9a:	210f      	movs	r1, #15
 8005d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005da0:	f7ff ff90 	bl	8005cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005da4:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <SysTick_Config+0x40>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005daa:	4b04      	ldr	r3, [pc, #16]	; (8005dbc <SysTick_Config+0x40>)
 8005dac:	2207      	movs	r2, #7
 8005dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	e000e010 	.word	0xe000e010

08005dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff ff2d 	bl	8005c28 <__NVIC_SetPriorityGrouping>
}
 8005dce:	bf00      	nop
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b086      	sub	sp, #24
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	4603      	mov	r3, r0
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	607a      	str	r2, [r7, #4]
 8005de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005de8:	f7ff ff42 	bl	8005c70 <__NVIC_GetPriorityGrouping>
 8005dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	68b9      	ldr	r1, [r7, #8]
 8005df2:	6978      	ldr	r0, [r7, #20]
 8005df4:	f7ff ff90 	bl	8005d18 <NVIC_EncodePriority>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dfe:	4611      	mov	r1, r2
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff ff5f 	bl	8005cc4 <__NVIC_SetPriority>
}
 8005e06:	bf00      	nop
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	4603      	mov	r3, r0
 8005e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff ff35 	bl	8005c8c <__NVIC_EnableIRQ>
}
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff ffa2 	bl	8005d7c <SysTick_Config>
 8005e38:	4603      	mov	r3, r0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b085      	sub	sp, #20
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d008      	beq.n	8005e6c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2204      	movs	r2, #4
 8005e5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e020      	b.n	8005eae <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 020e 	bic.w	r2, r2, #14
 8005e7a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0201 	bic.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e94:	2101      	movs	r1, #1
 8005e96:	fa01 f202 	lsl.w	r2, r1, r2
 8005e9a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d005      	beq.n	8005edc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2204      	movs	r2, #4
 8005ed4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]
 8005eda:	e051      	b.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 020e 	bic.w	r2, r2, #14
 8005eea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0201 	bic.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a22      	ldr	r2, [pc, #136]	; (8005f8c <HAL_DMA_Abort_IT+0xd4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d029      	beq.n	8005f5a <HAL_DMA_Abort_IT+0xa2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a21      	ldr	r2, [pc, #132]	; (8005f90 <HAL_DMA_Abort_IT+0xd8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d022      	beq.n	8005f56 <HAL_DMA_Abort_IT+0x9e>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1f      	ldr	r2, [pc, #124]	; (8005f94 <HAL_DMA_Abort_IT+0xdc>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d01a      	beq.n	8005f50 <HAL_DMA_Abort_IT+0x98>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1e      	ldr	r2, [pc, #120]	; (8005f98 <HAL_DMA_Abort_IT+0xe0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d012      	beq.n	8005f4a <HAL_DMA_Abort_IT+0x92>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1c      	ldr	r2, [pc, #112]	; (8005f9c <HAL_DMA_Abort_IT+0xe4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00a      	beq.n	8005f44 <HAL_DMA_Abort_IT+0x8c>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a1b      	ldr	r2, [pc, #108]	; (8005fa0 <HAL_DMA_Abort_IT+0xe8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d102      	bne.n	8005f3e <HAL_DMA_Abort_IT+0x86>
 8005f38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005f3c:	e00e      	b.n	8005f5c <HAL_DMA_Abort_IT+0xa4>
 8005f3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f42:	e00b      	b.n	8005f5c <HAL_DMA_Abort_IT+0xa4>
 8005f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f48:	e008      	b.n	8005f5c <HAL_DMA_Abort_IT+0xa4>
 8005f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f4e:	e005      	b.n	8005f5c <HAL_DMA_Abort_IT+0xa4>
 8005f50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f54:	e002      	b.n	8005f5c <HAL_DMA_Abort_IT+0xa4>
 8005f56:	2310      	movs	r3, #16
 8005f58:	e000      	b.n	8005f5c <HAL_DMA_Abort_IT+0xa4>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	4a11      	ldr	r2, [pc, #68]	; (8005fa4 <HAL_DMA_Abort_IT+0xec>)
 8005f5e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	4798      	blx	r3
    } 
  }
  return status;
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	40020008 	.word	0x40020008
 8005f90:	4002001c 	.word	0x4002001c
 8005f94:	40020030 	.word	0x40020030
 8005f98:	40020044 	.word	0x40020044
 8005f9c:	40020058 	.word	0x40020058
 8005fa0:	4002006c 	.word	0x4002006c
 8005fa4:	40020000 	.word	0x40020000

08005fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b08b      	sub	sp, #44	; 0x2c
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fba:	e169      	b.n	8006290 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	f040 8158 	bne.w	800628a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	4a9a      	ldr	r2, [pc, #616]	; (8006248 <HAL_GPIO_Init+0x2a0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d05e      	beq.n	80060a2 <HAL_GPIO_Init+0xfa>
 8005fe4:	4a98      	ldr	r2, [pc, #608]	; (8006248 <HAL_GPIO_Init+0x2a0>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d875      	bhi.n	80060d6 <HAL_GPIO_Init+0x12e>
 8005fea:	4a98      	ldr	r2, [pc, #608]	; (800624c <HAL_GPIO_Init+0x2a4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d058      	beq.n	80060a2 <HAL_GPIO_Init+0xfa>
 8005ff0:	4a96      	ldr	r2, [pc, #600]	; (800624c <HAL_GPIO_Init+0x2a4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d86f      	bhi.n	80060d6 <HAL_GPIO_Init+0x12e>
 8005ff6:	4a96      	ldr	r2, [pc, #600]	; (8006250 <HAL_GPIO_Init+0x2a8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d052      	beq.n	80060a2 <HAL_GPIO_Init+0xfa>
 8005ffc:	4a94      	ldr	r2, [pc, #592]	; (8006250 <HAL_GPIO_Init+0x2a8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d869      	bhi.n	80060d6 <HAL_GPIO_Init+0x12e>
 8006002:	4a94      	ldr	r2, [pc, #592]	; (8006254 <HAL_GPIO_Init+0x2ac>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d04c      	beq.n	80060a2 <HAL_GPIO_Init+0xfa>
 8006008:	4a92      	ldr	r2, [pc, #584]	; (8006254 <HAL_GPIO_Init+0x2ac>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d863      	bhi.n	80060d6 <HAL_GPIO_Init+0x12e>
 800600e:	4a92      	ldr	r2, [pc, #584]	; (8006258 <HAL_GPIO_Init+0x2b0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d046      	beq.n	80060a2 <HAL_GPIO_Init+0xfa>
 8006014:	4a90      	ldr	r2, [pc, #576]	; (8006258 <HAL_GPIO_Init+0x2b0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d85d      	bhi.n	80060d6 <HAL_GPIO_Init+0x12e>
 800601a:	2b12      	cmp	r3, #18
 800601c:	d82a      	bhi.n	8006074 <HAL_GPIO_Init+0xcc>
 800601e:	2b12      	cmp	r3, #18
 8006020:	d859      	bhi.n	80060d6 <HAL_GPIO_Init+0x12e>
 8006022:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <HAL_GPIO_Init+0x80>)
 8006024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006028:	080060a3 	.word	0x080060a3
 800602c:	0800607d 	.word	0x0800607d
 8006030:	0800608f 	.word	0x0800608f
 8006034:	080060d1 	.word	0x080060d1
 8006038:	080060d7 	.word	0x080060d7
 800603c:	080060d7 	.word	0x080060d7
 8006040:	080060d7 	.word	0x080060d7
 8006044:	080060d7 	.word	0x080060d7
 8006048:	080060d7 	.word	0x080060d7
 800604c:	080060d7 	.word	0x080060d7
 8006050:	080060d7 	.word	0x080060d7
 8006054:	080060d7 	.word	0x080060d7
 8006058:	080060d7 	.word	0x080060d7
 800605c:	080060d7 	.word	0x080060d7
 8006060:	080060d7 	.word	0x080060d7
 8006064:	080060d7 	.word	0x080060d7
 8006068:	080060d7 	.word	0x080060d7
 800606c:	08006085 	.word	0x08006085
 8006070:	08006099 	.word	0x08006099
 8006074:	4a79      	ldr	r2, [pc, #484]	; (800625c <HAL_GPIO_Init+0x2b4>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800607a:	e02c      	b.n	80060d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	623b      	str	r3, [r7, #32]
          break;
 8006082:	e029      	b.n	80060d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	3304      	adds	r3, #4
 800608a:	623b      	str	r3, [r7, #32]
          break;
 800608c:	e024      	b.n	80060d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	3308      	adds	r3, #8
 8006094:	623b      	str	r3, [r7, #32]
          break;
 8006096:	e01f      	b.n	80060d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	330c      	adds	r3, #12
 800609e:	623b      	str	r3, [r7, #32]
          break;
 80060a0:	e01a      	b.n	80060d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d102      	bne.n	80060b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80060aa:	2304      	movs	r3, #4
 80060ac:	623b      	str	r3, [r7, #32]
          break;
 80060ae:	e013      	b.n	80060d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d105      	bne.n	80060c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060b8:	2308      	movs	r3, #8
 80060ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	69fa      	ldr	r2, [r7, #28]
 80060c0:	611a      	str	r2, [r3, #16]
          break;
 80060c2:	e009      	b.n	80060d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060c4:	2308      	movs	r3, #8
 80060c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	615a      	str	r2, [r3, #20]
          break;
 80060ce:	e003      	b.n	80060d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80060d0:	2300      	movs	r3, #0
 80060d2:	623b      	str	r3, [r7, #32]
          break;
 80060d4:	e000      	b.n	80060d8 <HAL_GPIO_Init+0x130>
          break;
 80060d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2bff      	cmp	r3, #255	; 0xff
 80060dc:	d801      	bhi.n	80060e2 <HAL_GPIO_Init+0x13a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	e001      	b.n	80060e6 <HAL_GPIO_Init+0x13e>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3304      	adds	r3, #4
 80060e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	2bff      	cmp	r3, #255	; 0xff
 80060ec:	d802      	bhi.n	80060f4 <HAL_GPIO_Init+0x14c>
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	e002      	b.n	80060fa <HAL_GPIO_Init+0x152>
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	3b08      	subs	r3, #8
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	210f      	movs	r1, #15
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	fa01 f303 	lsl.w	r3, r1, r3
 8006108:	43db      	mvns	r3, r3
 800610a:	401a      	ands	r2, r3
 800610c:	6a39      	ldr	r1, [r7, #32]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	fa01 f303 	lsl.w	r3, r1, r3
 8006114:	431a      	orrs	r2, r3
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 80b1 	beq.w	800628a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006128:	4b4d      	ldr	r3, [pc, #308]	; (8006260 <HAL_GPIO_Init+0x2b8>)
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	4a4c      	ldr	r2, [pc, #304]	; (8006260 <HAL_GPIO_Init+0x2b8>)
 800612e:	f043 0301 	orr.w	r3, r3, #1
 8006132:	6193      	str	r3, [r2, #24]
 8006134:	4b4a      	ldr	r3, [pc, #296]	; (8006260 <HAL_GPIO_Init+0x2b8>)
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006140:	4a48      	ldr	r2, [pc, #288]	; (8006264 <HAL_GPIO_Init+0x2bc>)
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	089b      	lsrs	r3, r3, #2
 8006146:	3302      	adds	r3, #2
 8006148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800614c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	f003 0303 	and.w	r3, r3, #3
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	220f      	movs	r2, #15
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	43db      	mvns	r3, r3
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4013      	ands	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a40      	ldr	r2, [pc, #256]	; (8006268 <HAL_GPIO_Init+0x2c0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d013      	beq.n	8006194 <HAL_GPIO_Init+0x1ec>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a3f      	ldr	r2, [pc, #252]	; (800626c <HAL_GPIO_Init+0x2c4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00d      	beq.n	8006190 <HAL_GPIO_Init+0x1e8>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a3e      	ldr	r2, [pc, #248]	; (8006270 <HAL_GPIO_Init+0x2c8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d007      	beq.n	800618c <HAL_GPIO_Init+0x1e4>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a3d      	ldr	r2, [pc, #244]	; (8006274 <HAL_GPIO_Init+0x2cc>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d101      	bne.n	8006188 <HAL_GPIO_Init+0x1e0>
 8006184:	2303      	movs	r3, #3
 8006186:	e006      	b.n	8006196 <HAL_GPIO_Init+0x1ee>
 8006188:	2304      	movs	r3, #4
 800618a:	e004      	b.n	8006196 <HAL_GPIO_Init+0x1ee>
 800618c:	2302      	movs	r3, #2
 800618e:	e002      	b.n	8006196 <HAL_GPIO_Init+0x1ee>
 8006190:	2301      	movs	r3, #1
 8006192:	e000      	b.n	8006196 <HAL_GPIO_Init+0x1ee>
 8006194:	2300      	movs	r3, #0
 8006196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006198:	f002 0203 	and.w	r2, r2, #3
 800619c:	0092      	lsls	r2, r2, #2
 800619e:	4093      	lsls	r3, r2
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80061a6:	492f      	ldr	r1, [pc, #188]	; (8006264 <HAL_GPIO_Init+0x2bc>)
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	089b      	lsrs	r3, r3, #2
 80061ac:	3302      	adds	r3, #2
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d006      	beq.n	80061ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80061c0:	4b2d      	ldr	r3, [pc, #180]	; (8006278 <HAL_GPIO_Init+0x2d0>)
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	492c      	ldr	r1, [pc, #176]	; (8006278 <HAL_GPIO_Init+0x2d0>)
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	608b      	str	r3, [r1, #8]
 80061cc:	e006      	b.n	80061dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80061ce:	4b2a      	ldr	r3, [pc, #168]	; (8006278 <HAL_GPIO_Init+0x2d0>)
 80061d0:	689a      	ldr	r2, [r3, #8]
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	43db      	mvns	r3, r3
 80061d6:	4928      	ldr	r1, [pc, #160]	; (8006278 <HAL_GPIO_Init+0x2d0>)
 80061d8:	4013      	ands	r3, r2
 80061da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d006      	beq.n	80061f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80061e8:	4b23      	ldr	r3, [pc, #140]	; (8006278 <HAL_GPIO_Init+0x2d0>)
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	4922      	ldr	r1, [pc, #136]	; (8006278 <HAL_GPIO_Init+0x2d0>)
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60cb      	str	r3, [r1, #12]
 80061f4:	e006      	b.n	8006204 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80061f6:	4b20      	ldr	r3, [pc, #128]	; (8006278 <HAL_GPIO_Init+0x2d0>)
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	43db      	mvns	r3, r3
 80061fe:	491e      	ldr	r1, [pc, #120]	; (8006278 <HAL_GPIO_Init+0x2d0>)
 8006200:	4013      	ands	r3, r2
 8006202:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d006      	beq.n	800621e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006210:	4b19      	ldr	r3, [pc, #100]	; (8006278 <HAL_GPIO_Init+0x2d0>)
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	4918      	ldr	r1, [pc, #96]	; (8006278 <HAL_GPIO_Init+0x2d0>)
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	4313      	orrs	r3, r2
 800621a:	604b      	str	r3, [r1, #4]
 800621c:	e006      	b.n	800622c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800621e:	4b16      	ldr	r3, [pc, #88]	; (8006278 <HAL_GPIO_Init+0x2d0>)
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	43db      	mvns	r3, r3
 8006226:	4914      	ldr	r1, [pc, #80]	; (8006278 <HAL_GPIO_Init+0x2d0>)
 8006228:	4013      	ands	r3, r2
 800622a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d021      	beq.n	800627c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006238:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <HAL_GPIO_Init+0x2d0>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	490e      	ldr	r1, [pc, #56]	; (8006278 <HAL_GPIO_Init+0x2d0>)
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	4313      	orrs	r3, r2
 8006242:	600b      	str	r3, [r1, #0]
 8006244:	e021      	b.n	800628a <HAL_GPIO_Init+0x2e2>
 8006246:	bf00      	nop
 8006248:	10320000 	.word	0x10320000
 800624c:	10310000 	.word	0x10310000
 8006250:	10220000 	.word	0x10220000
 8006254:	10210000 	.word	0x10210000
 8006258:	10120000 	.word	0x10120000
 800625c:	10110000 	.word	0x10110000
 8006260:	40021000 	.word	0x40021000
 8006264:	40010000 	.word	0x40010000
 8006268:	40010800 	.word	0x40010800
 800626c:	40010c00 	.word	0x40010c00
 8006270:	40011000 	.word	0x40011000
 8006274:	40011400 	.word	0x40011400
 8006278:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800627c:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <HAL_GPIO_Init+0x304>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	43db      	mvns	r3, r3
 8006284:	4909      	ldr	r1, [pc, #36]	; (80062ac <HAL_GPIO_Init+0x304>)
 8006286:	4013      	ands	r3, r2
 8006288:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	3301      	adds	r3, #1
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	fa22 f303 	lsr.w	r3, r2, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	f47f ae8e 	bne.w	8005fbc <HAL_GPIO_Init+0x14>
  }
}
 80062a0:	bf00      	nop
 80062a2:	bf00      	nop
 80062a4:	372c      	adds	r7, #44	; 0x2c
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bc80      	pop	{r7}
 80062aa:	4770      	bx	lr
 80062ac:	40010400 	.word	0x40010400

080062b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	887b      	ldrh	r3, [r7, #2]
 80062c2:	4013      	ands	r3, r2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062c8:	2301      	movs	r3, #1
 80062ca:	73fb      	strb	r3, [r7, #15]
 80062cc:	e001      	b.n	80062d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062ce:	2300      	movs	r3, #0
 80062d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	bc80      	pop	{r7}
 80062dc:	4770      	bx	lr

080062de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	460b      	mov	r3, r1
 80062e8:	807b      	strh	r3, [r7, #2]
 80062ea:	4613      	mov	r3, r2
 80062ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062ee:	787b      	ldrb	r3, [r7, #1]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062f4:	887a      	ldrh	r2, [r7, #2]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80062fa:	e003      	b.n	8006304 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80062fc:	887b      	ldrh	r3, [r7, #2]
 80062fe:	041a      	lsls	r2, r3, #16
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	611a      	str	r2, [r3, #16]
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	bc80      	pop	{r7}
 800630c:	4770      	bx	lr
	...

08006310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	4603      	mov	r3, r0
 8006318:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800631a:	4b08      	ldr	r3, [pc, #32]	; (800633c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800631c:	695a      	ldr	r2, [r3, #20]
 800631e:	88fb      	ldrh	r3, [r7, #6]
 8006320:	4013      	ands	r3, r2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d006      	beq.n	8006334 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006326:	4a05      	ldr	r2, [pc, #20]	; (800633c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006328:	88fb      	ldrh	r3, [r7, #6]
 800632a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe f8ae 	bl	8004490 <HAL_GPIO_EXTI_Callback>
  }
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	40010400 	.word	0x40010400

08006340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e12b      	b.n	80065aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d106      	bne.n	800636c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff f98e 	bl	8005688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2224      	movs	r2, #36	; 0x24
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0201 	bic.w	r2, r2, #1
 8006382:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006392:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063a4:	f001 fcf6 	bl	8007d94 <HAL_RCC_GetPCLK1Freq>
 80063a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	4a81      	ldr	r2, [pc, #516]	; (80065b4 <HAL_I2C_Init+0x274>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d807      	bhi.n	80063c4 <HAL_I2C_Init+0x84>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4a80      	ldr	r2, [pc, #512]	; (80065b8 <HAL_I2C_Init+0x278>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	bf94      	ite	ls
 80063bc:	2301      	movls	r3, #1
 80063be:	2300      	movhi	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	e006      	b.n	80063d2 <HAL_I2C_Init+0x92>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4a7d      	ldr	r2, [pc, #500]	; (80065bc <HAL_I2C_Init+0x27c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	bf94      	ite	ls
 80063cc:	2301      	movls	r3, #1
 80063ce:	2300      	movhi	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e0e7      	b.n	80065aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4a78      	ldr	r2, [pc, #480]	; (80065c0 <HAL_I2C_Init+0x280>)
 80063de:	fba2 2303 	umull	r2, r3, r2, r3
 80063e2:	0c9b      	lsrs	r3, r3, #18
 80063e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	4a6a      	ldr	r2, [pc, #424]	; (80065b4 <HAL_I2C_Init+0x274>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d802      	bhi.n	8006414 <HAL_I2C_Init+0xd4>
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	3301      	adds	r3, #1
 8006412:	e009      	b.n	8006428 <HAL_I2C_Init+0xe8>
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800641a:	fb02 f303 	mul.w	r3, r2, r3
 800641e:	4a69      	ldr	r2, [pc, #420]	; (80065c4 <HAL_I2C_Init+0x284>)
 8006420:	fba2 2303 	umull	r2, r3, r2, r3
 8006424:	099b      	lsrs	r3, r3, #6
 8006426:	3301      	adds	r3, #1
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6812      	ldr	r2, [r2, #0]
 800642c:	430b      	orrs	r3, r1
 800642e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800643a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	495c      	ldr	r1, [pc, #368]	; (80065b4 <HAL_I2C_Init+0x274>)
 8006444:	428b      	cmp	r3, r1
 8006446:	d819      	bhi.n	800647c <HAL_I2C_Init+0x13c>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	1e59      	subs	r1, r3, #1
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	fbb1 f3f3 	udiv	r3, r1, r3
 8006456:	1c59      	adds	r1, r3, #1
 8006458:	f640 73fc 	movw	r3, #4092	; 0xffc
 800645c:	400b      	ands	r3, r1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HAL_I2C_Init+0x138>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	1e59      	subs	r1, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006470:	3301      	adds	r3, #1
 8006472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006476:	e051      	b.n	800651c <HAL_I2C_Init+0x1dc>
 8006478:	2304      	movs	r3, #4
 800647a:	e04f      	b.n	800651c <HAL_I2C_Init+0x1dc>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d111      	bne.n	80064a8 <HAL_I2C_Init+0x168>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	1e58      	subs	r0, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6859      	ldr	r1, [r3, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	440b      	add	r3, r1
 8006492:	fbb0 f3f3 	udiv	r3, r0, r3
 8006496:	3301      	adds	r3, #1
 8006498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800649c:	2b00      	cmp	r3, #0
 800649e:	bf0c      	ite	eq
 80064a0:	2301      	moveq	r3, #1
 80064a2:	2300      	movne	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	e012      	b.n	80064ce <HAL_I2C_Init+0x18e>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	1e58      	subs	r0, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6859      	ldr	r1, [r3, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	440b      	add	r3, r1
 80064b6:	0099      	lsls	r1, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80064be:	3301      	adds	r3, #1
 80064c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bf0c      	ite	eq
 80064c8:	2301      	moveq	r3, #1
 80064ca:	2300      	movne	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <HAL_I2C_Init+0x196>
 80064d2:	2301      	movs	r3, #1
 80064d4:	e022      	b.n	800651c <HAL_I2C_Init+0x1dc>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10e      	bne.n	80064fc <HAL_I2C_Init+0x1bc>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	1e58      	subs	r0, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6859      	ldr	r1, [r3, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	440b      	add	r3, r1
 80064ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80064f0:	3301      	adds	r3, #1
 80064f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064fa:	e00f      	b.n	800651c <HAL_I2C_Init+0x1dc>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	1e58      	subs	r0, r3, #1
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6859      	ldr	r1, [r3, #4]
 8006504:	460b      	mov	r3, r1
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	440b      	add	r3, r1
 800650a:	0099      	lsls	r1, r3, #2
 800650c:	440b      	add	r3, r1
 800650e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006512:	3301      	adds	r3, #1
 8006514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006518:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	6809      	ldr	r1, [r1, #0]
 8006520:	4313      	orrs	r3, r2
 8006522:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69da      	ldr	r2, [r3, #28]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800654a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6911      	ldr	r1, [r2, #16]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	68d2      	ldr	r2, [r2, #12]
 8006556:	4311      	orrs	r1, r2
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6812      	ldr	r2, [r2, #0]
 800655c:	430b      	orrs	r3, r1
 800655e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	695a      	ldr	r2, [r3, #20]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0201 	orr.w	r2, r2, #1
 800658a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2220      	movs	r2, #32
 8006596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	000186a0 	.word	0x000186a0
 80065b8:	001e847f 	.word	0x001e847f
 80065bc:	003d08ff 	.word	0x003d08ff
 80065c0:	431bde83 	.word	0x431bde83
 80065c4:	10624dd3 	.word	0x10624dd3

080065c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af02      	add	r7, sp, #8
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	607a      	str	r2, [r7, #4]
 80065d2:	461a      	mov	r2, r3
 80065d4:	460b      	mov	r3, r1
 80065d6:	817b      	strh	r3, [r7, #10]
 80065d8:	4613      	mov	r3, r2
 80065da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065dc:	f7ff faf6 	bl	8005bcc <HAL_GetTick>
 80065e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	f040 80e0 	bne.w	80067b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	2319      	movs	r3, #25
 80065f6:	2201      	movs	r2, #1
 80065f8:	4970      	ldr	r1, [pc, #448]	; (80067bc <HAL_I2C_Master_Transmit+0x1f4>)
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 fdcc 	bl	8007198 <I2C_WaitOnFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006606:	2302      	movs	r3, #2
 8006608:	e0d3      	b.n	80067b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006610:	2b01      	cmp	r3, #1
 8006612:	d101      	bne.n	8006618 <HAL_I2C_Master_Transmit+0x50>
 8006614:	2302      	movs	r3, #2
 8006616:	e0cc      	b.n	80067b2 <HAL_I2C_Master_Transmit+0x1ea>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b01      	cmp	r3, #1
 800662c:	d007      	beq.n	800663e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0201 	orr.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800664c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2221      	movs	r2, #33	; 0x21
 8006652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2210      	movs	r2, #16
 800665a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	893a      	ldrh	r2, [r7, #8]
 800666e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006674:	b29a      	uxth	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4a50      	ldr	r2, [pc, #320]	; (80067c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800667e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006680:	8979      	ldrh	r1, [r7, #10]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	6a3a      	ldr	r2, [r7, #32]
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f000 fc36 	bl	8006ef8 <I2C_MasterRequestWrite>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e08d      	b.n	80067b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006696:	2300      	movs	r3, #0
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80066ac:	e066      	b.n	800677c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	6a39      	ldr	r1, [r7, #32]
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 fe8a 	bl	80073cc <I2C_WaitOnTXEFlagUntilTimeout>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00d      	beq.n	80066da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d107      	bne.n	80066d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e06b      	b.n	80067b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	781a      	ldrb	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006702:	3b01      	subs	r3, #1
 8006704:	b29a      	uxth	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b04      	cmp	r3, #4
 8006716:	d11b      	bne.n	8006750 <HAL_I2C_Master_Transmit+0x188>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671c:	2b00      	cmp	r3, #0
 800671e:	d017      	beq.n	8006750 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	781a      	ldrb	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	6a39      	ldr	r1, [r7, #32]
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 fe81 	bl	800745c <I2C_WaitOnBTFFlagUntilTimeout>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00d      	beq.n	800677c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006764:	2b04      	cmp	r3, #4
 8006766:	d107      	bne.n	8006778 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006776:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e01a      	b.n	80067b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006780:	2b00      	cmp	r3, #0
 8006782:	d194      	bne.n	80066ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	e000      	b.n	80067b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80067b0:	2302      	movs	r3, #2
  }
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	00100002 	.word	0x00100002
 80067c0:	ffff0000 	.word	0xffff0000

080067c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08c      	sub	sp, #48	; 0x30
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	607a      	str	r2, [r7, #4]
 80067ce:	461a      	mov	r2, r3
 80067d0:	460b      	mov	r3, r1
 80067d2:	817b      	strh	r3, [r7, #10]
 80067d4:	4613      	mov	r3, r2
 80067d6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067dc:	f7ff f9f6 	bl	8005bcc <HAL_GetTick>
 80067e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b20      	cmp	r3, #32
 80067ec:	f040 824b 	bne.w	8006c86 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	2319      	movs	r3, #25
 80067f6:	2201      	movs	r2, #1
 80067f8:	497f      	ldr	r1, [pc, #508]	; (80069f8 <HAL_I2C_Master_Receive+0x234>)
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 fccc 	bl	8007198 <I2C_WaitOnFlagUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8006806:	2302      	movs	r3, #2
 8006808:	e23e      	b.n	8006c88 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_I2C_Master_Receive+0x54>
 8006814:	2302      	movs	r3, #2
 8006816:	e237      	b.n	8006c88 <HAL_I2C_Master_Receive+0x4c4>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b01      	cmp	r3, #1
 800682c:	d007      	beq.n	800683e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f042 0201 	orr.w	r2, r2, #1
 800683c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800684c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2222      	movs	r2, #34	; 0x22
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2210      	movs	r2, #16
 800685a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	893a      	ldrh	r2, [r7, #8]
 800686e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006874:	b29a      	uxth	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4a5f      	ldr	r2, [pc, #380]	; (80069fc <HAL_I2C_Master_Receive+0x238>)
 800687e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006880:	8979      	ldrh	r1, [r7, #10]
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 fbb8 	bl	8006ffc <I2C_MasterRequestRead>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e1f8      	b.n	8006c88 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689a:	2b00      	cmp	r3, #0
 800689c:	d113      	bne.n	80068c6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800689e:	2300      	movs	r3, #0
 80068a0:	61fb      	str	r3, [r7, #28]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	61fb      	str	r3, [r7, #28]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	61fb      	str	r3, [r7, #28]
 80068b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	e1cc      	b.n	8006c60 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d11e      	bne.n	800690c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80068de:	b672      	cpsid	i
}
 80068e0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068e2:	2300      	movs	r3, #0
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	61bb      	str	r3, [r7, #24]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	61bb      	str	r3, [r7, #24]
 80068f6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006906:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006908:	b662      	cpsie	i
}
 800690a:	e035      	b.n	8006978 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006910:	2b02      	cmp	r3, #2
 8006912:	d11e      	bne.n	8006952 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006922:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006924:	b672      	cpsid	i
}
 8006926:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006928:	2300      	movs	r3, #0
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800694c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800694e:	b662      	cpsie	i
}
 8006950:	e012      	b.n	8006978 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006962:	2300      	movs	r3, #0
 8006964:	613b      	str	r3, [r7, #16]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	613b      	str	r3, [r7, #16]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	613b      	str	r3, [r7, #16]
 8006976:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006978:	e172      	b.n	8006c60 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800697e:	2b03      	cmp	r3, #3
 8006980:	f200 811f 	bhi.w	8006bc2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006988:	2b01      	cmp	r3, #1
 800698a:	d123      	bne.n	80069d4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800698c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800698e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 fdab 	bl	80074ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e173      	b.n	8006c88 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691a      	ldr	r2, [r3, #16]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069bc:	3b01      	subs	r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069d2:	e145      	b.n	8006c60 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d152      	bne.n	8006a82 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	2200      	movs	r2, #0
 80069e4:	4906      	ldr	r1, [pc, #24]	; (8006a00 <HAL_I2C_Master_Receive+0x23c>)
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 fbd6 	bl	8007198 <I2C_WaitOnFlagUntilTimeout>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d008      	beq.n	8006a04 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e148      	b.n	8006c88 <HAL_I2C_Master_Receive+0x4c4>
 80069f6:	bf00      	nop
 80069f8:	00100002 	.word	0x00100002
 80069fc:	ffff0000 	.word	0xffff0000
 8006a00:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006a04:	b672      	cpsid	i
}
 8006a06:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	691a      	ldr	r2, [r3, #16]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006a4a:	b662      	cpsie	i
}
 8006a4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	691a      	ldr	r2, [r3, #16]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	b2d2      	uxtb	r2, r2
 8006a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a80:	e0ee      	b.n	8006c60 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	2200      	movs	r2, #0
 8006a8a:	4981      	ldr	r1, [pc, #516]	; (8006c90 <HAL_I2C_Master_Receive+0x4cc>)
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 fb83 	bl	8007198 <I2C_WaitOnFlagUntilTimeout>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e0f5      	b.n	8006c88 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aaa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006aac:	b672      	cpsid	i
}
 8006aae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691a      	ldr	r2, [r3, #16]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006acc:	3b01      	subs	r3, #1
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006ae2:	4b6c      	ldr	r3, [pc, #432]	; (8006c94 <HAL_I2C_Master_Receive+0x4d0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	08db      	lsrs	r3, r3, #3
 8006ae8:	4a6b      	ldr	r2, [pc, #428]	; (8006c98 <HAL_I2C_Master_Receive+0x4d4>)
 8006aea:	fba2 2303 	umull	r2, r3, r2, r3
 8006aee:	0a1a      	lsrs	r2, r3, #8
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	00da      	lsls	r2, r3, #3
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d118      	bne.n	8006b3a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	f043 0220 	orr.w	r2, r3, #32
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006b2a:	b662      	cpsie	i
}
 8006b2c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e0a6      	b.n	8006c88 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d1d9      	bne.n	8006afc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	691a      	ldr	r2, [r3, #16]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b74:	3b01      	subs	r3, #1
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006b8a:	b662      	cpsie	i
}
 8006b8c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bc0:	e04e      	b.n	8006c60 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 fc90 	bl	80074ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e058      	b.n	8006c88 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	b2d2      	uxtb	r2, r2
 8006be2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	f003 0304 	and.w	r3, r3, #4
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	d124      	bne.n	8006c60 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d107      	bne.n	8006c2e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c2c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	691a      	ldr	r2, [r3, #16]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f47f ae88 	bne.w	800697a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	e000      	b.n	8006c88 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8006c86:	2302      	movs	r3, #2
  }
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3728      	adds	r7, #40	; 0x28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	00010004 	.word	0x00010004
 8006c94:	20000048 	.word	0x20000048
 8006c98:	14f8b589 	.word	0x14f8b589

08006c9c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08a      	sub	sp, #40	; 0x28
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	607a      	str	r2, [r7, #4]
 8006ca6:	603b      	str	r3, [r7, #0]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006cac:	f7fe ff8e 	bl	8005bcc <HAL_GetTick>
 8006cb0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b20      	cmp	r3, #32
 8006cc0:	f040 8111 	bne.w	8006ee6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	2319      	movs	r3, #25
 8006cca:	2201      	movs	r2, #1
 8006ccc:	4988      	ldr	r1, [pc, #544]	; (8006ef0 <HAL_I2C_IsDeviceReady+0x254>)
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 fa62 	bl	8007198 <I2C_WaitOnFlagUntilTimeout>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006cda:	2302      	movs	r3, #2
 8006cdc:	e104      	b.n	8006ee8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_I2C_IsDeviceReady+0x50>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e0fd      	b.n	8006ee8 <HAL_I2C_IsDeviceReady+0x24c>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d007      	beq.n	8006d12 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f042 0201 	orr.w	r2, r2, #1
 8006d10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2224      	movs	r2, #36	; 0x24
 8006d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4a70      	ldr	r2, [pc, #448]	; (8006ef4 <HAL_I2C_IsDeviceReady+0x258>)
 8006d34:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d44:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 fa20 	bl	8007198 <I2C_WaitOnFlagUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00d      	beq.n	8006d7a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d6c:	d103      	bne.n	8006d76 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d74:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e0b6      	b.n	8006ee8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d7a:	897b      	ldrh	r3, [r7, #10]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	461a      	mov	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d88:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006d8a:	f7fe ff1f 	bl	8005bcc <HAL_GetTick>
 8006d8e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	bf0c      	ite	eq
 8006d9e:	2301      	moveq	r3, #1
 8006da0:	2300      	movne	r3, #0
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006db4:	bf0c      	ite	eq
 8006db6:	2301      	moveq	r3, #1
 8006db8:	2300      	movne	r3, #0
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006dbe:	e025      	b.n	8006e0c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006dc0:	f7fe ff04 	bl	8005bcc <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d302      	bcc.n	8006dd6 <HAL_I2C_IsDeviceReady+0x13a>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d103      	bne.n	8006dde <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	22a0      	movs	r2, #160	; 0xa0
 8006dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	bf0c      	ite	eq
 8006dec:	2301      	moveq	r3, #1
 8006dee:	2300      	movne	r3, #0
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e02:	bf0c      	ite	eq
 8006e04:	2301      	moveq	r3, #1
 8006e06:	2300      	movne	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2ba0      	cmp	r3, #160	; 0xa0
 8006e16:	d005      	beq.n	8006e24 <HAL_I2C_IsDeviceReady+0x188>
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d102      	bne.n	8006e24 <HAL_I2C_IsDeviceReady+0x188>
 8006e1e:	7dbb      	ldrb	r3, [r7, #22]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0cd      	beq.n	8006dc0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d129      	bne.n	8006e8e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e48:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	613b      	str	r3, [r7, #16]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	613b      	str	r3, [r7, #16]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	613b      	str	r3, [r7, #16]
 8006e5e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	2319      	movs	r3, #25
 8006e66:	2201      	movs	r2, #1
 8006e68:	4921      	ldr	r1, [pc, #132]	; (8006ef0 <HAL_I2C_IsDeviceReady+0x254>)
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 f994 	bl	8007198 <I2C_WaitOnFlagUntilTimeout>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e036      	b.n	8006ee8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	e02c      	b.n	8006ee8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e9c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ea6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	2319      	movs	r3, #25
 8006eae:	2201      	movs	r2, #1
 8006eb0:	490f      	ldr	r1, [pc, #60]	; (8006ef0 <HAL_I2C_IsDeviceReady+0x254>)
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 f970 	bl	8007198 <I2C_WaitOnFlagUntilTimeout>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e012      	b.n	8006ee8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	f4ff af32 	bcc.w	8006d36 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e000      	b.n	8006ee8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006ee6:	2302      	movs	r3, #2
  }
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3720      	adds	r7, #32
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	00100002 	.word	0x00100002
 8006ef4:	ffff0000 	.word	0xffff0000

08006ef8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b088      	sub	sp, #32
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	607a      	str	r2, [r7, #4]
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	460b      	mov	r3, r1
 8006f06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b08      	cmp	r3, #8
 8006f12:	d006      	beq.n	8006f22 <I2C_MasterRequestWrite+0x2a>
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d003      	beq.n	8006f22 <I2C_MasterRequestWrite+0x2a>
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f20:	d108      	bne.n	8006f34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	e00b      	b.n	8006f4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f38:	2b12      	cmp	r3, #18
 8006f3a:	d107      	bne.n	8006f4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 f91d 	bl	8007198 <I2C_WaitOnFlagUntilTimeout>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00d      	beq.n	8006f80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f72:	d103      	bne.n	8006f7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e035      	b.n	8006fec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f88:	d108      	bne.n	8006f9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f8a:	897b      	ldrh	r3, [r7, #10]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	461a      	mov	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f98:	611a      	str	r2, [r3, #16]
 8006f9a:	e01b      	b.n	8006fd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006f9c:	897b      	ldrh	r3, [r7, #10]
 8006f9e:	11db      	asrs	r3, r3, #7
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	f003 0306 	and.w	r3, r3, #6
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	f063 030f 	orn	r3, r3, #15
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	490e      	ldr	r1, [pc, #56]	; (8006ff4 <I2C_MasterRequestWrite+0xfc>)
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 f966 	bl	800728c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e010      	b.n	8006fec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006fca:	897b      	ldrh	r3, [r7, #10]
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	4907      	ldr	r1, [pc, #28]	; (8006ff8 <I2C_MasterRequestWrite+0x100>)
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 f956 	bl	800728c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e000      	b.n	8006fec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3718      	adds	r7, #24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	00010008 	.word	0x00010008
 8006ff8:	00010002 	.word	0x00010002

08006ffc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b088      	sub	sp, #32
 8007000:	af02      	add	r7, sp, #8
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	607a      	str	r2, [r7, #4]
 8007006:	603b      	str	r3, [r7, #0]
 8007008:	460b      	mov	r3, r1
 800700a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007020:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2b08      	cmp	r3, #8
 8007026:	d006      	beq.n	8007036 <I2C_MasterRequestRead+0x3a>
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d003      	beq.n	8007036 <I2C_MasterRequestRead+0x3a>
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007034:	d108      	bne.n	8007048 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	e00b      	b.n	8007060 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704c:	2b11      	cmp	r3, #17
 800704e:	d107      	bne.n	8007060 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800705e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 f893 	bl	8007198 <I2C_WaitOnFlagUntilTimeout>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00d      	beq.n	8007094 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007086:	d103      	bne.n	8007090 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800708e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e079      	b.n	8007188 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800709c:	d108      	bne.n	80070b0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800709e:	897b      	ldrh	r3, [r7, #10]
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	f043 0301 	orr.w	r3, r3, #1
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	611a      	str	r2, [r3, #16]
 80070ae:	e05f      	b.n	8007170 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80070b0:	897b      	ldrh	r3, [r7, #10]
 80070b2:	11db      	asrs	r3, r3, #7
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	f003 0306 	and.w	r3, r3, #6
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f063 030f 	orn	r3, r3, #15
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	4930      	ldr	r1, [pc, #192]	; (8007190 <I2C_MasterRequestRead+0x194>)
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f000 f8dc 	bl	800728c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e054      	b.n	8007188 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80070de:	897b      	ldrh	r3, [r7, #10]
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	4929      	ldr	r1, [pc, #164]	; (8007194 <I2C_MasterRequestRead+0x198>)
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 f8cc 	bl	800728c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e044      	b.n	8007188 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070fe:	2300      	movs	r3, #0
 8007100:	613b      	str	r3, [r7, #16]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	613b      	str	r3, [r7, #16]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	613b      	str	r3, [r7, #16]
 8007112:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007122:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 f831 	bl	8007198 <I2C_WaitOnFlagUntilTimeout>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00d      	beq.n	8007158 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800714a:	d103      	bne.n	8007154 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007152:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e017      	b.n	8007188 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007158:	897b      	ldrh	r3, [r7, #10]
 800715a:	11db      	asrs	r3, r3, #7
 800715c:	b2db      	uxtb	r3, r3
 800715e:	f003 0306 	and.w	r3, r3, #6
 8007162:	b2db      	uxtb	r3, r3
 8007164:	f063 030e 	orn	r3, r3, #14
 8007168:	b2da      	uxtb	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	4907      	ldr	r1, [pc, #28]	; (8007194 <I2C_MasterRequestRead+0x198>)
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 f888 	bl	800728c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e000      	b.n	8007188 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	00010008 	.word	0x00010008
 8007194:	00010002 	.word	0x00010002

08007198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	603b      	str	r3, [r7, #0]
 80071a4:	4613      	mov	r3, r2
 80071a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071a8:	e048      	b.n	800723c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d044      	beq.n	800723c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b2:	f7fe fd0b 	bl	8005bcc <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d302      	bcc.n	80071c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d139      	bne.n	800723c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	0c1b      	lsrs	r3, r3, #16
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d10d      	bne.n	80071ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	43da      	mvns	r2, r3
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	4013      	ands	r3, r2
 80071de:	b29b      	uxth	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	bf0c      	ite	eq
 80071e4:	2301      	moveq	r3, #1
 80071e6:	2300      	movne	r3, #0
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	461a      	mov	r2, r3
 80071ec:	e00c      	b.n	8007208 <I2C_WaitOnFlagUntilTimeout+0x70>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	43da      	mvns	r2, r3
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	4013      	ands	r3, r2
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	bf0c      	ite	eq
 8007200:	2301      	moveq	r3, #1
 8007202:	2300      	movne	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	461a      	mov	r2, r3
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	429a      	cmp	r2, r3
 800720c:	d116      	bne.n	800723c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2220      	movs	r2, #32
 8007218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	f043 0220 	orr.w	r2, r3, #32
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e023      	b.n	8007284 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	0c1b      	lsrs	r3, r3, #16
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b01      	cmp	r3, #1
 8007244:	d10d      	bne.n	8007262 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	43da      	mvns	r2, r3
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	4013      	ands	r3, r2
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	bf0c      	ite	eq
 8007258:	2301      	moveq	r3, #1
 800725a:	2300      	movne	r3, #0
 800725c:	b2db      	uxtb	r3, r3
 800725e:	461a      	mov	r2, r3
 8007260:	e00c      	b.n	800727c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	43da      	mvns	r2, r3
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	4013      	ands	r3, r2
 800726e:	b29b      	uxth	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	bf0c      	ite	eq
 8007274:	2301      	moveq	r3, #1
 8007276:	2300      	movne	r3, #0
 8007278:	b2db      	uxtb	r3, r3
 800727a:	461a      	mov	r2, r3
 800727c:	79fb      	ldrb	r3, [r7, #7]
 800727e:	429a      	cmp	r2, r3
 8007280:	d093      	beq.n	80071aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
 8007298:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800729a:	e071      	b.n	8007380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072aa:	d123      	bne.n	80072f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e0:	f043 0204 	orr.w	r2, r3, #4
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e067      	b.n	80073c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fa:	d041      	beq.n	8007380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072fc:	f7fe fc66 	bl	8005bcc <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	429a      	cmp	r2, r3
 800730a:	d302      	bcc.n	8007312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d136      	bne.n	8007380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	0c1b      	lsrs	r3, r3, #16
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b01      	cmp	r3, #1
 800731a:	d10c      	bne.n	8007336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	43da      	mvns	r2, r3
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	4013      	ands	r3, r2
 8007328:	b29b      	uxth	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	bf14      	ite	ne
 800732e:	2301      	movne	r3, #1
 8007330:	2300      	moveq	r3, #0
 8007332:	b2db      	uxtb	r3, r3
 8007334:	e00b      	b.n	800734e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	43da      	mvns	r2, r3
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	4013      	ands	r3, r2
 8007342:	b29b      	uxth	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	bf14      	ite	ne
 8007348:	2301      	movne	r3, #1
 800734a:	2300      	moveq	r3, #0
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d016      	beq.n	8007380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2220      	movs	r2, #32
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	f043 0220 	orr.w	r2, r3, #32
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e021      	b.n	80073c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	0c1b      	lsrs	r3, r3, #16
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b01      	cmp	r3, #1
 8007388:	d10c      	bne.n	80073a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	43da      	mvns	r2, r3
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	4013      	ands	r3, r2
 8007396:	b29b      	uxth	r3, r3
 8007398:	2b00      	cmp	r3, #0
 800739a:	bf14      	ite	ne
 800739c:	2301      	movne	r3, #1
 800739e:	2300      	moveq	r3, #0
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	e00b      	b.n	80073bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	43da      	mvns	r2, r3
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	4013      	ands	r3, r2
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	bf14      	ite	ne
 80073b6:	2301      	movne	r3, #1
 80073b8:	2300      	moveq	r3, #0
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f47f af6d 	bne.w	800729c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073d8:	e034      	b.n	8007444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 f8e3 	bl	80075a6 <I2C_IsAcknowledgeFailed>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e034      	b.n	8007454 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f0:	d028      	beq.n	8007444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f2:	f7fe fbeb 	bl	8005bcc <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d302      	bcc.n	8007408 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d11d      	bne.n	8007444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007412:	2b80      	cmp	r3, #128	; 0x80
 8007414:	d016      	beq.n	8007444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	f043 0220 	orr.w	r2, r3, #32
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e007      	b.n	8007454 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744e:	2b80      	cmp	r3, #128	; 0x80
 8007450:	d1c3      	bne.n	80073da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007468:	e034      	b.n	80074d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 f89b 	bl	80075a6 <I2C_IsAcknowledgeFailed>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e034      	b.n	80074e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007480:	d028      	beq.n	80074d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007482:	f7fe fba3 	bl	8005bcc <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	429a      	cmp	r2, r3
 8007490:	d302      	bcc.n	8007498 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d11d      	bne.n	80074d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d016      	beq.n	80074d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2220      	movs	r2, #32
 80074b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c0:	f043 0220 	orr.w	r2, r3, #32
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e007      	b.n	80074e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d1c3      	bne.n	800746a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074f8:	e049      	b.n	800758e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	f003 0310 	and.w	r3, r3, #16
 8007504:	2b10      	cmp	r3, #16
 8007506:	d119      	bne.n	800753c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f06f 0210 	mvn.w	r2, #16
 8007510:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2220      	movs	r2, #32
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e030      	b.n	800759e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800753c:	f7fe fb46 	bl	8005bcc <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	429a      	cmp	r2, r3
 800754a:	d302      	bcc.n	8007552 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d11d      	bne.n	800758e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755c:	2b40      	cmp	r3, #64	; 0x40
 800755e:	d016      	beq.n	800758e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2220      	movs	r2, #32
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	f043 0220 	orr.w	r2, r3, #32
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e007      	b.n	800759e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007598:	2b40      	cmp	r3, #64	; 0x40
 800759a:	d1ae      	bne.n	80074fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075bc:	d11b      	bne.n	80075f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	f043 0204 	orr.w	r2, r3, #4
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e000      	b.n	80075f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bc80      	pop	{r7}
 8007600:	4770      	bx	lr
	...

08007604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e26c      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 8087 	beq.w	8007732 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007624:	4b92      	ldr	r3, [pc, #584]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f003 030c 	and.w	r3, r3, #12
 800762c:	2b04      	cmp	r3, #4
 800762e:	d00c      	beq.n	800764a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007630:	4b8f      	ldr	r3, [pc, #572]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f003 030c 	and.w	r3, r3, #12
 8007638:	2b08      	cmp	r3, #8
 800763a:	d112      	bne.n	8007662 <HAL_RCC_OscConfig+0x5e>
 800763c:	4b8c      	ldr	r3, [pc, #560]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007648:	d10b      	bne.n	8007662 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800764a:	4b89      	ldr	r3, [pc, #548]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d06c      	beq.n	8007730 <HAL_RCC_OscConfig+0x12c>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d168      	bne.n	8007730 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e246      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800766a:	d106      	bne.n	800767a <HAL_RCC_OscConfig+0x76>
 800766c:	4b80      	ldr	r3, [pc, #512]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a7f      	ldr	r2, [pc, #508]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 8007672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	e02e      	b.n	80076d8 <HAL_RCC_OscConfig+0xd4>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10c      	bne.n	800769c <HAL_RCC_OscConfig+0x98>
 8007682:	4b7b      	ldr	r3, [pc, #492]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a7a      	ldr	r2, [pc, #488]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 8007688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	4b78      	ldr	r3, [pc, #480]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a77      	ldr	r2, [pc, #476]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 8007694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007698:	6013      	str	r3, [r2, #0]
 800769a:	e01d      	b.n	80076d8 <HAL_RCC_OscConfig+0xd4>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076a4:	d10c      	bne.n	80076c0 <HAL_RCC_OscConfig+0xbc>
 80076a6:	4b72      	ldr	r3, [pc, #456]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a71      	ldr	r2, [pc, #452]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 80076ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076b0:	6013      	str	r3, [r2, #0]
 80076b2:	4b6f      	ldr	r3, [pc, #444]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a6e      	ldr	r2, [pc, #440]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 80076b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076bc:	6013      	str	r3, [r2, #0]
 80076be:	e00b      	b.n	80076d8 <HAL_RCC_OscConfig+0xd4>
 80076c0:	4b6b      	ldr	r3, [pc, #428]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a6a      	ldr	r2, [pc, #424]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 80076c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ca:	6013      	str	r3, [r2, #0]
 80076cc:	4b68      	ldr	r3, [pc, #416]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a67      	ldr	r2, [pc, #412]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 80076d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d013      	beq.n	8007708 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e0:	f7fe fa74 	bl	8005bcc <HAL_GetTick>
 80076e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076e6:	e008      	b.n	80076fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076e8:	f7fe fa70 	bl	8005bcc <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b64      	cmp	r3, #100	; 0x64
 80076f4:	d901      	bls.n	80076fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e1fa      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076fa:	4b5d      	ldr	r3, [pc, #372]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0f0      	beq.n	80076e8 <HAL_RCC_OscConfig+0xe4>
 8007706:	e014      	b.n	8007732 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007708:	f7fe fa60 	bl	8005bcc <HAL_GetTick>
 800770c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800770e:	e008      	b.n	8007722 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007710:	f7fe fa5c 	bl	8005bcc <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	2b64      	cmp	r3, #100	; 0x64
 800771c:	d901      	bls.n	8007722 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e1e6      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007722:	4b53      	ldr	r3, [pc, #332]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1f0      	bne.n	8007710 <HAL_RCC_OscConfig+0x10c>
 800772e:	e000      	b.n	8007732 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d063      	beq.n	8007806 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800773e:	4b4c      	ldr	r3, [pc, #304]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f003 030c 	and.w	r3, r3, #12
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00b      	beq.n	8007762 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800774a:	4b49      	ldr	r3, [pc, #292]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f003 030c 	and.w	r3, r3, #12
 8007752:	2b08      	cmp	r3, #8
 8007754:	d11c      	bne.n	8007790 <HAL_RCC_OscConfig+0x18c>
 8007756:	4b46      	ldr	r3, [pc, #280]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d116      	bne.n	8007790 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007762:	4b43      	ldr	r3, [pc, #268]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d005      	beq.n	800777a <HAL_RCC_OscConfig+0x176>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d001      	beq.n	800777a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e1ba      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800777a:	4b3d      	ldr	r3, [pc, #244]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	4939      	ldr	r1, [pc, #228]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 800778a:	4313      	orrs	r3, r2
 800778c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800778e:	e03a      	b.n	8007806 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d020      	beq.n	80077da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007798:	4b36      	ldr	r3, [pc, #216]	; (8007874 <HAL_RCC_OscConfig+0x270>)
 800779a:	2201      	movs	r2, #1
 800779c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800779e:	f7fe fa15 	bl	8005bcc <HAL_GetTick>
 80077a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077a4:	e008      	b.n	80077b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077a6:	f7fe fa11 	bl	8005bcc <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d901      	bls.n	80077b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e19b      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077b8:	4b2d      	ldr	r3, [pc, #180]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d0f0      	beq.n	80077a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077c4:	4b2a      	ldr	r3, [pc, #168]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	4927      	ldr	r1, [pc, #156]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	600b      	str	r3, [r1, #0]
 80077d8:	e015      	b.n	8007806 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077da:	4b26      	ldr	r3, [pc, #152]	; (8007874 <HAL_RCC_OscConfig+0x270>)
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e0:	f7fe f9f4 	bl	8005bcc <HAL_GetTick>
 80077e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077e6:	e008      	b.n	80077fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077e8:	f7fe f9f0 	bl	8005bcc <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d901      	bls.n	80077fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e17a      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077fa:	4b1d      	ldr	r3, [pc, #116]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1f0      	bne.n	80077e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0308 	and.w	r3, r3, #8
 800780e:	2b00      	cmp	r3, #0
 8007810:	d03a      	beq.n	8007888 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d019      	beq.n	800784e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800781a:	4b17      	ldr	r3, [pc, #92]	; (8007878 <HAL_RCC_OscConfig+0x274>)
 800781c:	2201      	movs	r2, #1
 800781e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007820:	f7fe f9d4 	bl	8005bcc <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007828:	f7fe f9d0 	bl	8005bcc <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e15a      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800783a:	4b0d      	ldr	r3, [pc, #52]	; (8007870 <HAL_RCC_OscConfig+0x26c>)
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0f0      	beq.n	8007828 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007846:	2001      	movs	r0, #1
 8007848:	f000 facc 	bl	8007de4 <RCC_Delay>
 800784c:	e01c      	b.n	8007888 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800784e:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <HAL_RCC_OscConfig+0x274>)
 8007850:	2200      	movs	r2, #0
 8007852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007854:	f7fe f9ba 	bl	8005bcc <HAL_GetTick>
 8007858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800785a:	e00f      	b.n	800787c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800785c:	f7fe f9b6 	bl	8005bcc <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b02      	cmp	r3, #2
 8007868:	d908      	bls.n	800787c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e140      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>
 800786e:	bf00      	nop
 8007870:	40021000 	.word	0x40021000
 8007874:	42420000 	.word	0x42420000
 8007878:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800787c:	4b9e      	ldr	r3, [pc, #632]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e9      	bne.n	800785c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 80a6 	beq.w	80079e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007896:	2300      	movs	r3, #0
 8007898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800789a:	4b97      	ldr	r3, [pc, #604]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10d      	bne.n	80078c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078a6:	4b94      	ldr	r3, [pc, #592]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	4a93      	ldr	r2, [pc, #588]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 80078ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078b0:	61d3      	str	r3, [r2, #28]
 80078b2:	4b91      	ldr	r3, [pc, #580]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ba:	60bb      	str	r3, [r7, #8]
 80078bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078be:	2301      	movs	r3, #1
 80078c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078c2:	4b8e      	ldr	r3, [pc, #568]	; (8007afc <HAL_RCC_OscConfig+0x4f8>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d118      	bne.n	8007900 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078ce:	4b8b      	ldr	r3, [pc, #556]	; (8007afc <HAL_RCC_OscConfig+0x4f8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a8a      	ldr	r2, [pc, #552]	; (8007afc <HAL_RCC_OscConfig+0x4f8>)
 80078d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078da:	f7fe f977 	bl	8005bcc <HAL_GetTick>
 80078de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078e0:	e008      	b.n	80078f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078e2:	f7fe f973 	bl	8005bcc <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b64      	cmp	r3, #100	; 0x64
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e0fd      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078f4:	4b81      	ldr	r3, [pc, #516]	; (8007afc <HAL_RCC_OscConfig+0x4f8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d0f0      	beq.n	80078e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d106      	bne.n	8007916 <HAL_RCC_OscConfig+0x312>
 8007908:	4b7b      	ldr	r3, [pc, #492]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	4a7a      	ldr	r2, [pc, #488]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 800790e:	f043 0301 	orr.w	r3, r3, #1
 8007912:	6213      	str	r3, [r2, #32]
 8007914:	e02d      	b.n	8007972 <HAL_RCC_OscConfig+0x36e>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10c      	bne.n	8007938 <HAL_RCC_OscConfig+0x334>
 800791e:	4b76      	ldr	r3, [pc, #472]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	4a75      	ldr	r2, [pc, #468]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 8007924:	f023 0301 	bic.w	r3, r3, #1
 8007928:	6213      	str	r3, [r2, #32]
 800792a:	4b73      	ldr	r3, [pc, #460]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	4a72      	ldr	r2, [pc, #456]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 8007930:	f023 0304 	bic.w	r3, r3, #4
 8007934:	6213      	str	r3, [r2, #32]
 8007936:	e01c      	b.n	8007972 <HAL_RCC_OscConfig+0x36e>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	2b05      	cmp	r3, #5
 800793e:	d10c      	bne.n	800795a <HAL_RCC_OscConfig+0x356>
 8007940:	4b6d      	ldr	r3, [pc, #436]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	4a6c      	ldr	r2, [pc, #432]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 8007946:	f043 0304 	orr.w	r3, r3, #4
 800794a:	6213      	str	r3, [r2, #32]
 800794c:	4b6a      	ldr	r3, [pc, #424]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 800794e:	6a1b      	ldr	r3, [r3, #32]
 8007950:	4a69      	ldr	r2, [pc, #420]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 8007952:	f043 0301 	orr.w	r3, r3, #1
 8007956:	6213      	str	r3, [r2, #32]
 8007958:	e00b      	b.n	8007972 <HAL_RCC_OscConfig+0x36e>
 800795a:	4b67      	ldr	r3, [pc, #412]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	4a66      	ldr	r2, [pc, #408]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 8007960:	f023 0301 	bic.w	r3, r3, #1
 8007964:	6213      	str	r3, [r2, #32]
 8007966:	4b64      	ldr	r3, [pc, #400]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	4a63      	ldr	r2, [pc, #396]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 800796c:	f023 0304 	bic.w	r3, r3, #4
 8007970:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d015      	beq.n	80079a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800797a:	f7fe f927 	bl	8005bcc <HAL_GetTick>
 800797e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007980:	e00a      	b.n	8007998 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007982:	f7fe f923 	bl	8005bcc <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007990:	4293      	cmp	r3, r2
 8007992:	d901      	bls.n	8007998 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e0ab      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007998:	4b57      	ldr	r3, [pc, #348]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 800799a:	6a1b      	ldr	r3, [r3, #32]
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d0ee      	beq.n	8007982 <HAL_RCC_OscConfig+0x37e>
 80079a4:	e014      	b.n	80079d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079a6:	f7fe f911 	bl	8005bcc <HAL_GetTick>
 80079aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079ac:	e00a      	b.n	80079c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ae:	f7fe f90d 	bl	8005bcc <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079bc:	4293      	cmp	r3, r2
 80079be:	d901      	bls.n	80079c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e095      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079c4:	4b4c      	ldr	r3, [pc, #304]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1ee      	bne.n	80079ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d105      	bne.n	80079e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079d6:	4b48      	ldr	r3, [pc, #288]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	4a47      	ldr	r2, [pc, #284]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 80079dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 8081 	beq.w	8007aee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079ec:	4b42      	ldr	r3, [pc, #264]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f003 030c 	and.w	r3, r3, #12
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	d061      	beq.n	8007abc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d146      	bne.n	8007a8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a00:	4b3f      	ldr	r3, [pc, #252]	; (8007b00 <HAL_RCC_OscConfig+0x4fc>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a06:	f7fe f8e1 	bl	8005bcc <HAL_GetTick>
 8007a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a0c:	e008      	b.n	8007a20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a0e:	f7fe f8dd 	bl	8005bcc <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d901      	bls.n	8007a20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e067      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a20:	4b35      	ldr	r3, [pc, #212]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1f0      	bne.n	8007a0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a34:	d108      	bne.n	8007a48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007a36:	4b30      	ldr	r3, [pc, #192]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	492d      	ldr	r1, [pc, #180]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a48:	4b2b      	ldr	r3, [pc, #172]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a19      	ldr	r1, [r3, #32]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	430b      	orrs	r3, r1
 8007a5a:	4927      	ldr	r1, [pc, #156]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a60:	4b27      	ldr	r3, [pc, #156]	; (8007b00 <HAL_RCC_OscConfig+0x4fc>)
 8007a62:	2201      	movs	r2, #1
 8007a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a66:	f7fe f8b1 	bl	8005bcc <HAL_GetTick>
 8007a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a6c:	e008      	b.n	8007a80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a6e:	f7fe f8ad 	bl	8005bcc <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d901      	bls.n	8007a80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e037      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a80:	4b1d      	ldr	r3, [pc, #116]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0f0      	beq.n	8007a6e <HAL_RCC_OscConfig+0x46a>
 8007a8c:	e02f      	b.n	8007aee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a8e:	4b1c      	ldr	r3, [pc, #112]	; (8007b00 <HAL_RCC_OscConfig+0x4fc>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a94:	f7fe f89a 	bl	8005bcc <HAL_GetTick>
 8007a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a9a:	e008      	b.n	8007aae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a9c:	f7fe f896 	bl	8005bcc <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e020      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007aae:	4b12      	ldr	r3, [pc, #72]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1f0      	bne.n	8007a9c <HAL_RCC_OscConfig+0x498>
 8007aba:	e018      	b.n	8007aee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e013      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007ac8:	4b0b      	ldr	r3, [pc, #44]	; (8007af8 <HAL_RCC_OscConfig+0x4f4>)
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d106      	bne.n	8007aea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d001      	beq.n	8007aee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e000      	b.n	8007af0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	40021000 	.word	0x40021000
 8007afc:	40007000 	.word	0x40007000
 8007b00:	42420060 	.word	0x42420060

08007b04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e0d0      	b.n	8007cba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b18:	4b6a      	ldr	r3, [pc, #424]	; (8007cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0307 	and.w	r3, r3, #7
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d910      	bls.n	8007b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b26:	4b67      	ldr	r3, [pc, #412]	; (8007cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f023 0207 	bic.w	r2, r3, #7
 8007b2e:	4965      	ldr	r1, [pc, #404]	; (8007cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b36:	4b63      	ldr	r3, [pc, #396]	; (8007cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0307 	and.w	r3, r3, #7
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d001      	beq.n	8007b48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e0b8      	b.n	8007cba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d020      	beq.n	8007b96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d005      	beq.n	8007b6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b60:	4b59      	ldr	r3, [pc, #356]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	4a58      	ldr	r2, [pc, #352]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007b66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0308 	and.w	r3, r3, #8
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d005      	beq.n	8007b84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b78:	4b53      	ldr	r3, [pc, #332]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	4a52      	ldr	r2, [pc, #328]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007b7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007b82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b84:	4b50      	ldr	r3, [pc, #320]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	494d      	ldr	r1, [pc, #308]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d040      	beq.n	8007c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d107      	bne.n	8007bba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007baa:	4b47      	ldr	r3, [pc, #284]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d115      	bne.n	8007be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e07f      	b.n	8007cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d107      	bne.n	8007bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bc2:	4b41      	ldr	r3, [pc, #260]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d109      	bne.n	8007be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e073      	b.n	8007cba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bd2:	4b3d      	ldr	r3, [pc, #244]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e06b      	b.n	8007cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007be2:	4b39      	ldr	r3, [pc, #228]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f023 0203 	bic.w	r2, r3, #3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	4936      	ldr	r1, [pc, #216]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bf4:	f7fd ffea 	bl	8005bcc <HAL_GetTick>
 8007bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bfa:	e00a      	b.n	8007c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bfc:	f7fd ffe6 	bl	8005bcc <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d901      	bls.n	8007c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e053      	b.n	8007cba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c12:	4b2d      	ldr	r3, [pc, #180]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f003 020c 	and.w	r2, r3, #12
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d1eb      	bne.n	8007bfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c24:	4b27      	ldr	r3, [pc, #156]	; (8007cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0307 	and.w	r3, r3, #7
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d210      	bcs.n	8007c54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c32:	4b24      	ldr	r3, [pc, #144]	; (8007cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f023 0207 	bic.w	r2, r3, #7
 8007c3a:	4922      	ldr	r1, [pc, #136]	; (8007cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c42:	4b20      	ldr	r3, [pc, #128]	; (8007cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d001      	beq.n	8007c54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e032      	b.n	8007cba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0304 	and.w	r3, r3, #4
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d008      	beq.n	8007c72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c60:	4b19      	ldr	r3, [pc, #100]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	4916      	ldr	r1, [pc, #88]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0308 	and.w	r3, r3, #8
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d009      	beq.n	8007c92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c7e:	4b12      	ldr	r3, [pc, #72]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	00db      	lsls	r3, r3, #3
 8007c8c:	490e      	ldr	r1, [pc, #56]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c92:	f000 f821 	bl	8007cd8 <HAL_RCC_GetSysClockFreq>
 8007c96:	4602      	mov	r2, r0
 8007c98:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	091b      	lsrs	r3, r3, #4
 8007c9e:	f003 030f 	and.w	r3, r3, #15
 8007ca2:	490a      	ldr	r1, [pc, #40]	; (8007ccc <HAL_RCC_ClockConfig+0x1c8>)
 8007ca4:	5ccb      	ldrb	r3, [r1, r3]
 8007ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8007caa:	4a09      	ldr	r2, [pc, #36]	; (8007cd0 <HAL_RCC_ClockConfig+0x1cc>)
 8007cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007cae:	4b09      	ldr	r3, [pc, #36]	; (8007cd4 <HAL_RCC_ClockConfig+0x1d0>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fd ff48 	bl	8005b48 <HAL_InitTick>

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	40022000 	.word	0x40022000
 8007cc8:	40021000 	.word	0x40021000
 8007ccc:	0800dd40 	.word	0x0800dd40
 8007cd0:	20000048 	.word	0x20000048
 8007cd4:	2000004c 	.word	0x2000004c

08007cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60bb      	str	r3, [r7, #8]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	617b      	str	r3, [r7, #20]
 8007cea:	2300      	movs	r3, #0
 8007cec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007cf2:	4b1e      	ldr	r3, [pc, #120]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x94>)
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f003 030c 	and.w	r3, r3, #12
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d002      	beq.n	8007d08 <HAL_RCC_GetSysClockFreq+0x30>
 8007d02:	2b08      	cmp	r3, #8
 8007d04:	d003      	beq.n	8007d0e <HAL_RCC_GetSysClockFreq+0x36>
 8007d06:	e027      	b.n	8007d58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007d08:	4b19      	ldr	r3, [pc, #100]	; (8007d70 <HAL_RCC_GetSysClockFreq+0x98>)
 8007d0a:	613b      	str	r3, [r7, #16]
      break;
 8007d0c:	e027      	b.n	8007d5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	0c9b      	lsrs	r3, r3, #18
 8007d12:	f003 030f 	and.w	r3, r3, #15
 8007d16:	4a17      	ldr	r2, [pc, #92]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007d18:	5cd3      	ldrb	r3, [r2, r3]
 8007d1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d010      	beq.n	8007d48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007d26:	4b11      	ldr	r3, [pc, #68]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x94>)
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	0c5b      	lsrs	r3, r3, #17
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	4a11      	ldr	r2, [pc, #68]	; (8007d78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007d32:	5cd3      	ldrb	r3, [r2, r3]
 8007d34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a0d      	ldr	r2, [pc, #52]	; (8007d70 <HAL_RCC_GetSysClockFreq+0x98>)
 8007d3a:	fb02 f203 	mul.w	r2, r2, r3
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d44:	617b      	str	r3, [r7, #20]
 8007d46:	e004      	b.n	8007d52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a0c      	ldr	r2, [pc, #48]	; (8007d7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8007d4c:	fb02 f303 	mul.w	r3, r2, r3
 8007d50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	613b      	str	r3, [r7, #16]
      break;
 8007d56:	e002      	b.n	8007d5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007d58:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <HAL_RCC_GetSysClockFreq+0x98>)
 8007d5a:	613b      	str	r3, [r7, #16]
      break;
 8007d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d5e:	693b      	ldr	r3, [r7, #16]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	371c      	adds	r7, #28
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bc80      	pop	{r7}
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	40021000 	.word	0x40021000
 8007d70:	007a1200 	.word	0x007a1200
 8007d74:	0800dd58 	.word	0x0800dd58
 8007d78:	0800dd68 	.word	0x0800dd68
 8007d7c:	003d0900 	.word	0x003d0900

08007d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d80:	b480      	push	{r7}
 8007d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d84:	4b02      	ldr	r3, [pc, #8]	; (8007d90 <HAL_RCC_GetHCLKFreq+0x10>)
 8007d86:	681b      	ldr	r3, [r3, #0]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bc80      	pop	{r7}
 8007d8e:	4770      	bx	lr
 8007d90:	20000048 	.word	0x20000048

08007d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d98:	f7ff fff2 	bl	8007d80 <HAL_RCC_GetHCLKFreq>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	0a1b      	lsrs	r3, r3, #8
 8007da4:	f003 0307 	and.w	r3, r3, #7
 8007da8:	4903      	ldr	r1, [pc, #12]	; (8007db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007daa:	5ccb      	ldrb	r3, [r1, r3]
 8007dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	40021000 	.word	0x40021000
 8007db8:	0800dd50 	.word	0x0800dd50

08007dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007dc0:	f7ff ffde 	bl	8007d80 <HAL_RCC_GetHCLKFreq>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	0adb      	lsrs	r3, r3, #11
 8007dcc:	f003 0307 	and.w	r3, r3, #7
 8007dd0:	4903      	ldr	r1, [pc, #12]	; (8007de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dd2:	5ccb      	ldrb	r3, [r1, r3]
 8007dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	40021000 	.word	0x40021000
 8007de0:	0800dd50 	.word	0x0800dd50

08007de4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007dec:	4b0a      	ldr	r3, [pc, #40]	; (8007e18 <RCC_Delay+0x34>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a0a      	ldr	r2, [pc, #40]	; (8007e1c <RCC_Delay+0x38>)
 8007df2:	fba2 2303 	umull	r2, r3, r2, r3
 8007df6:	0a5b      	lsrs	r3, r3, #9
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	fb02 f303 	mul.w	r3, r2, r3
 8007dfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007e00:	bf00      	nop
  }
  while (Delay --);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	1e5a      	subs	r2, r3, #1
 8007e06:	60fa      	str	r2, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1f9      	bne.n	8007e00 <RCC_Delay+0x1c>
}
 8007e0c:	bf00      	nop
 8007e0e:	bf00      	nop
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bc80      	pop	{r7}
 8007e16:	4770      	bx	lr
 8007e18:	20000048 	.word	0x20000048
 8007e1c:	10624dd3 	.word	0x10624dd3

08007e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e041      	b.n	8007eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d106      	bne.n	8007e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7fd fc5e 	bl	8005708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4610      	mov	r0, r2
 8007e60:	f000 fafc 	bl	800845c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d001      	beq.n	8007ed8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e032      	b.n	8007f3e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a18      	ldr	r2, [pc, #96]	; (8007f48 <HAL_TIM_Base_Start+0x88>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d00e      	beq.n	8007f08 <HAL_TIM_Base_Start+0x48>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef2:	d009      	beq.n	8007f08 <HAL_TIM_Base_Start+0x48>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a14      	ldr	r2, [pc, #80]	; (8007f4c <HAL_TIM_Base_Start+0x8c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d004      	beq.n	8007f08 <HAL_TIM_Base_Start+0x48>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a13      	ldr	r2, [pc, #76]	; (8007f50 <HAL_TIM_Base_Start+0x90>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d111      	bne.n	8007f2c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f003 0307 	and.w	r3, r3, #7
 8007f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2b06      	cmp	r3, #6
 8007f18:	d010      	beq.n	8007f3c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f042 0201 	orr.w	r2, r2, #1
 8007f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f2a:	e007      	b.n	8007f3c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 0201 	orr.w	r2, r2, #1
 8007f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bc80      	pop	{r7}
 8007f46:	4770      	bx	lr
 8007f48:	40012c00 	.word	0x40012c00
 8007f4c:	40000400 	.word	0x40000400
 8007f50:	40000800 	.word	0x40000800

08007f54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e041      	b.n	8007fea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d106      	bne.n	8007f80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f839 	bl	8007ff2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2202      	movs	r2, #2
 8007f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3304      	adds	r3, #4
 8007f90:	4619      	mov	r1, r3
 8007f92:	4610      	mov	r0, r2
 8007f94:	f000 fa62 	bl	800845c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ffa:	bf00      	nop
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bc80      	pop	{r7}
 8008002:	4770      	bx	lr

08008004 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d109      	bne.n	8008028 <HAL_TIM_PWM_Start+0x24>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b01      	cmp	r3, #1
 800801e:	bf14      	ite	ne
 8008020:	2301      	movne	r3, #1
 8008022:	2300      	moveq	r3, #0
 8008024:	b2db      	uxtb	r3, r3
 8008026:	e022      	b.n	800806e <HAL_TIM_PWM_Start+0x6a>
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	2b04      	cmp	r3, #4
 800802c:	d109      	bne.n	8008042 <HAL_TIM_PWM_Start+0x3e>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b01      	cmp	r3, #1
 8008038:	bf14      	ite	ne
 800803a:	2301      	movne	r3, #1
 800803c:	2300      	moveq	r3, #0
 800803e:	b2db      	uxtb	r3, r3
 8008040:	e015      	b.n	800806e <HAL_TIM_PWM_Start+0x6a>
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b08      	cmp	r3, #8
 8008046:	d109      	bne.n	800805c <HAL_TIM_PWM_Start+0x58>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b01      	cmp	r3, #1
 8008052:	bf14      	ite	ne
 8008054:	2301      	movne	r3, #1
 8008056:	2300      	moveq	r3, #0
 8008058:	b2db      	uxtb	r3, r3
 800805a:	e008      	b.n	800806e <HAL_TIM_PWM_Start+0x6a>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b01      	cmp	r3, #1
 8008066:	bf14      	ite	ne
 8008068:	2301      	movne	r3, #1
 800806a:	2300      	moveq	r3, #0
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e05e      	b.n	8008134 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <HAL_TIM_PWM_Start+0x82>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008084:	e013      	b.n	80080ae <HAL_TIM_PWM_Start+0xaa>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b04      	cmp	r3, #4
 800808a:	d104      	bne.n	8008096 <HAL_TIM_PWM_Start+0x92>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2202      	movs	r2, #2
 8008090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008094:	e00b      	b.n	80080ae <HAL_TIM_PWM_Start+0xaa>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b08      	cmp	r3, #8
 800809a:	d104      	bne.n	80080a6 <HAL_TIM_PWM_Start+0xa2>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080a4:	e003      	b.n	80080ae <HAL_TIM_PWM_Start+0xaa>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2202      	movs	r2, #2
 80080aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2201      	movs	r2, #1
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 fc5c 	bl	8008974 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a1e      	ldr	r2, [pc, #120]	; (800813c <HAL_TIM_PWM_Start+0x138>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d107      	bne.n	80080d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a18      	ldr	r2, [pc, #96]	; (800813c <HAL_TIM_PWM_Start+0x138>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d00e      	beq.n	80080fe <HAL_TIM_PWM_Start+0xfa>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e8:	d009      	beq.n	80080fe <HAL_TIM_PWM_Start+0xfa>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a14      	ldr	r2, [pc, #80]	; (8008140 <HAL_TIM_PWM_Start+0x13c>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d004      	beq.n	80080fe <HAL_TIM_PWM_Start+0xfa>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a12      	ldr	r2, [pc, #72]	; (8008144 <HAL_TIM_PWM_Start+0x140>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d111      	bne.n	8008122 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f003 0307 	and.w	r3, r3, #7
 8008108:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2b06      	cmp	r3, #6
 800810e:	d010      	beq.n	8008132 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0201 	orr.w	r2, r2, #1
 800811e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008120:	e007      	b.n	8008132 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f042 0201 	orr.w	r2, r2, #1
 8008130:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	40012c00 	.word	0x40012c00
 8008140:	40000400 	.word	0x40000400
 8008144:	40000800 	.word	0x40000800

08008148 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800815e:	2b01      	cmp	r3, #1
 8008160:	d101      	bne.n	8008166 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008162:	2302      	movs	r3, #2
 8008164:	e0ae      	b.n	80082c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b0c      	cmp	r3, #12
 8008172:	f200 809f 	bhi.w	80082b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008176:	a201      	add	r2, pc, #4	; (adr r2, 800817c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	080081b1 	.word	0x080081b1
 8008180:	080082b5 	.word	0x080082b5
 8008184:	080082b5 	.word	0x080082b5
 8008188:	080082b5 	.word	0x080082b5
 800818c:	080081f1 	.word	0x080081f1
 8008190:	080082b5 	.word	0x080082b5
 8008194:	080082b5 	.word	0x080082b5
 8008198:	080082b5 	.word	0x080082b5
 800819c:	08008233 	.word	0x08008233
 80081a0:	080082b5 	.word	0x080082b5
 80081a4:	080082b5 	.word	0x080082b5
 80081a8:	080082b5 	.word	0x080082b5
 80081ac:	08008273 	.word	0x08008273
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68b9      	ldr	r1, [r7, #8]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 f9be 	bl	8008538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f042 0208 	orr.w	r2, r2, #8
 80081ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	699a      	ldr	r2, [r3, #24]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 0204 	bic.w	r2, r2, #4
 80081da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6999      	ldr	r1, [r3, #24]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	691a      	ldr	r2, [r3, #16]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	619a      	str	r2, [r3, #24]
      break;
 80081ee:	e064      	b.n	80082ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68b9      	ldr	r1, [r7, #8]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 fa04 	bl	8008604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699a      	ldr	r2, [r3, #24]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800820a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	699a      	ldr	r2, [r3, #24]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800821a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6999      	ldr	r1, [r3, #24]
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	021a      	lsls	r2, r3, #8
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	619a      	str	r2, [r3, #24]
      break;
 8008230:	e043      	b.n	80082ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68b9      	ldr	r1, [r7, #8]
 8008238:	4618      	mov	r0, r3
 800823a:	f000 fa4d 	bl	80086d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69da      	ldr	r2, [r3, #28]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f042 0208 	orr.w	r2, r2, #8
 800824c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69da      	ldr	r2, [r3, #28]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f022 0204 	bic.w	r2, r2, #4
 800825c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69d9      	ldr	r1, [r3, #28]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	691a      	ldr	r2, [r3, #16]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	430a      	orrs	r2, r1
 800826e:	61da      	str	r2, [r3, #28]
      break;
 8008270:	e023      	b.n	80082ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68b9      	ldr	r1, [r7, #8]
 8008278:	4618      	mov	r0, r3
 800827a:	f000 fa97 	bl	80087ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	69da      	ldr	r2, [r3, #28]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800828c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69da      	ldr	r2, [r3, #28]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800829c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69d9      	ldr	r1, [r3, #28]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	021a      	lsls	r2, r3, #8
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	430a      	orrs	r2, r1
 80082b0:	61da      	str	r2, [r3, #28]
      break;
 80082b2:	e002      	b.n	80082ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	75fb      	strb	r3, [r7, #23]
      break;
 80082b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_TIM_ConfigClockSource+0x1c>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e0b4      	b.n	8008452 <HAL_TIM_ConfigClockSource+0x186>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800830e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008320:	d03e      	beq.n	80083a0 <HAL_TIM_ConfigClockSource+0xd4>
 8008322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008326:	f200 8087 	bhi.w	8008438 <HAL_TIM_ConfigClockSource+0x16c>
 800832a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832e:	f000 8086 	beq.w	800843e <HAL_TIM_ConfigClockSource+0x172>
 8008332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008336:	d87f      	bhi.n	8008438 <HAL_TIM_ConfigClockSource+0x16c>
 8008338:	2b70      	cmp	r3, #112	; 0x70
 800833a:	d01a      	beq.n	8008372 <HAL_TIM_ConfigClockSource+0xa6>
 800833c:	2b70      	cmp	r3, #112	; 0x70
 800833e:	d87b      	bhi.n	8008438 <HAL_TIM_ConfigClockSource+0x16c>
 8008340:	2b60      	cmp	r3, #96	; 0x60
 8008342:	d050      	beq.n	80083e6 <HAL_TIM_ConfigClockSource+0x11a>
 8008344:	2b60      	cmp	r3, #96	; 0x60
 8008346:	d877      	bhi.n	8008438 <HAL_TIM_ConfigClockSource+0x16c>
 8008348:	2b50      	cmp	r3, #80	; 0x50
 800834a:	d03c      	beq.n	80083c6 <HAL_TIM_ConfigClockSource+0xfa>
 800834c:	2b50      	cmp	r3, #80	; 0x50
 800834e:	d873      	bhi.n	8008438 <HAL_TIM_ConfigClockSource+0x16c>
 8008350:	2b40      	cmp	r3, #64	; 0x40
 8008352:	d058      	beq.n	8008406 <HAL_TIM_ConfigClockSource+0x13a>
 8008354:	2b40      	cmp	r3, #64	; 0x40
 8008356:	d86f      	bhi.n	8008438 <HAL_TIM_ConfigClockSource+0x16c>
 8008358:	2b30      	cmp	r3, #48	; 0x30
 800835a:	d064      	beq.n	8008426 <HAL_TIM_ConfigClockSource+0x15a>
 800835c:	2b30      	cmp	r3, #48	; 0x30
 800835e:	d86b      	bhi.n	8008438 <HAL_TIM_ConfigClockSource+0x16c>
 8008360:	2b20      	cmp	r3, #32
 8008362:	d060      	beq.n	8008426 <HAL_TIM_ConfigClockSource+0x15a>
 8008364:	2b20      	cmp	r3, #32
 8008366:	d867      	bhi.n	8008438 <HAL_TIM_ConfigClockSource+0x16c>
 8008368:	2b00      	cmp	r3, #0
 800836a:	d05c      	beq.n	8008426 <HAL_TIM_ConfigClockSource+0x15a>
 800836c:	2b10      	cmp	r3, #16
 800836e:	d05a      	beq.n	8008426 <HAL_TIM_ConfigClockSource+0x15a>
 8008370:	e062      	b.n	8008438 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6818      	ldr	r0, [r3, #0]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	6899      	ldr	r1, [r3, #8]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f000 fad8 	bl	8008936 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008394:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	609a      	str	r2, [r3, #8]
      break;
 800839e:	e04f      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6818      	ldr	r0, [r3, #0]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	6899      	ldr	r1, [r3, #8]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f000 fac1 	bl	8008936 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689a      	ldr	r2, [r3, #8]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083c2:	609a      	str	r2, [r3, #8]
      break;
 80083c4:	e03c      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	6859      	ldr	r1, [r3, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	461a      	mov	r2, r3
 80083d4:	f000 fa38 	bl	8008848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2150      	movs	r1, #80	; 0x50
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 fa8f 	bl	8008902 <TIM_ITRx_SetConfig>
      break;
 80083e4:	e02c      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	6859      	ldr	r1, [r3, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	461a      	mov	r2, r3
 80083f4:	f000 fa56 	bl	80088a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2160      	movs	r1, #96	; 0x60
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 fa7f 	bl	8008902 <TIM_ITRx_SetConfig>
      break;
 8008404:	e01c      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6818      	ldr	r0, [r3, #0]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	6859      	ldr	r1, [r3, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	461a      	mov	r2, r3
 8008414:	f000 fa18 	bl	8008848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2140      	movs	r1, #64	; 0x40
 800841e:	4618      	mov	r0, r3
 8008420:	f000 fa6f 	bl	8008902 <TIM_ITRx_SetConfig>
      break;
 8008424:	e00c      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4619      	mov	r1, r3
 8008430:	4610      	mov	r0, r2
 8008432:	f000 fa66 	bl	8008902 <TIM_ITRx_SetConfig>
      break;
 8008436:	e003      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	73fb      	strb	r3, [r7, #15]
      break;
 800843c:	e000      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800843e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
	...

0800845c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a2f      	ldr	r2, [pc, #188]	; (800852c <TIM_Base_SetConfig+0xd0>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00b      	beq.n	800848c <TIM_Base_SetConfig+0x30>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800847a:	d007      	beq.n	800848c <TIM_Base_SetConfig+0x30>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a2c      	ldr	r2, [pc, #176]	; (8008530 <TIM_Base_SetConfig+0xd4>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d003      	beq.n	800848c <TIM_Base_SetConfig+0x30>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a2b      	ldr	r2, [pc, #172]	; (8008534 <TIM_Base_SetConfig+0xd8>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d108      	bne.n	800849e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a22      	ldr	r2, [pc, #136]	; (800852c <TIM_Base_SetConfig+0xd0>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d00b      	beq.n	80084be <TIM_Base_SetConfig+0x62>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ac:	d007      	beq.n	80084be <TIM_Base_SetConfig+0x62>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a1f      	ldr	r2, [pc, #124]	; (8008530 <TIM_Base_SetConfig+0xd4>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d003      	beq.n	80084be <TIM_Base_SetConfig+0x62>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a1e      	ldr	r2, [pc, #120]	; (8008534 <TIM_Base_SetConfig+0xd8>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d108      	bne.n	80084d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	4313      	orrs	r3, r2
 80084dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a0d      	ldr	r2, [pc, #52]	; (800852c <TIM_Base_SetConfig+0xd0>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d103      	bne.n	8008504 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	691a      	ldr	r2, [r3, #16]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	2b00      	cmp	r3, #0
 8008514:	d005      	beq.n	8008522 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	f023 0201 	bic.w	r2, r3, #1
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	611a      	str	r2, [r3, #16]
  }
}
 8008522:	bf00      	nop
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	bc80      	pop	{r7}
 800852a:	4770      	bx	lr
 800852c:	40012c00 	.word	0x40012c00
 8008530:	40000400 	.word	0x40000400
 8008534:	40000800 	.word	0x40000800

08008538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	f023 0201 	bic.w	r2, r3, #1
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0303 	bic.w	r3, r3, #3
 800856e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f023 0302 	bic.w	r3, r3, #2
 8008580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	4313      	orrs	r3, r2
 800858a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a1c      	ldr	r2, [pc, #112]	; (8008600 <TIM_OC1_SetConfig+0xc8>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d10c      	bne.n	80085ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f023 0308 	bic.w	r3, r3, #8
 800859a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f023 0304 	bic.w	r3, r3, #4
 80085ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a13      	ldr	r2, [pc, #76]	; (8008600 <TIM_OC1_SetConfig+0xc8>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d111      	bne.n	80085da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	621a      	str	r2, [r3, #32]
}
 80085f4:	bf00      	nop
 80085f6:	371c      	adds	r7, #28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bc80      	pop	{r7}
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	40012c00 	.word	0x40012c00

08008604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a1b      	ldr	r3, [r3, #32]
 8008618:	f023 0210 	bic.w	r2, r3, #16
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800863a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	021b      	lsls	r3, r3, #8
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	4313      	orrs	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f023 0320 	bic.w	r3, r3, #32
 800864e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	011b      	lsls	r3, r3, #4
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	4313      	orrs	r3, r2
 800865a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a1d      	ldr	r2, [pc, #116]	; (80086d4 <TIM_OC2_SetConfig+0xd0>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d10d      	bne.n	8008680 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800866a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	011b      	lsls	r3, r3, #4
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800867e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a14      	ldr	r2, [pc, #80]	; (80086d4 <TIM_OC2_SetConfig+0xd0>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d113      	bne.n	80086b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800868e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008696:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	621a      	str	r2, [r3, #32]
}
 80086ca:	bf00      	nop
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc80      	pop	{r7}
 80086d2:	4770      	bx	lr
 80086d4:	40012c00 	.word	0x40012c00

080086d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086d8:	b480      	push	{r7}
 80086da:	b087      	sub	sp, #28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a1b      	ldr	r3, [r3, #32]
 80086ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f023 0303 	bic.w	r3, r3, #3
 800870e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	4313      	orrs	r3, r2
 8008718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	021b      	lsls	r3, r3, #8
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	4313      	orrs	r3, r2
 800872c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a1d      	ldr	r2, [pc, #116]	; (80087a8 <TIM_OC3_SetConfig+0xd0>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d10d      	bne.n	8008752 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800873c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	021b      	lsls	r3, r3, #8
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	4313      	orrs	r3, r2
 8008748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a14      	ldr	r2, [pc, #80]	; (80087a8 <TIM_OC3_SetConfig+0xd0>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d113      	bne.n	8008782 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	011b      	lsls	r3, r3, #4
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	4313      	orrs	r3, r2
 8008774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	011b      	lsls	r3, r3, #4
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	4313      	orrs	r3, r2
 8008780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	621a      	str	r2, [r3, #32]
}
 800879c:	bf00      	nop
 800879e:	371c      	adds	r7, #28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bc80      	pop	{r7}
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	40012c00 	.word	0x40012c00

080087ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b087      	sub	sp, #28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	021b      	lsls	r3, r3, #8
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	031b      	lsls	r3, r3, #12
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	4313      	orrs	r3, r2
 8008802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a0f      	ldr	r2, [pc, #60]	; (8008844 <TIM_OC4_SetConfig+0x98>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d109      	bne.n	8008820 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	019b      	lsls	r3, r3, #6
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	4313      	orrs	r3, r2
 800881e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	693a      	ldr	r2, [r7, #16]
 8008838:	621a      	str	r2, [r3, #32]
}
 800883a:	bf00      	nop
 800883c:	371c      	adds	r7, #28
 800883e:	46bd      	mov	sp, r7
 8008840:	bc80      	pop	{r7}
 8008842:	4770      	bx	lr
 8008844:	40012c00 	.word	0x40012c00

08008848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008848:	b480      	push	{r7}
 800884a:	b087      	sub	sp, #28
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	f023 0201 	bic.w	r2, r3, #1
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	011b      	lsls	r3, r3, #4
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	4313      	orrs	r3, r2
 800887c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f023 030a 	bic.w	r3, r3, #10
 8008884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	4313      	orrs	r3, r2
 800888c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	621a      	str	r2, [r3, #32]
}
 800889a:	bf00      	nop
 800889c:	371c      	adds	r7, #28
 800889e:	46bd      	mov	sp, r7
 80088a0:	bc80      	pop	{r7}
 80088a2:	4770      	bx	lr

080088a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b087      	sub	sp, #28
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6a1b      	ldr	r3, [r3, #32]
 80088b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	f023 0210 	bic.w	r2, r3, #16
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	031b      	lsls	r3, r3, #12
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	011b      	lsls	r3, r3, #4
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	621a      	str	r2, [r3, #32]
}
 80088f8:	bf00      	nop
 80088fa:	371c      	adds	r7, #28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bc80      	pop	{r7}
 8008900:	4770      	bx	lr

08008902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008902:	b480      	push	{r7}
 8008904:	b085      	sub	sp, #20
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4313      	orrs	r3, r2
 8008920:	f043 0307 	orr.w	r3, r3, #7
 8008924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	609a      	str	r2, [r3, #8]
}
 800892c:	bf00      	nop
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	bc80      	pop	{r7}
 8008934:	4770      	bx	lr

08008936 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008936:	b480      	push	{r7}
 8008938:	b087      	sub	sp, #28
 800893a:	af00      	add	r7, sp, #0
 800893c:	60f8      	str	r0, [r7, #12]
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	607a      	str	r2, [r7, #4]
 8008942:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008950:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	021a      	lsls	r2, r3, #8
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	431a      	orrs	r2, r3
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	4313      	orrs	r3, r2
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	4313      	orrs	r3, r2
 8008962:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	609a      	str	r2, [r3, #8]
}
 800896a:	bf00      	nop
 800896c:	371c      	adds	r7, #28
 800896e:	46bd      	mov	sp, r7
 8008970:	bc80      	pop	{r7}
 8008972:	4770      	bx	lr

08008974 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f003 031f 	and.w	r3, r3, #31
 8008986:	2201      	movs	r2, #1
 8008988:	fa02 f303 	lsl.w	r3, r2, r3
 800898c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6a1a      	ldr	r2, [r3, #32]
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	43db      	mvns	r3, r3
 8008996:	401a      	ands	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6a1a      	ldr	r2, [r3, #32]
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f003 031f 	and.w	r3, r3, #31
 80089a6:	6879      	ldr	r1, [r7, #4]
 80089a8:	fa01 f303 	lsl.w	r3, r1, r3
 80089ac:	431a      	orrs	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	621a      	str	r2, [r3, #32]
}
 80089b2:	bf00      	nop
 80089b4:	371c      	adds	r7, #28
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bc80      	pop	{r7}
 80089ba:	4770      	bx	lr

080089bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d101      	bne.n	80089d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089d0:	2302      	movs	r3, #2
 80089d2:	e046      	b.n	8008a62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2202      	movs	r2, #2
 80089e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a16      	ldr	r2, [pc, #88]	; (8008a6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d00e      	beq.n	8008a36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a20:	d009      	beq.n	8008a36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a12      	ldr	r2, [pc, #72]	; (8008a70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d004      	beq.n	8008a36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a10      	ldr	r2, [pc, #64]	; (8008a74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d10c      	bne.n	8008a50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bc80      	pop	{r7}
 8008a6a:	4770      	bx	lr
 8008a6c:	40012c00 	.word	0x40012c00
 8008a70:	40000400 	.word	0x40000400
 8008a74:	40000800 	.word	0x40000800

08008a78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d101      	bne.n	8008a94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008a90:	2302      	movs	r3, #2
 8008a92:	e03d      	b.n	8008b10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bc80      	pop	{r7}
 8008b18:	4770      	bx	lr

08008b1a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b082      	sub	sp, #8
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e042      	b.n	8008bb2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d106      	bne.n	8008b46 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f7fc fe77 	bl	8005834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2224      	movs	r2, #36	; 0x24
 8008b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68da      	ldr	r2, [r3, #12]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fdb8 	bl	80096d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	691a      	ldr	r2, [r3, #16]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	695a      	ldr	r2, [r3, #20]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2220      	movs	r2, #32
 8008ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b08a      	sub	sp, #40	; 0x28
 8008bbe:	af02      	add	r7, sp, #8
 8008bc0:	60f8      	str	r0, [r7, #12]
 8008bc2:	60b9      	str	r1, [r7, #8]
 8008bc4:	603b      	str	r3, [r7, #0]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b20      	cmp	r3, #32
 8008bd8:	d175      	bne.n	8008cc6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <HAL_UART_Transmit+0x2c>
 8008be0:	88fb      	ldrh	r3, [r7, #6]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e06e      	b.n	8008cc8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2221      	movs	r2, #33	; 0x21
 8008bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bf8:	f7fc ffe8 	bl	8005bcc <HAL_GetTick>
 8008bfc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	88fa      	ldrh	r2, [r7, #6]
 8008c02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	88fa      	ldrh	r2, [r7, #6]
 8008c08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c12:	d108      	bne.n	8008c26 <HAL_UART_Transmit+0x6c>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d104      	bne.n	8008c26 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	61bb      	str	r3, [r7, #24]
 8008c24:	e003      	b.n	8008c2e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008c2e:	e02e      	b.n	8008c8e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	2200      	movs	r2, #0
 8008c38:	2180      	movs	r1, #128	; 0x80
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 fb1d 	bl	800927a <UART_WaitOnFlagUntilTimeout>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d005      	beq.n	8008c52 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e03a      	b.n	8008cc8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10b      	bne.n	8008c70 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c66:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	3302      	adds	r3, #2
 8008c6c:	61bb      	str	r3, [r7, #24]
 8008c6e:	e007      	b.n	8008c80 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	781a      	ldrb	r2, [r3, #0]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	3b01      	subs	r3, #1
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1cb      	bne.n	8008c30 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	2140      	movs	r1, #64	; 0x40
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 fae9 	bl	800927a <UART_WaitOnFlagUntilTimeout>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d005      	beq.n	8008cba <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e006      	b.n	8008cc8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	e000      	b.n	8008cc8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008cc6:	2302      	movs	r3, #2
  }
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3720      	adds	r7, #32
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b20      	cmp	r3, #32
 8008ce8:	d112      	bne.n	8008d10 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <HAL_UART_Receive_IT+0x26>
 8008cf0:	88fb      	ldrh	r3, [r7, #6]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e00b      	b.n	8008d12 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d00:	88fb      	ldrh	r3, [r7, #6]
 8008d02:	461a      	mov	r2, r3
 8008d04:	68b9      	ldr	r1, [r7, #8]
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f000 fb10 	bl	800932c <UART_Start_Receive_IT>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	e000      	b.n	8008d12 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008d10:	2302      	movs	r3, #2
  }
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b0ba      	sub	sp, #232	; 0xe8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008d42:	2300      	movs	r3, #0
 8008d44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d52:	f003 030f 	and.w	r3, r3, #15
 8008d56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10f      	bne.n	8008d82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d66:	f003 0320 	and.w	r3, r3, #32
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d009      	beq.n	8008d82 <HAL_UART_IRQHandler+0x66>
 8008d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d72:	f003 0320 	and.w	r3, r3, #32
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fbec 	bl	8009558 <UART_Receive_IT>
      return;
 8008d80:	e25b      	b.n	800923a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f000 80de 	beq.w	8008f48 <HAL_UART_IRQHandler+0x22c>
 8008d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d106      	bne.n	8008da6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 80d1 	beq.w	8008f48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00b      	beq.n	8008dca <HAL_UART_IRQHandler+0xae>
 8008db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d005      	beq.n	8008dca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc2:	f043 0201 	orr.w	r2, r3, #1
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dce:	f003 0304 	and.w	r3, r3, #4
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00b      	beq.n	8008dee <HAL_UART_IRQHandler+0xd2>
 8008dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d005      	beq.n	8008dee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de6:	f043 0202 	orr.w	r2, r3, #2
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008df2:	f003 0302 	and.w	r3, r3, #2
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00b      	beq.n	8008e12 <HAL_UART_IRQHandler+0xf6>
 8008dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dfe:	f003 0301 	and.w	r3, r3, #1
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d005      	beq.n	8008e12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e0a:	f043 0204 	orr.w	r2, r3, #4
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e16:	f003 0308 	and.w	r3, r3, #8
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d011      	beq.n	8008e42 <HAL_UART_IRQHandler+0x126>
 8008e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e22:	f003 0320 	and.w	r3, r3, #32
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d105      	bne.n	8008e36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d005      	beq.n	8008e42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e3a:	f043 0208 	orr.w	r2, r3, #8
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 81f2 	beq.w	8009230 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e50:	f003 0320 	and.w	r3, r3, #32
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d008      	beq.n	8008e6a <HAL_UART_IRQHandler+0x14e>
 8008e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e5c:	f003 0320 	and.w	r3, r3, #32
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d002      	beq.n	8008e6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fb77 	bl	8009558 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	695b      	ldr	r3, [r3, #20]
 8008e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	bf14      	ite	ne
 8008e78:	2301      	movne	r3, #1
 8008e7a:	2300      	moveq	r3, #0
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e86:	f003 0308 	and.w	r3, r3, #8
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d103      	bne.n	8008e96 <HAL_UART_IRQHandler+0x17a>
 8008e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d04f      	beq.n	8008f36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fa81 	bl	800939e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d041      	beq.n	8008f2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3314      	adds	r3, #20
 8008eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008eb8:	e853 3f00 	ldrex	r3, [r3]
 8008ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3314      	adds	r3, #20
 8008ed2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ed6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ede:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ee2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ee6:	e841 2300 	strex	r3, r2, [r1]
 8008eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1d9      	bne.n	8008eaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d013      	beq.n	8008f26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f02:	4a7e      	ldr	r2, [pc, #504]	; (80090fc <HAL_UART_IRQHandler+0x3e0>)
 8008f04:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fc ffd4 	bl	8005eb8 <HAL_DMA_Abort_IT>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d016      	beq.n	8008f44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008f20:	4610      	mov	r0, r2
 8008f22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f24:	e00e      	b.n	8008f44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f993 	bl	8009252 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f2c:	e00a      	b.n	8008f44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f98f 	bl	8009252 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f34:	e006      	b.n	8008f44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f98b 	bl	8009252 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008f42:	e175      	b.n	8009230 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f44:	bf00      	nop
    return;
 8008f46:	e173      	b.n	8009230 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	f040 814f 	bne.w	80091f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f56:	f003 0310 	and.w	r3, r3, #16
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 8148 	beq.w	80091f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f64:	f003 0310 	and.w	r3, r3, #16
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f000 8141 	beq.w	80091f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60bb      	str	r3, [r7, #8]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	60bb      	str	r3, [r7, #8]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	60bb      	str	r3, [r7, #8]
 8008f82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 80b6 	beq.w	8009100 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fa0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 8145 	beq.w	8009234 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	f080 813e 	bcs.w	8009234 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	f000 8088 	beq.w	80090dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	330c      	adds	r3, #12
 8008fd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fda:	e853 3f00 	ldrex	r3, [r3]
 8008fde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008fe2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	330c      	adds	r3, #12
 8008ff4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008ff8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ffc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009000:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009004:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009008:	e841 2300 	strex	r3, r2, [r1]
 800900c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1d9      	bne.n	8008fcc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3314      	adds	r3, #20
 800901e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009022:	e853 3f00 	ldrex	r3, [r3]
 8009026:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800902a:	f023 0301 	bic.w	r3, r3, #1
 800902e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3314      	adds	r3, #20
 8009038:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800903c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009040:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009042:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009044:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009048:	e841 2300 	strex	r3, r2, [r1]
 800904c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800904e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1e1      	bne.n	8009018 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3314      	adds	r3, #20
 800905a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800905e:	e853 3f00 	ldrex	r3, [r3]
 8009062:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800906a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3314      	adds	r3, #20
 8009074:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009078:	66fa      	str	r2, [r7, #108]	; 0x6c
 800907a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800907e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009080:	e841 2300 	strex	r3, r2, [r1]
 8009084:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009086:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1e3      	bne.n	8009054 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2220      	movs	r2, #32
 8009090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	330c      	adds	r3, #12
 80090a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090a4:	e853 3f00 	ldrex	r3, [r3]
 80090a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ac:	f023 0310 	bic.w	r3, r3, #16
 80090b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	330c      	adds	r3, #12
 80090ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80090be:	65ba      	str	r2, [r7, #88]	; 0x58
 80090c0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090c6:	e841 2300 	strex	r3, r2, [r1]
 80090ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1e3      	bne.n	800909a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fc feb3 	bl	8005e42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2202      	movs	r2, #2
 80090e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f8b6 	bl	8009264 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80090f8:	e09c      	b.n	8009234 <HAL_UART_IRQHandler+0x518>
 80090fa:	bf00      	nop
 80090fc:	08009463 	.word	0x08009463
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009108:	b29b      	uxth	r3, r3
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009114:	b29b      	uxth	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 808e 	beq.w	8009238 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800911c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009120:	2b00      	cmp	r3, #0
 8009122:	f000 8089 	beq.w	8009238 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	330c      	adds	r3, #12
 800912c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009130:	e853 3f00 	ldrex	r3, [r3]
 8009134:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009138:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800913c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	330c      	adds	r3, #12
 8009146:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800914a:	647a      	str	r2, [r7, #68]	; 0x44
 800914c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e3      	bne.n	8009126 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3314      	adds	r3, #20
 8009164:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	e853 3f00 	ldrex	r3, [r3]
 800916c:	623b      	str	r3, [r7, #32]
   return(result);
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	f023 0301 	bic.w	r3, r3, #1
 8009174:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3314      	adds	r3, #20
 800917e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009182:	633a      	str	r2, [r7, #48]	; 0x30
 8009184:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800918a:	e841 2300 	strex	r3, r2, [r1]
 800918e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1e3      	bne.n	800915e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2220      	movs	r2, #32
 800919a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	330c      	adds	r3, #12
 80091aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	e853 3f00 	ldrex	r3, [r3]
 80091b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f023 0310 	bic.w	r3, r3, #16
 80091ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	330c      	adds	r3, #12
 80091c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80091c8:	61fa      	str	r2, [r7, #28]
 80091ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	69b9      	ldr	r1, [r7, #24]
 80091ce:	69fa      	ldr	r2, [r7, #28]
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	617b      	str	r3, [r7, #20]
   return(result);
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e3      	bne.n	80091a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2202      	movs	r2, #2
 80091e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091e6:	4619      	mov	r1, r3
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f83b 	bl	8009264 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091ee:	e023      	b.n	8009238 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80091f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d009      	beq.n	8009210 <HAL_UART_IRQHandler+0x4f4>
 80091fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009204:	2b00      	cmp	r3, #0
 8009206:	d003      	beq.n	8009210 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f93e 	bl	800948a <UART_Transmit_IT>
    return;
 800920e:	e014      	b.n	800923a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00e      	beq.n	800923a <HAL_UART_IRQHandler+0x51e>
 800921c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009224:	2b00      	cmp	r3, #0
 8009226:	d008      	beq.n	800923a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f97d 	bl	8009528 <UART_EndTransmit_IT>
    return;
 800922e:	e004      	b.n	800923a <HAL_UART_IRQHandler+0x51e>
    return;
 8009230:	bf00      	nop
 8009232:	e002      	b.n	800923a <HAL_UART_IRQHandler+0x51e>
      return;
 8009234:	bf00      	nop
 8009236:	e000      	b.n	800923a <HAL_UART_IRQHandler+0x51e>
      return;
 8009238:	bf00      	nop
  }
}
 800923a:	37e8      	adds	r7, #232	; 0xe8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	bc80      	pop	{r7}
 8009250:	4770      	bx	lr

08009252 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009252:	b480      	push	{r7}
 8009254:	b083      	sub	sp, #12
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	bc80      	pop	{r7}
 8009262:	4770      	bx	lr

08009264 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	bc80      	pop	{r7}
 8009278:	4770      	bx	lr

0800927a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b086      	sub	sp, #24
 800927e:	af00      	add	r7, sp, #0
 8009280:	60f8      	str	r0, [r7, #12]
 8009282:	60b9      	str	r1, [r7, #8]
 8009284:	603b      	str	r3, [r7, #0]
 8009286:	4613      	mov	r3, r2
 8009288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800928a:	e03b      	b.n	8009304 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009292:	d037      	beq.n	8009304 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009294:	f7fc fc9a 	bl	8005bcc <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	6a3a      	ldr	r2, [r7, #32]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d302      	bcc.n	80092aa <UART_WaitOnFlagUntilTimeout+0x30>
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e03a      	b.n	8009324 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	f003 0304 	and.w	r3, r3, #4
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d023      	beq.n	8009304 <UART_WaitOnFlagUntilTimeout+0x8a>
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2b80      	cmp	r3, #128	; 0x80
 80092c0:	d020      	beq.n	8009304 <UART_WaitOnFlagUntilTimeout+0x8a>
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2b40      	cmp	r3, #64	; 0x40
 80092c6:	d01d      	beq.n	8009304 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 0308 	and.w	r3, r3, #8
 80092d2:	2b08      	cmp	r3, #8
 80092d4:	d116      	bne.n	8009304 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80092d6:	2300      	movs	r3, #0
 80092d8:	617b      	str	r3, [r7, #20]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	617b      	str	r3, [r7, #20]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	617b      	str	r3, [r7, #20]
 80092ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 f856 	bl	800939e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2208      	movs	r2, #8
 80092f6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e00f      	b.n	8009324 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	4013      	ands	r3, r2
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	429a      	cmp	r2, r3
 8009312:	bf0c      	ite	eq
 8009314:	2301      	moveq	r3, #1
 8009316:	2300      	movne	r3, #0
 8009318:	b2db      	uxtb	r3, r3
 800931a:	461a      	mov	r2, r3
 800931c:	79fb      	ldrb	r3, [r7, #7]
 800931e:	429a      	cmp	r2, r3
 8009320:	d0b4      	beq.n	800928c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	4613      	mov	r3, r2
 8009338:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	88fa      	ldrh	r2, [r7, #6]
 8009344:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	88fa      	ldrh	r2, [r7, #6]
 800934a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2222      	movs	r2, #34	; 0x22
 8009356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d007      	beq.n	8009372 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68da      	ldr	r2, [r3, #12]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009370:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	695a      	ldr	r2, [r3, #20]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f042 0201 	orr.w	r2, r2, #1
 8009380:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68da      	ldr	r2, [r3, #12]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f042 0220 	orr.w	r2, r2, #32
 8009390:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	bc80      	pop	{r7}
 800939c:	4770      	bx	lr

0800939e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800939e:	b480      	push	{r7}
 80093a0:	b095      	sub	sp, #84	; 0x54
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	330c      	adds	r3, #12
 80093ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b0:	e853 3f00 	ldrex	r3, [r3]
 80093b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	330c      	adds	r3, #12
 80093c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80093c6:	643a      	str	r2, [r7, #64]	; 0x40
 80093c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093ce:	e841 2300 	strex	r3, r2, [r1]
 80093d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1e5      	bne.n	80093a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3314      	adds	r3, #20
 80093e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e2:	6a3b      	ldr	r3, [r7, #32]
 80093e4:	e853 3f00 	ldrex	r3, [r3]
 80093e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	f023 0301 	bic.w	r3, r3, #1
 80093f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3314      	adds	r3, #20
 80093f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009402:	e841 2300 	strex	r3, r2, [r1]
 8009406:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1e5      	bne.n	80093da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009412:	2b01      	cmp	r3, #1
 8009414:	d119      	bne.n	800944a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	330c      	adds	r3, #12
 800941c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	e853 3f00 	ldrex	r3, [r3]
 8009424:	60bb      	str	r3, [r7, #8]
   return(result);
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f023 0310 	bic.w	r3, r3, #16
 800942c:	647b      	str	r3, [r7, #68]	; 0x44
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	330c      	adds	r3, #12
 8009434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009436:	61ba      	str	r2, [r7, #24]
 8009438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943a:	6979      	ldr	r1, [r7, #20]
 800943c:	69ba      	ldr	r2, [r7, #24]
 800943e:	e841 2300 	strex	r3, r2, [r1]
 8009442:	613b      	str	r3, [r7, #16]
   return(result);
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1e5      	bne.n	8009416 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2220      	movs	r2, #32
 800944e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009458:	bf00      	nop
 800945a:	3754      	adds	r7, #84	; 0x54
 800945c:	46bd      	mov	sp, r7
 800945e:	bc80      	pop	{r7}
 8009460:	4770      	bx	lr

08009462 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b084      	sub	sp, #16
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f7ff fee8 	bl	8009252 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009482:	bf00      	nop
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800948a:	b480      	push	{r7}
 800948c:	b085      	sub	sp, #20
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b21      	cmp	r3, #33	; 0x21
 800949c:	d13e      	bne.n	800951c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094a6:	d114      	bne.n	80094d2 <UART_Transmit_IT+0x48>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d110      	bne.n	80094d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a1b      	ldr	r3, [r3, #32]
 80094b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	881b      	ldrh	r3, [r3, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	1c9a      	adds	r2, r3, #2
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	621a      	str	r2, [r3, #32]
 80094d0:	e008      	b.n	80094e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	1c59      	adds	r1, r3, #1
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	6211      	str	r1, [r2, #32]
 80094dc:	781a      	ldrb	r2, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	3b01      	subs	r3, #1
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	4619      	mov	r1, r3
 80094f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10f      	bne.n	8009518 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68da      	ldr	r2, [r3, #12]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009506:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68da      	ldr	r2, [r3, #12]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009516:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	e000      	b.n	800951e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800951c:	2302      	movs	r3, #2
  }
}
 800951e:	4618      	mov	r0, r3
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	bc80      	pop	{r7}
 8009526:	4770      	bx	lr

08009528 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800953e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2220      	movs	r2, #32
 8009544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7ff fe79 	bl	8009240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08c      	sub	sp, #48	; 0x30
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b22      	cmp	r3, #34	; 0x22
 800956a:	f040 80ae 	bne.w	80096ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009576:	d117      	bne.n	80095a8 <UART_Receive_IT+0x50>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d113      	bne.n	80095a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009580:	2300      	movs	r3, #0
 8009582:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009588:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	b29b      	uxth	r3, r3
 8009592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009596:	b29a      	uxth	r2, r3
 8009598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a0:	1c9a      	adds	r2, r3, #2
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	629a      	str	r2, [r3, #40]	; 0x28
 80095a6:	e026      	b.n	80095f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ba:	d007      	beq.n	80095cc <UART_Receive_IT+0x74>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10a      	bne.n	80095da <UART_Receive_IT+0x82>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d106      	bne.n	80095da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d6:	701a      	strb	r2, [r3, #0]
 80095d8:	e008      	b.n	80095ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f0:	1c5a      	adds	r2, r3, #1
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	3b01      	subs	r3, #1
 80095fe:	b29b      	uxth	r3, r3
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	4619      	mov	r1, r3
 8009604:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009606:	2b00      	cmp	r3, #0
 8009608:	d15d      	bne.n	80096c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68da      	ldr	r2, [r3, #12]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0220 	bic.w	r2, r2, #32
 8009618:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68da      	ldr	r2, [r3, #12]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009628:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	695a      	ldr	r2, [r3, #20]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f022 0201 	bic.w	r2, r2, #1
 8009638:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2220      	movs	r2, #32
 800963e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964c:	2b01      	cmp	r3, #1
 800964e:	d135      	bne.n	80096bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	330c      	adds	r3, #12
 800965c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	e853 3f00 	ldrex	r3, [r3]
 8009664:	613b      	str	r3, [r7, #16]
   return(result);
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	f023 0310 	bic.w	r3, r3, #16
 800966c:	627b      	str	r3, [r7, #36]	; 0x24
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	330c      	adds	r3, #12
 8009674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009676:	623a      	str	r2, [r7, #32]
 8009678:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967a:	69f9      	ldr	r1, [r7, #28]
 800967c:	6a3a      	ldr	r2, [r7, #32]
 800967e:	e841 2300 	strex	r3, r2, [r1]
 8009682:	61bb      	str	r3, [r7, #24]
   return(result);
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d1e5      	bne.n	8009656 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0310 	and.w	r3, r3, #16
 8009694:	2b10      	cmp	r3, #16
 8009696:	d10a      	bne.n	80096ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009698:	2300      	movs	r3, #0
 800969a:	60fb      	str	r3, [r7, #12]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	60fb      	str	r3, [r7, #12]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7ff fdd5 	bl	8009264 <HAL_UARTEx_RxEventCallback>
 80096ba:	e002      	b.n	80096c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7fa fc65 	bl	8003f8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	e002      	b.n	80096cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	e000      	b.n	80096cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80096ca:	2302      	movs	r3, #2
  }
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3730      	adds	r7, #48	; 0x30
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68da      	ldr	r2, [r3, #12]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	430a      	orrs	r2, r1
 80096f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	689a      	ldr	r2, [r3, #8]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	431a      	orrs	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	4313      	orrs	r3, r2
 8009702:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800970e:	f023 030c 	bic.w	r3, r3, #12
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	6812      	ldr	r2, [r2, #0]
 8009716:	68b9      	ldr	r1, [r7, #8]
 8009718:	430b      	orrs	r3, r1
 800971a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	699a      	ldr	r2, [r3, #24]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a2c      	ldr	r2, [pc, #176]	; (80097e8 <UART_SetConfig+0x114>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d103      	bne.n	8009744 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800973c:	f7fe fb3e 	bl	8007dbc <HAL_RCC_GetPCLK2Freq>
 8009740:	60f8      	str	r0, [r7, #12]
 8009742:	e002      	b.n	800974a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009744:	f7fe fb26 	bl	8007d94 <HAL_RCC_GetPCLK1Freq>
 8009748:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	4613      	mov	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	009a      	lsls	r2, r3, #2
 8009754:	441a      	add	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009760:	4a22      	ldr	r2, [pc, #136]	; (80097ec <UART_SetConfig+0x118>)
 8009762:	fba2 2303 	umull	r2, r3, r2, r3
 8009766:	095b      	lsrs	r3, r3, #5
 8009768:	0119      	lsls	r1, r3, #4
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	4613      	mov	r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	009a      	lsls	r2, r3, #2
 8009774:	441a      	add	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009780:	4b1a      	ldr	r3, [pc, #104]	; (80097ec <UART_SetConfig+0x118>)
 8009782:	fba3 0302 	umull	r0, r3, r3, r2
 8009786:	095b      	lsrs	r3, r3, #5
 8009788:	2064      	movs	r0, #100	; 0x64
 800978a:	fb00 f303 	mul.w	r3, r0, r3
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	011b      	lsls	r3, r3, #4
 8009792:	3332      	adds	r3, #50	; 0x32
 8009794:	4a15      	ldr	r2, [pc, #84]	; (80097ec <UART_SetConfig+0x118>)
 8009796:	fba2 2303 	umull	r2, r3, r2, r3
 800979a:	095b      	lsrs	r3, r3, #5
 800979c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097a0:	4419      	add	r1, r3
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	4613      	mov	r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	009a      	lsls	r2, r3, #2
 80097ac:	441a      	add	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80097b8:	4b0c      	ldr	r3, [pc, #48]	; (80097ec <UART_SetConfig+0x118>)
 80097ba:	fba3 0302 	umull	r0, r3, r3, r2
 80097be:	095b      	lsrs	r3, r3, #5
 80097c0:	2064      	movs	r0, #100	; 0x64
 80097c2:	fb00 f303 	mul.w	r3, r0, r3
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	011b      	lsls	r3, r3, #4
 80097ca:	3332      	adds	r3, #50	; 0x32
 80097cc:	4a07      	ldr	r2, [pc, #28]	; (80097ec <UART_SetConfig+0x118>)
 80097ce:	fba2 2303 	umull	r2, r3, r2, r3
 80097d2:	095b      	lsrs	r3, r3, #5
 80097d4:	f003 020f 	and.w	r2, r3, #15
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	440a      	add	r2, r1
 80097de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80097e0:	bf00      	nop
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	40013800 	.word	0x40013800
 80097ec:	51eb851f 	.word	0x51eb851f

080097f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80097fa:	2300      	movs	r3, #0
 80097fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80097fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009802:	2b84      	cmp	r3, #132	; 0x84
 8009804:	d005      	beq.n	8009812 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009806:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	4413      	add	r3, r2
 800980e:	3303      	adds	r3, #3
 8009810:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009812:	68fb      	ldr	r3, [r7, #12]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	bc80      	pop	{r7}
 800981c:	4770      	bx	lr

0800981e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009822:	f000 fad9 	bl	8009dd8 <vTaskStartScheduler>
  
  return osOK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	bd80      	pop	{r7, pc}

0800982c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800982c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800982e:	b089      	sub	sp, #36	; 0x24
 8009830:	af04      	add	r7, sp, #16
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d020      	beq.n	8009880 <osThreadCreate+0x54>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d01c      	beq.n	8009880 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	685c      	ldr	r4, [r3, #4]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681d      	ldr	r5, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	691e      	ldr	r6, [r3, #16]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff ffc9 	bl	80097f0 <makeFreeRtosPriority>
 800985e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009868:	9202      	str	r2, [sp, #8]
 800986a:	9301      	str	r3, [sp, #4]
 800986c:	9100      	str	r1, [sp, #0]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	4632      	mov	r2, r6
 8009872:	4629      	mov	r1, r5
 8009874:	4620      	mov	r0, r4
 8009876:	f000 f8e8 	bl	8009a4a <xTaskCreateStatic>
 800987a:	4603      	mov	r3, r0
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	e01c      	b.n	80098ba <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685c      	ldr	r4, [r3, #4]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800988c:	b29e      	uxth	r6, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009894:	4618      	mov	r0, r3
 8009896:	f7ff ffab 	bl	80097f0 <makeFreeRtosPriority>
 800989a:	4602      	mov	r2, r0
 800989c:	f107 030c 	add.w	r3, r7, #12
 80098a0:	9301      	str	r3, [sp, #4]
 80098a2:	9200      	str	r2, [sp, #0]
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	4632      	mov	r2, r6
 80098a8:	4629      	mov	r1, r5
 80098aa:	4620      	mov	r0, r4
 80098ac:	f000 f92a 	bl	8009b04 <xTaskCreate>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d001      	beq.n	80098ba <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	e000      	b.n	80098bc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80098ba:	68fb      	ldr	r3, [r7, #12]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3714      	adds	r7, #20
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080098c4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <osDelay+0x16>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	e000      	b.n	80098dc <osDelay+0x18>
 80098da:	2301      	movs	r3, #1
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 fa47 	bl	8009d70 <vTaskDelay>
  
  return osOK;
 80098e2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f103 0208 	add.w	r2, r3, #8
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f04f 32ff 	mov.w	r2, #4294967295
 8009904:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f103 0208 	add.w	r2, r3, #8
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f103 0208 	add.w	r2, r3, #8
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	bc80      	pop	{r7}
 8009928:	4770      	bx	lr

0800992a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800992a:	b480      	push	{r7}
 800992c:	b083      	sub	sp, #12
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	bc80      	pop	{r7}
 8009940:	4770      	bx	lr

08009942 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009942:	b480      	push	{r7}
 8009944:	b085      	sub	sp, #20
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	689a      	ldr	r2, [r3, #8]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	683a      	ldr	r2, [r7, #0]
 8009966:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	601a      	str	r2, [r3, #0]
}
 800997e:	bf00      	nop
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	bc80      	pop	{r7}
 8009986:	4770      	bx	lr

08009988 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800999e:	d103      	bne.n	80099a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	60fb      	str	r3, [r7, #12]
 80099a6:	e00c      	b.n	80099c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3308      	adds	r3, #8
 80099ac:	60fb      	str	r3, [r7, #12]
 80099ae:	e002      	b.n	80099b6 <vListInsert+0x2e>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	60fb      	str	r3, [r7, #12]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d2f6      	bcs.n	80099b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	685a      	ldr	r2, [r3, #4]
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	683a      	ldr	r2, [r7, #0]
 80099dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	601a      	str	r2, [r3, #0]
}
 80099ee:	bf00      	nop
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bc80      	pop	{r7}
 80099f6:	4770      	bx	lr

080099f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	6892      	ldr	r2, [r2, #8]
 8009a0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	6852      	ldr	r2, [r2, #4]
 8009a18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d103      	bne.n	8009a2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	689a      	ldr	r2, [r3, #8]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	1e5a      	subs	r2, r3, #1
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bc80      	pop	{r7}
 8009a48:	4770      	bx	lr

08009a4a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b08e      	sub	sp, #56	; 0x38
 8009a4e:	af04      	add	r7, sp, #16
 8009a50:	60f8      	str	r0, [r7, #12]
 8009a52:	60b9      	str	r1, [r7, #8]
 8009a54:	607a      	str	r2, [r7, #4]
 8009a56:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10a      	bne.n	8009a74 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a70:	bf00      	nop
 8009a72:	e7fe      	b.n	8009a72 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10a      	bne.n	8009a90 <xTaskCreateStatic+0x46>
	__asm volatile
 8009a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	61fb      	str	r3, [r7, #28]
}
 8009a8c:	bf00      	nop
 8009a8e:	e7fe      	b.n	8009a8e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a90:	2354      	movs	r3, #84	; 0x54
 8009a92:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	2b54      	cmp	r3, #84	; 0x54
 8009a98:	d00a      	beq.n	8009ab0 <xTaskCreateStatic+0x66>
	__asm volatile
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	61bb      	str	r3, [r7, #24]
}
 8009aac:	bf00      	nop
 8009aae:	e7fe      	b.n	8009aae <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ab0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d01e      	beq.n	8009af6 <xTaskCreateStatic+0xac>
 8009ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d01b      	beq.n	8009af6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ac6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	2202      	movs	r2, #2
 8009acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	9303      	str	r3, [sp, #12]
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	9302      	str	r3, [sp, #8]
 8009ad8:	f107 0314 	add.w	r3, r7, #20
 8009adc:	9301      	str	r3, [sp, #4]
 8009ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	68b9      	ldr	r1, [r7, #8]
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f000 f850 	bl	8009b8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009af0:	f000 f8d4 	bl	8009c9c <prvAddNewTaskToReadyList>
 8009af4:	e001      	b.n	8009afa <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009afa:	697b      	ldr	r3, [r7, #20]
	}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3728      	adds	r7, #40	; 0x28
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08c      	sub	sp, #48	; 0x30
 8009b08:	af04      	add	r7, sp, #16
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	603b      	str	r3, [r7, #0]
 8009b10:	4613      	mov	r3, r2
 8009b12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009b14:	88fb      	ldrh	r3, [r7, #6]
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 fe89 	bl	800a830 <pvPortMalloc>
 8009b1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00e      	beq.n	8009b44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b26:	2054      	movs	r0, #84	; 0x54
 8009b28:	f000 fe82 	bl	800a830 <pvPortMalloc>
 8009b2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	631a      	str	r2, [r3, #48]	; 0x30
 8009b3a:	e005      	b.n	8009b48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b3c:	6978      	ldr	r0, [r7, #20]
 8009b3e:	f000 ff43 	bl	800a9c8 <vPortFree>
 8009b42:	e001      	b.n	8009b48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b44:	2300      	movs	r3, #0
 8009b46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d017      	beq.n	8009b7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b56:	88fa      	ldrh	r2, [r7, #6]
 8009b58:	2300      	movs	r3, #0
 8009b5a:	9303      	str	r3, [sp, #12]
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	9302      	str	r3, [sp, #8]
 8009b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b62:	9301      	str	r3, [sp, #4]
 8009b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	68b9      	ldr	r1, [r7, #8]
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f000 f80e 	bl	8009b8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b72:	69f8      	ldr	r0, [r7, #28]
 8009b74:	f000 f892 	bl	8009c9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	61bb      	str	r3, [r7, #24]
 8009b7c:	e002      	b.n	8009b84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b84:	69bb      	ldr	r3, [r7, #24]
	}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3720      	adds	r7, #32
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b088      	sub	sp, #32
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	60f8      	str	r0, [r7, #12]
 8009b96:	60b9      	str	r1, [r7, #8]
 8009b98:	607a      	str	r2, [r7, #4]
 8009b9a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4413      	add	r3, r2
 8009bac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	f023 0307 	bic.w	r3, r3, #7
 8009bb4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	f003 0307 	and.w	r3, r3, #7
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00a      	beq.n	8009bd6 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	617b      	str	r3, [r7, #20]
}
 8009bd2:	bf00      	nop
 8009bd4:	e7fe      	b.n	8009bd4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d01f      	beq.n	8009c1c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bdc:	2300      	movs	r3, #0
 8009bde:	61fb      	str	r3, [r7, #28]
 8009be0:	e012      	b.n	8009c08 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	4413      	add	r3, r2
 8009be8:	7819      	ldrb	r1, [r3, #0]
 8009bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	4413      	add	r3, r2
 8009bf0:	3334      	adds	r3, #52	; 0x34
 8009bf2:	460a      	mov	r2, r1
 8009bf4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d006      	beq.n	8009c10 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	3301      	adds	r3, #1
 8009c06:	61fb      	str	r3, [r7, #28]
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	2b0f      	cmp	r3, #15
 8009c0c:	d9e9      	bls.n	8009be2 <prvInitialiseNewTask+0x54>
 8009c0e:	e000      	b.n	8009c12 <prvInitialiseNewTask+0x84>
			{
				break;
 8009c10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c1a:	e003      	b.n	8009c24 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c26:	2b06      	cmp	r3, #6
 8009c28:	d901      	bls.n	8009c2e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c2a:	2306      	movs	r3, #6
 8009c2c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c38:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	3304      	adds	r3, #4
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7ff fe70 	bl	800992a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4c:	3318      	adds	r3, #24
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7ff fe6b 	bl	800992a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5c:	f1c3 0207 	rsb	r2, r3, #7
 8009c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c78:	683a      	ldr	r2, [r7, #0]
 8009c7a:	68f9      	ldr	r1, [r7, #12]
 8009c7c:	69b8      	ldr	r0, [r7, #24]
 8009c7e:	f000 fc21 	bl	800a4c4 <pxPortInitialiseStack>
 8009c82:	4602      	mov	r2, r0
 8009c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d002      	beq.n	8009c94 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c94:	bf00      	nop
 8009c96:	3720      	adds	r7, #32
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ca4:	f000 fd02 	bl	800a6ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ca8:	4b2a      	ldr	r3, [pc, #168]	; (8009d54 <prvAddNewTaskToReadyList+0xb8>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	3301      	adds	r3, #1
 8009cae:	4a29      	ldr	r2, [pc, #164]	; (8009d54 <prvAddNewTaskToReadyList+0xb8>)
 8009cb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009cb2:	4b29      	ldr	r3, [pc, #164]	; (8009d58 <prvAddNewTaskToReadyList+0xbc>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d109      	bne.n	8009cce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009cba:	4a27      	ldr	r2, [pc, #156]	; (8009d58 <prvAddNewTaskToReadyList+0xbc>)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009cc0:	4b24      	ldr	r3, [pc, #144]	; (8009d54 <prvAddNewTaskToReadyList+0xb8>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d110      	bne.n	8009cea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009cc8:	f000 faba 	bl	800a240 <prvInitialiseTaskLists>
 8009ccc:	e00d      	b.n	8009cea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009cce:	4b23      	ldr	r3, [pc, #140]	; (8009d5c <prvAddNewTaskToReadyList+0xc0>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d109      	bne.n	8009cea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009cd6:	4b20      	ldr	r3, [pc, #128]	; (8009d58 <prvAddNewTaskToReadyList+0xbc>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d802      	bhi.n	8009cea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ce4:	4a1c      	ldr	r2, [pc, #112]	; (8009d58 <prvAddNewTaskToReadyList+0xbc>)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009cea:	4b1d      	ldr	r3, [pc, #116]	; (8009d60 <prvAddNewTaskToReadyList+0xc4>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	4a1b      	ldr	r2, [pc, #108]	; (8009d60 <prvAddNewTaskToReadyList+0xc4>)
 8009cf2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	409a      	lsls	r2, r3
 8009cfc:	4b19      	ldr	r3, [pc, #100]	; (8009d64 <prvAddNewTaskToReadyList+0xc8>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	4a18      	ldr	r2, [pc, #96]	; (8009d64 <prvAddNewTaskToReadyList+0xc8>)
 8009d04:	6013      	str	r3, [r2, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4a15      	ldr	r2, [pc, #84]	; (8009d68 <prvAddNewTaskToReadyList+0xcc>)
 8009d14:	441a      	add	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	3304      	adds	r3, #4
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	f7ff fe10 	bl	8009942 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d22:	f000 fcf3 	bl	800a70c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d26:	4b0d      	ldr	r3, [pc, #52]	; (8009d5c <prvAddNewTaskToReadyList+0xc0>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00e      	beq.n	8009d4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d2e:	4b0a      	ldr	r3, [pc, #40]	; (8009d58 <prvAddNewTaskToReadyList+0xbc>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d207      	bcs.n	8009d4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d3c:	4b0b      	ldr	r3, [pc, #44]	; (8009d6c <prvAddNewTaskToReadyList+0xd0>)
 8009d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d4c:	bf00      	nop
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	20000398 	.word	0x20000398
 8009d58:	20000298 	.word	0x20000298
 8009d5c:	200003a4 	.word	0x200003a4
 8009d60:	200003b4 	.word	0x200003b4
 8009d64:	200003a0 	.word	0x200003a0
 8009d68:	2000029c 	.word	0x2000029c
 8009d6c:	e000ed04 	.word	0xe000ed04

08009d70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d017      	beq.n	8009db2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009d82:	4b13      	ldr	r3, [pc, #76]	; (8009dd0 <vTaskDelay+0x60>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00a      	beq.n	8009da0 <vTaskDelay+0x30>
	__asm volatile
 8009d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	60bb      	str	r3, [r7, #8]
}
 8009d9c:	bf00      	nop
 8009d9e:	e7fe      	b.n	8009d9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009da0:	f000 f87a 	bl	8009e98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009da4:	2100      	movs	r1, #0
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fb26 	bl	800a3f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009dac:	f000 f882 	bl	8009eb4 <xTaskResumeAll>
 8009db0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d107      	bne.n	8009dc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009db8:	4b06      	ldr	r3, [pc, #24]	; (8009dd4 <vTaskDelay+0x64>)
 8009dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009dc8:	bf00      	nop
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	200003c0 	.word	0x200003c0
 8009dd4:	e000ed04 	.word	0xe000ed04

08009dd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b08a      	sub	sp, #40	; 0x28
 8009ddc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009dde:	2300      	movs	r3, #0
 8009de0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009de2:	2300      	movs	r3, #0
 8009de4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009de6:	463a      	mov	r2, r7
 8009de8:	1d39      	adds	r1, r7, #4
 8009dea:	f107 0308 	add.w	r3, r7, #8
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7f7 fe9a 	bl	8001b28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009df4:	6839      	ldr	r1, [r7, #0]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	9202      	str	r2, [sp, #8]
 8009dfc:	9301      	str	r3, [sp, #4]
 8009dfe:	2300      	movs	r3, #0
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	2300      	movs	r3, #0
 8009e04:	460a      	mov	r2, r1
 8009e06:	491e      	ldr	r1, [pc, #120]	; (8009e80 <vTaskStartScheduler+0xa8>)
 8009e08:	481e      	ldr	r0, [pc, #120]	; (8009e84 <vTaskStartScheduler+0xac>)
 8009e0a:	f7ff fe1e 	bl	8009a4a <xTaskCreateStatic>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	4a1d      	ldr	r2, [pc, #116]	; (8009e88 <vTaskStartScheduler+0xb0>)
 8009e12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009e14:	4b1c      	ldr	r3, [pc, #112]	; (8009e88 <vTaskStartScheduler+0xb0>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d002      	beq.n	8009e22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	617b      	str	r3, [r7, #20]
 8009e20:	e001      	b.n	8009e26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e22:	2300      	movs	r3, #0
 8009e24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d116      	bne.n	8009e5a <vTaskStartScheduler+0x82>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	613b      	str	r3, [r7, #16]
}
 8009e3e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e40:	4b12      	ldr	r3, [pc, #72]	; (8009e8c <vTaskStartScheduler+0xb4>)
 8009e42:	f04f 32ff 	mov.w	r2, #4294967295
 8009e46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e48:	4b11      	ldr	r3, [pc, #68]	; (8009e90 <vTaskStartScheduler+0xb8>)
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e4e:	4b11      	ldr	r3, [pc, #68]	; (8009e94 <vTaskStartScheduler+0xbc>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e54:	f000 fbb8 	bl	800a5c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e58:	e00e      	b.n	8009e78 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e60:	d10a      	bne.n	8009e78 <vTaskStartScheduler+0xa0>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	60fb      	str	r3, [r7, #12]
}
 8009e74:	bf00      	nop
 8009e76:	e7fe      	b.n	8009e76 <vTaskStartScheduler+0x9e>
}
 8009e78:	bf00      	nop
 8009e7a:	3718      	adds	r7, #24
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	0800d0d4 	.word	0x0800d0d4
 8009e84:	0800a211 	.word	0x0800a211
 8009e88:	200003bc 	.word	0x200003bc
 8009e8c:	200003b8 	.word	0x200003b8
 8009e90:	200003a4 	.word	0x200003a4
 8009e94:	2000039c 	.word	0x2000039c

08009e98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e98:	b480      	push	{r7}
 8009e9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e9c:	4b04      	ldr	r3, [pc, #16]	; (8009eb0 <vTaskSuspendAll+0x18>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	4a03      	ldr	r2, [pc, #12]	; (8009eb0 <vTaskSuspendAll+0x18>)
 8009ea4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009ea6:	bf00      	nop
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bc80      	pop	{r7}
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	200003c0 	.word	0x200003c0

08009eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009ec2:	4b41      	ldr	r3, [pc, #260]	; (8009fc8 <xTaskResumeAll+0x114>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10a      	bne.n	8009ee0 <xTaskResumeAll+0x2c>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	603b      	str	r3, [r7, #0]
}
 8009edc:	bf00      	nop
 8009ede:	e7fe      	b.n	8009ede <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ee0:	f000 fbe4 	bl	800a6ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ee4:	4b38      	ldr	r3, [pc, #224]	; (8009fc8 <xTaskResumeAll+0x114>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	4a37      	ldr	r2, [pc, #220]	; (8009fc8 <xTaskResumeAll+0x114>)
 8009eec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eee:	4b36      	ldr	r3, [pc, #216]	; (8009fc8 <xTaskResumeAll+0x114>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d161      	bne.n	8009fba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ef6:	4b35      	ldr	r3, [pc, #212]	; (8009fcc <xTaskResumeAll+0x118>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d05d      	beq.n	8009fba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009efe:	e02e      	b.n	8009f5e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f00:	4b33      	ldr	r3, [pc, #204]	; (8009fd0 <xTaskResumeAll+0x11c>)
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3318      	adds	r3, #24
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7ff fd73 	bl	80099f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3304      	adds	r3, #4
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7ff fd6e 	bl	80099f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f20:	2201      	movs	r2, #1
 8009f22:	409a      	lsls	r2, r3
 8009f24:	4b2b      	ldr	r3, [pc, #172]	; (8009fd4 <xTaskResumeAll+0x120>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	4a2a      	ldr	r2, [pc, #168]	; (8009fd4 <xTaskResumeAll+0x120>)
 8009f2c:	6013      	str	r3, [r2, #0]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f32:	4613      	mov	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4413      	add	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4a27      	ldr	r2, [pc, #156]	; (8009fd8 <xTaskResumeAll+0x124>)
 8009f3c:	441a      	add	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	3304      	adds	r3, #4
 8009f42:	4619      	mov	r1, r3
 8009f44:	4610      	mov	r0, r2
 8009f46:	f7ff fcfc 	bl	8009942 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4e:	4b23      	ldr	r3, [pc, #140]	; (8009fdc <xTaskResumeAll+0x128>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d302      	bcc.n	8009f5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009f58:	4b21      	ldr	r3, [pc, #132]	; (8009fe0 <xTaskResumeAll+0x12c>)
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f5e:	4b1c      	ldr	r3, [pc, #112]	; (8009fd0 <xTaskResumeAll+0x11c>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1cc      	bne.n	8009f00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f6c:	f000 fa06 	bl	800a37c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009f70:	4b1c      	ldr	r3, [pc, #112]	; (8009fe4 <xTaskResumeAll+0x130>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d010      	beq.n	8009f9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009f7c:	f000 f836 	bl	8009fec <xTaskIncrementTick>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d002      	beq.n	8009f8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009f86:	4b16      	ldr	r3, [pc, #88]	; (8009fe0 <xTaskResumeAll+0x12c>)
 8009f88:	2201      	movs	r2, #1
 8009f8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1f1      	bne.n	8009f7c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009f98:	4b12      	ldr	r3, [pc, #72]	; (8009fe4 <xTaskResumeAll+0x130>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f9e:	4b10      	ldr	r3, [pc, #64]	; (8009fe0 <xTaskResumeAll+0x12c>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d009      	beq.n	8009fba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009faa:	4b0f      	ldr	r3, [pc, #60]	; (8009fe8 <xTaskResumeAll+0x134>)
 8009fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb0:	601a      	str	r2, [r3, #0]
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fba:	f000 fba7 	bl	800a70c <vPortExitCritical>

	return xAlreadyYielded;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3710      	adds	r7, #16
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	200003c0 	.word	0x200003c0
 8009fcc:	20000398 	.word	0x20000398
 8009fd0:	20000358 	.word	0x20000358
 8009fd4:	200003a0 	.word	0x200003a0
 8009fd8:	2000029c 	.word	0x2000029c
 8009fdc:	20000298 	.word	0x20000298
 8009fe0:	200003ac 	.word	0x200003ac
 8009fe4:	200003a8 	.word	0x200003a8
 8009fe8:	e000ed04 	.word	0xe000ed04

08009fec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ff6:	4b4e      	ldr	r3, [pc, #312]	; (800a130 <xTaskIncrementTick+0x144>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f040 808e 	bne.w	800a11c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a000:	4b4c      	ldr	r3, [pc, #304]	; (800a134 <xTaskIncrementTick+0x148>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	3301      	adds	r3, #1
 800a006:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a008:	4a4a      	ldr	r2, [pc, #296]	; (800a134 <xTaskIncrementTick+0x148>)
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d120      	bne.n	800a056 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a014:	4b48      	ldr	r3, [pc, #288]	; (800a138 <xTaskIncrementTick+0x14c>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00a      	beq.n	800a034 <xTaskIncrementTick+0x48>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	603b      	str	r3, [r7, #0]
}
 800a030:	bf00      	nop
 800a032:	e7fe      	b.n	800a032 <xTaskIncrementTick+0x46>
 800a034:	4b40      	ldr	r3, [pc, #256]	; (800a138 <xTaskIncrementTick+0x14c>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	60fb      	str	r3, [r7, #12]
 800a03a:	4b40      	ldr	r3, [pc, #256]	; (800a13c <xTaskIncrementTick+0x150>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a3e      	ldr	r2, [pc, #248]	; (800a138 <xTaskIncrementTick+0x14c>)
 800a040:	6013      	str	r3, [r2, #0]
 800a042:	4a3e      	ldr	r2, [pc, #248]	; (800a13c <xTaskIncrementTick+0x150>)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	4b3d      	ldr	r3, [pc, #244]	; (800a140 <xTaskIncrementTick+0x154>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3301      	adds	r3, #1
 800a04e:	4a3c      	ldr	r2, [pc, #240]	; (800a140 <xTaskIncrementTick+0x154>)
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	f000 f993 	bl	800a37c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a056:	4b3b      	ldr	r3, [pc, #236]	; (800a144 <xTaskIncrementTick+0x158>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	693a      	ldr	r2, [r7, #16]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d348      	bcc.n	800a0f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a060:	4b35      	ldr	r3, [pc, #212]	; (800a138 <xTaskIncrementTick+0x14c>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d104      	bne.n	800a074 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a06a:	4b36      	ldr	r3, [pc, #216]	; (800a144 <xTaskIncrementTick+0x158>)
 800a06c:	f04f 32ff 	mov.w	r2, #4294967295
 800a070:	601a      	str	r2, [r3, #0]
					break;
 800a072:	e03e      	b.n	800a0f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a074:	4b30      	ldr	r3, [pc, #192]	; (800a138 <xTaskIncrementTick+0x14c>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a084:	693a      	ldr	r2, [r7, #16]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d203      	bcs.n	800a094 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a08c:	4a2d      	ldr	r2, [pc, #180]	; (800a144 <xTaskIncrementTick+0x158>)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a092:	e02e      	b.n	800a0f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	3304      	adds	r3, #4
 800a098:	4618      	mov	r0, r3
 800a09a:	f7ff fcad 	bl	80099f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d004      	beq.n	800a0b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	3318      	adds	r3, #24
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7ff fca4 	bl	80099f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	409a      	lsls	r2, r3
 800a0b8:	4b23      	ldr	r3, [pc, #140]	; (800a148 <xTaskIncrementTick+0x15c>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	4a22      	ldr	r2, [pc, #136]	; (800a148 <xTaskIncrementTick+0x15c>)
 800a0c0:	6013      	str	r3, [r2, #0]
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4413      	add	r3, r2
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	4a1f      	ldr	r2, [pc, #124]	; (800a14c <xTaskIncrementTick+0x160>)
 800a0d0:	441a      	add	r2, r3
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	4610      	mov	r0, r2
 800a0da:	f7ff fc32 	bl	8009942 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e2:	4b1b      	ldr	r3, [pc, #108]	; (800a150 <xTaskIncrementTick+0x164>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d3b9      	bcc.n	800a060 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0f0:	e7b6      	b.n	800a060 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a0f2:	4b17      	ldr	r3, [pc, #92]	; (800a150 <xTaskIncrementTick+0x164>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f8:	4914      	ldr	r1, [pc, #80]	; (800a14c <xTaskIncrementTick+0x160>)
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	440b      	add	r3, r1
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d901      	bls.n	800a10e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a10a:	2301      	movs	r3, #1
 800a10c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a10e:	4b11      	ldr	r3, [pc, #68]	; (800a154 <xTaskIncrementTick+0x168>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d007      	beq.n	800a126 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a116:	2301      	movs	r3, #1
 800a118:	617b      	str	r3, [r7, #20]
 800a11a:	e004      	b.n	800a126 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a11c:	4b0e      	ldr	r3, [pc, #56]	; (800a158 <xTaskIncrementTick+0x16c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	3301      	adds	r3, #1
 800a122:	4a0d      	ldr	r2, [pc, #52]	; (800a158 <xTaskIncrementTick+0x16c>)
 800a124:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a126:	697b      	ldr	r3, [r7, #20]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3718      	adds	r7, #24
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	200003c0 	.word	0x200003c0
 800a134:	2000039c 	.word	0x2000039c
 800a138:	20000350 	.word	0x20000350
 800a13c:	20000354 	.word	0x20000354
 800a140:	200003b0 	.word	0x200003b0
 800a144:	200003b8 	.word	0x200003b8
 800a148:	200003a0 	.word	0x200003a0
 800a14c:	2000029c 	.word	0x2000029c
 800a150:	20000298 	.word	0x20000298
 800a154:	200003ac 	.word	0x200003ac
 800a158:	200003a8 	.word	0x200003a8

0800a15c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a15c:	b480      	push	{r7}
 800a15e:	b087      	sub	sp, #28
 800a160:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a162:	4b26      	ldr	r3, [pc, #152]	; (800a1fc <vTaskSwitchContext+0xa0>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d003      	beq.n	800a172 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a16a:	4b25      	ldr	r3, [pc, #148]	; (800a200 <vTaskSwitchContext+0xa4>)
 800a16c:	2201      	movs	r2, #1
 800a16e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a170:	e03f      	b.n	800a1f2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800a172:	4b23      	ldr	r3, [pc, #140]	; (800a200 <vTaskSwitchContext+0xa4>)
 800a174:	2200      	movs	r2, #0
 800a176:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a178:	4b22      	ldr	r3, [pc, #136]	; (800a204 <vTaskSwitchContext+0xa8>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	fab3 f383 	clz	r3, r3
 800a184:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a186:	7afb      	ldrb	r3, [r7, #11]
 800a188:	f1c3 031f 	rsb	r3, r3, #31
 800a18c:	617b      	str	r3, [r7, #20]
 800a18e:	491e      	ldr	r1, [pc, #120]	; (800a208 <vTaskSwitchContext+0xac>)
 800a190:	697a      	ldr	r2, [r7, #20]
 800a192:	4613      	mov	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	440b      	add	r3, r1
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10a      	bne.n	800a1b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	607b      	str	r3, [r7, #4]
}
 800a1b4:	bf00      	nop
 800a1b6:	e7fe      	b.n	800a1b6 <vTaskSwitchContext+0x5a>
 800a1b8:	697a      	ldr	r2, [r7, #20]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4a11      	ldr	r2, [pc, #68]	; (800a208 <vTaskSwitchContext+0xac>)
 800a1c4:	4413      	add	r3, r2
 800a1c6:	613b      	str	r3, [r7, #16]
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	685a      	ldr	r2, [r3, #4]
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	605a      	str	r2, [r3, #4]
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	685a      	ldr	r2, [r3, #4]
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	3308      	adds	r3, #8
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d104      	bne.n	800a1e8 <vTaskSwitchContext+0x8c>
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	685a      	ldr	r2, [r3, #4]
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	605a      	str	r2, [r3, #4]
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	4a07      	ldr	r2, [pc, #28]	; (800a20c <vTaskSwitchContext+0xb0>)
 800a1f0:	6013      	str	r3, [r2, #0]
}
 800a1f2:	bf00      	nop
 800a1f4:	371c      	adds	r7, #28
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bc80      	pop	{r7}
 800a1fa:	4770      	bx	lr
 800a1fc:	200003c0 	.word	0x200003c0
 800a200:	200003ac 	.word	0x200003ac
 800a204:	200003a0 	.word	0x200003a0
 800a208:	2000029c 	.word	0x2000029c
 800a20c:	20000298 	.word	0x20000298

0800a210 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a218:	f000 f852 	bl	800a2c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a21c:	4b06      	ldr	r3, [pc, #24]	; (800a238 <prvIdleTask+0x28>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d9f9      	bls.n	800a218 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a224:	4b05      	ldr	r3, [pc, #20]	; (800a23c <prvIdleTask+0x2c>)
 800a226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a234:	e7f0      	b.n	800a218 <prvIdleTask+0x8>
 800a236:	bf00      	nop
 800a238:	2000029c 	.word	0x2000029c
 800a23c:	e000ed04 	.word	0xe000ed04

0800a240 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a246:	2300      	movs	r3, #0
 800a248:	607b      	str	r3, [r7, #4]
 800a24a:	e00c      	b.n	800a266 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	4613      	mov	r3, r2
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4413      	add	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4a12      	ldr	r2, [pc, #72]	; (800a2a0 <prvInitialiseTaskLists+0x60>)
 800a258:	4413      	add	r3, r2
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7ff fb46 	bl	80098ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	3301      	adds	r3, #1
 800a264:	607b      	str	r3, [r7, #4]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b06      	cmp	r3, #6
 800a26a:	d9ef      	bls.n	800a24c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a26c:	480d      	ldr	r0, [pc, #52]	; (800a2a4 <prvInitialiseTaskLists+0x64>)
 800a26e:	f7ff fb3d 	bl	80098ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a272:	480d      	ldr	r0, [pc, #52]	; (800a2a8 <prvInitialiseTaskLists+0x68>)
 800a274:	f7ff fb3a 	bl	80098ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a278:	480c      	ldr	r0, [pc, #48]	; (800a2ac <prvInitialiseTaskLists+0x6c>)
 800a27a:	f7ff fb37 	bl	80098ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a27e:	480c      	ldr	r0, [pc, #48]	; (800a2b0 <prvInitialiseTaskLists+0x70>)
 800a280:	f7ff fb34 	bl	80098ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a284:	480b      	ldr	r0, [pc, #44]	; (800a2b4 <prvInitialiseTaskLists+0x74>)
 800a286:	f7ff fb31 	bl	80098ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a28a:	4b0b      	ldr	r3, [pc, #44]	; (800a2b8 <prvInitialiseTaskLists+0x78>)
 800a28c:	4a05      	ldr	r2, [pc, #20]	; (800a2a4 <prvInitialiseTaskLists+0x64>)
 800a28e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a290:	4b0a      	ldr	r3, [pc, #40]	; (800a2bc <prvInitialiseTaskLists+0x7c>)
 800a292:	4a05      	ldr	r2, [pc, #20]	; (800a2a8 <prvInitialiseTaskLists+0x68>)
 800a294:	601a      	str	r2, [r3, #0]
}
 800a296:	bf00      	nop
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	2000029c 	.word	0x2000029c
 800a2a4:	20000328 	.word	0x20000328
 800a2a8:	2000033c 	.word	0x2000033c
 800a2ac:	20000358 	.word	0x20000358
 800a2b0:	2000036c 	.word	0x2000036c
 800a2b4:	20000384 	.word	0x20000384
 800a2b8:	20000350 	.word	0x20000350
 800a2bc:	20000354 	.word	0x20000354

0800a2c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2c6:	e019      	b.n	800a2fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a2c8:	f000 f9f0 	bl	800a6ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2cc:	4b10      	ldr	r3, [pc, #64]	; (800a310 <prvCheckTasksWaitingTermination+0x50>)
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7ff fb8d 	bl	80099f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2de:	4b0d      	ldr	r3, [pc, #52]	; (800a314 <prvCheckTasksWaitingTermination+0x54>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	4a0b      	ldr	r2, [pc, #44]	; (800a314 <prvCheckTasksWaitingTermination+0x54>)
 800a2e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2e8:	4b0b      	ldr	r3, [pc, #44]	; (800a318 <prvCheckTasksWaitingTermination+0x58>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	4a0a      	ldr	r2, [pc, #40]	; (800a318 <prvCheckTasksWaitingTermination+0x58>)
 800a2f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a2f2:	f000 fa0b 	bl	800a70c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f810 	bl	800a31c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2fc:	4b06      	ldr	r3, [pc, #24]	; (800a318 <prvCheckTasksWaitingTermination+0x58>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d1e1      	bne.n	800a2c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a304:	bf00      	nop
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	2000036c 	.word	0x2000036c
 800a314:	20000398 	.word	0x20000398
 800a318:	20000380 	.word	0x20000380

0800a31c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d108      	bne.n	800a340 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a332:	4618      	mov	r0, r3
 800a334:	f000 fb48 	bl	800a9c8 <vPortFree>
				vPortFree( pxTCB );
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fb45 	bl	800a9c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a33e:	e018      	b.n	800a372 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a346:	2b01      	cmp	r3, #1
 800a348:	d103      	bne.n	800a352 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fb3c 	bl	800a9c8 <vPortFree>
	}
 800a350:	e00f      	b.n	800a372 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d00a      	beq.n	800a372 <prvDeleteTCB+0x56>
	__asm volatile
 800a35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	60fb      	str	r3, [r7, #12]
}
 800a36e:	bf00      	nop
 800a370:	e7fe      	b.n	800a370 <prvDeleteTCB+0x54>
	}
 800a372:	bf00      	nop
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
	...

0800a37c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a382:	4b0c      	ldr	r3, [pc, #48]	; (800a3b4 <prvResetNextTaskUnblockTime+0x38>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d104      	bne.n	800a396 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a38c:	4b0a      	ldr	r3, [pc, #40]	; (800a3b8 <prvResetNextTaskUnblockTime+0x3c>)
 800a38e:	f04f 32ff 	mov.w	r2, #4294967295
 800a392:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a394:	e008      	b.n	800a3a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a396:	4b07      	ldr	r3, [pc, #28]	; (800a3b4 <prvResetNextTaskUnblockTime+0x38>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	4a04      	ldr	r2, [pc, #16]	; (800a3b8 <prvResetNextTaskUnblockTime+0x3c>)
 800a3a6:	6013      	str	r3, [r2, #0]
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bc80      	pop	{r7}
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop
 800a3b4:	20000350 	.word	0x20000350
 800a3b8:	200003b8 	.word	0x200003b8

0800a3bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a3c2:	4b0b      	ldr	r3, [pc, #44]	; (800a3f0 <xTaskGetSchedulerState+0x34>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d102      	bne.n	800a3d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	607b      	str	r3, [r7, #4]
 800a3ce:	e008      	b.n	800a3e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3d0:	4b08      	ldr	r3, [pc, #32]	; (800a3f4 <xTaskGetSchedulerState+0x38>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d102      	bne.n	800a3de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3d8:	2302      	movs	r3, #2
 800a3da:	607b      	str	r3, [r7, #4]
 800a3dc:	e001      	b.n	800a3e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3e2:	687b      	ldr	r3, [r7, #4]
	}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bc80      	pop	{r7}
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	200003a4 	.word	0x200003a4
 800a3f4:	200003c0 	.word	0x200003c0

0800a3f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a402:	4b29      	ldr	r3, [pc, #164]	; (800a4a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a408:	4b28      	ldr	r3, [pc, #160]	; (800a4ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	3304      	adds	r3, #4
 800a40e:	4618      	mov	r0, r3
 800a410:	f7ff faf2 	bl	80099f8 <uxListRemove>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10b      	bne.n	800a432 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a41a:	4b24      	ldr	r3, [pc, #144]	; (800a4ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a420:	2201      	movs	r2, #1
 800a422:	fa02 f303 	lsl.w	r3, r2, r3
 800a426:	43da      	mvns	r2, r3
 800a428:	4b21      	ldr	r3, [pc, #132]	; (800a4b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4013      	ands	r3, r2
 800a42e:	4a20      	ldr	r2, [pc, #128]	; (800a4b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a430:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a438:	d10a      	bne.n	800a450 <prvAddCurrentTaskToDelayedList+0x58>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d007      	beq.n	800a450 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a440:	4b1a      	ldr	r3, [pc, #104]	; (800a4ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	3304      	adds	r3, #4
 800a446:	4619      	mov	r1, r3
 800a448:	481a      	ldr	r0, [pc, #104]	; (800a4b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a44a:	f7ff fa7a 	bl	8009942 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a44e:	e026      	b.n	800a49e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4413      	add	r3, r2
 800a456:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a458:	4b14      	ldr	r3, [pc, #80]	; (800a4ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	429a      	cmp	r2, r3
 800a466:	d209      	bcs.n	800a47c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a468:	4b13      	ldr	r3, [pc, #76]	; (800a4b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	4b0f      	ldr	r3, [pc, #60]	; (800a4ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3304      	adds	r3, #4
 800a472:	4619      	mov	r1, r3
 800a474:	4610      	mov	r0, r2
 800a476:	f7ff fa87 	bl	8009988 <vListInsert>
}
 800a47a:	e010      	b.n	800a49e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a47c:	4b0f      	ldr	r3, [pc, #60]	; (800a4bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	4b0a      	ldr	r3, [pc, #40]	; (800a4ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3304      	adds	r3, #4
 800a486:	4619      	mov	r1, r3
 800a488:	4610      	mov	r0, r2
 800a48a:	f7ff fa7d 	bl	8009988 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a48e:	4b0c      	ldr	r3, [pc, #48]	; (800a4c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	429a      	cmp	r2, r3
 800a496:	d202      	bcs.n	800a49e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a498:	4a09      	ldr	r2, [pc, #36]	; (800a4c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	6013      	str	r3, [r2, #0]
}
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	2000039c 	.word	0x2000039c
 800a4ac:	20000298 	.word	0x20000298
 800a4b0:	200003a0 	.word	0x200003a0
 800a4b4:	20000384 	.word	0x20000384
 800a4b8:	20000354 	.word	0x20000354
 800a4bc:	20000350 	.word	0x20000350
 800a4c0:	200003b8 	.word	0x200003b8

0800a4c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	3b04      	subs	r3, #4
 800a4d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a4dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3b04      	subs	r3, #4
 800a4e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	f023 0201 	bic.w	r2, r3, #1
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	3b04      	subs	r3, #4
 800a4f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4f4:	4a08      	ldr	r2, [pc, #32]	; (800a518 <pxPortInitialiseStack+0x54>)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3b14      	subs	r3, #20
 800a4fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3b20      	subs	r3, #32
 800a50a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a50c:	68fb      	ldr	r3, [r7, #12]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	bc80      	pop	{r7}
 800a516:	4770      	bx	lr
 800a518:	0800a51d 	.word	0x0800a51d

0800a51c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a51c:	b480      	push	{r7}
 800a51e:	b085      	sub	sp, #20
 800a520:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a522:	2300      	movs	r3, #0
 800a524:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a526:	4b12      	ldr	r3, [pc, #72]	; (800a570 <prvTaskExitError+0x54>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52e:	d00a      	beq.n	800a546 <prvTaskExitError+0x2a>
	__asm volatile
 800a530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a534:	f383 8811 	msr	BASEPRI, r3
 800a538:	f3bf 8f6f 	isb	sy
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	60fb      	str	r3, [r7, #12]
}
 800a542:	bf00      	nop
 800a544:	e7fe      	b.n	800a544 <prvTaskExitError+0x28>
	__asm volatile
 800a546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	60bb      	str	r3, [r7, #8]
}
 800a558:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a55a:	bf00      	nop
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d0fc      	beq.n	800a55c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a562:	bf00      	nop
 800a564:	bf00      	nop
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	bc80      	pop	{r7}
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	20000054 	.word	0x20000054
	...

0800a580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a580:	4b07      	ldr	r3, [pc, #28]	; (800a5a0 <pxCurrentTCBConst2>)
 800a582:	6819      	ldr	r1, [r3, #0]
 800a584:	6808      	ldr	r0, [r1, #0]
 800a586:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a58a:	f380 8809 	msr	PSP, r0
 800a58e:	f3bf 8f6f 	isb	sy
 800a592:	f04f 0000 	mov.w	r0, #0
 800a596:	f380 8811 	msr	BASEPRI, r0
 800a59a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a59e:	4770      	bx	lr

0800a5a0 <pxCurrentTCBConst2>:
 800a5a0:	20000298 	.word	0x20000298
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop

0800a5a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a5a8:	4806      	ldr	r0, [pc, #24]	; (800a5c4 <prvPortStartFirstTask+0x1c>)
 800a5aa:	6800      	ldr	r0, [r0, #0]
 800a5ac:	6800      	ldr	r0, [r0, #0]
 800a5ae:	f380 8808 	msr	MSP, r0
 800a5b2:	b662      	cpsie	i
 800a5b4:	b661      	cpsie	f
 800a5b6:	f3bf 8f4f 	dsb	sy
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	df00      	svc	0
 800a5c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a5c2:	bf00      	nop
 800a5c4:	e000ed08 	.word	0xe000ed08

0800a5c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5ce:	4b32      	ldr	r3, [pc, #200]	; (800a698 <xPortStartScheduler+0xd0>)
 800a5d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	22ff      	movs	r2, #255	; 0xff
 800a5de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a5e8:	78fb      	ldrb	r3, [r7, #3]
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	4b2a      	ldr	r3, [pc, #168]	; (800a69c <xPortStartScheduler+0xd4>)
 800a5f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5f6:	4b2a      	ldr	r3, [pc, #168]	; (800a6a0 <xPortStartScheduler+0xd8>)
 800a5f8:	2207      	movs	r2, #7
 800a5fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5fc:	e009      	b.n	800a612 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a5fe:	4b28      	ldr	r3, [pc, #160]	; (800a6a0 <xPortStartScheduler+0xd8>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3b01      	subs	r3, #1
 800a604:	4a26      	ldr	r2, [pc, #152]	; (800a6a0 <xPortStartScheduler+0xd8>)
 800a606:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a608:	78fb      	ldrb	r3, [r7, #3]
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	005b      	lsls	r3, r3, #1
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a612:	78fb      	ldrb	r3, [r7, #3]
 800a614:	b2db      	uxtb	r3, r3
 800a616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a61a:	2b80      	cmp	r3, #128	; 0x80
 800a61c:	d0ef      	beq.n	800a5fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a61e:	4b20      	ldr	r3, [pc, #128]	; (800a6a0 <xPortStartScheduler+0xd8>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f1c3 0307 	rsb	r3, r3, #7
 800a626:	2b04      	cmp	r3, #4
 800a628:	d00a      	beq.n	800a640 <xPortStartScheduler+0x78>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	60bb      	str	r3, [r7, #8]
}
 800a63c:	bf00      	nop
 800a63e:	e7fe      	b.n	800a63e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a640:	4b17      	ldr	r3, [pc, #92]	; (800a6a0 <xPortStartScheduler+0xd8>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	021b      	lsls	r3, r3, #8
 800a646:	4a16      	ldr	r2, [pc, #88]	; (800a6a0 <xPortStartScheduler+0xd8>)
 800a648:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a64a:	4b15      	ldr	r3, [pc, #84]	; (800a6a0 <xPortStartScheduler+0xd8>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a652:	4a13      	ldr	r2, [pc, #76]	; (800a6a0 <xPortStartScheduler+0xd8>)
 800a654:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a65e:	4b11      	ldr	r3, [pc, #68]	; (800a6a4 <xPortStartScheduler+0xdc>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a10      	ldr	r2, [pc, #64]	; (800a6a4 <xPortStartScheduler+0xdc>)
 800a664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a668:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a66a:	4b0e      	ldr	r3, [pc, #56]	; (800a6a4 <xPortStartScheduler+0xdc>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a0d      	ldr	r2, [pc, #52]	; (800a6a4 <xPortStartScheduler+0xdc>)
 800a670:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a674:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a676:	f000 f8b9 	bl	800a7ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a67a:	4b0b      	ldr	r3, [pc, #44]	; (800a6a8 <xPortStartScheduler+0xe0>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a680:	f7ff ff92 	bl	800a5a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a684:	f7ff fd6a 	bl	800a15c <vTaskSwitchContext>
	prvTaskExitError();
 800a688:	f7ff ff48 	bl	800a51c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	e000e400 	.word	0xe000e400
 800a69c:	200003c4 	.word	0x200003c4
 800a6a0:	200003c8 	.word	0x200003c8
 800a6a4:	e000ed20 	.word	0xe000ed20
 800a6a8:	20000054 	.word	0x20000054

0800a6ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	607b      	str	r3, [r7, #4]
}
 800a6c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a6c6:	4b0f      	ldr	r3, [pc, #60]	; (800a704 <vPortEnterCritical+0x58>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	4a0d      	ldr	r2, [pc, #52]	; (800a704 <vPortEnterCritical+0x58>)
 800a6ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a6d0:	4b0c      	ldr	r3, [pc, #48]	; (800a704 <vPortEnterCritical+0x58>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d10f      	bne.n	800a6f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a6d8:	4b0b      	ldr	r3, [pc, #44]	; (800a708 <vPortEnterCritical+0x5c>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00a      	beq.n	800a6f8 <vPortEnterCritical+0x4c>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	603b      	str	r3, [r7, #0]
}
 800a6f4:	bf00      	nop
 800a6f6:	e7fe      	b.n	800a6f6 <vPortEnterCritical+0x4a>
	}
}
 800a6f8:	bf00      	nop
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bc80      	pop	{r7}
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	20000054 	.word	0x20000054
 800a708:	e000ed04 	.word	0xe000ed04

0800a70c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a712:	4b11      	ldr	r3, [pc, #68]	; (800a758 <vPortExitCritical+0x4c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10a      	bne.n	800a730 <vPortExitCritical+0x24>
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	607b      	str	r3, [r7, #4]
}
 800a72c:	bf00      	nop
 800a72e:	e7fe      	b.n	800a72e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a730:	4b09      	ldr	r3, [pc, #36]	; (800a758 <vPortExitCritical+0x4c>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	3b01      	subs	r3, #1
 800a736:	4a08      	ldr	r2, [pc, #32]	; (800a758 <vPortExitCritical+0x4c>)
 800a738:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a73a:	4b07      	ldr	r3, [pc, #28]	; (800a758 <vPortExitCritical+0x4c>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d105      	bne.n	800a74e <vPortExitCritical+0x42>
 800a742:	2300      	movs	r3, #0
 800a744:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a74c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a74e:	bf00      	nop
 800a750:	370c      	adds	r7, #12
 800a752:	46bd      	mov	sp, r7
 800a754:	bc80      	pop	{r7}
 800a756:	4770      	bx	lr
 800a758:	20000054 	.word	0x20000054
 800a75c:	00000000 	.word	0x00000000

0800a760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a760:	f3ef 8009 	mrs	r0, PSP
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	4b0d      	ldr	r3, [pc, #52]	; (800a7a0 <pxCurrentTCBConst>)
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a770:	6010      	str	r0, [r2, #0]
 800a772:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a776:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a77a:	f380 8811 	msr	BASEPRI, r0
 800a77e:	f7ff fced 	bl	800a15c <vTaskSwitchContext>
 800a782:	f04f 0000 	mov.w	r0, #0
 800a786:	f380 8811 	msr	BASEPRI, r0
 800a78a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a78e:	6819      	ldr	r1, [r3, #0]
 800a790:	6808      	ldr	r0, [r1, #0]
 800a792:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a796:	f380 8809 	msr	PSP, r0
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	4770      	bx	lr

0800a7a0 <pxCurrentTCBConst>:
 800a7a0:	20000298 	.word	0x20000298
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop

0800a7a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	607b      	str	r3, [r7, #4]
}
 800a7c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a7c2:	f7ff fc13 	bl	8009fec <xTaskIncrementTick>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a7cc:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <xPortSysTickHandler+0x40>)
 800a7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	f383 8811 	msr	BASEPRI, r3
}
 800a7de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	e000ed04 	.word	0xe000ed04

0800a7ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7f0:	4b0a      	ldr	r3, [pc, #40]	; (800a81c <vPortSetupTimerInterrupt+0x30>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7f6:	4b0a      	ldr	r3, [pc, #40]	; (800a820 <vPortSetupTimerInterrupt+0x34>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7fc:	4b09      	ldr	r3, [pc, #36]	; (800a824 <vPortSetupTimerInterrupt+0x38>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a09      	ldr	r2, [pc, #36]	; (800a828 <vPortSetupTimerInterrupt+0x3c>)
 800a802:	fba2 2303 	umull	r2, r3, r2, r3
 800a806:	099b      	lsrs	r3, r3, #6
 800a808:	4a08      	ldr	r2, [pc, #32]	; (800a82c <vPortSetupTimerInterrupt+0x40>)
 800a80a:	3b01      	subs	r3, #1
 800a80c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a80e:	4b03      	ldr	r3, [pc, #12]	; (800a81c <vPortSetupTimerInterrupt+0x30>)
 800a810:	2207      	movs	r2, #7
 800a812:	601a      	str	r2, [r3, #0]
}
 800a814:	bf00      	nop
 800a816:	46bd      	mov	sp, r7
 800a818:	bc80      	pop	{r7}
 800a81a:	4770      	bx	lr
 800a81c:	e000e010 	.word	0xe000e010
 800a820:	e000e018 	.word	0xe000e018
 800a824:	20000048 	.word	0x20000048
 800a828:	10624dd3 	.word	0x10624dd3
 800a82c:	e000e014 	.word	0xe000e014

0800a830 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b08a      	sub	sp, #40	; 0x28
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a838:	2300      	movs	r3, #0
 800a83a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a83c:	f7ff fb2c 	bl	8009e98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a840:	4b5b      	ldr	r3, [pc, #364]	; (800a9b0 <pvPortMalloc+0x180>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d101      	bne.n	800a84c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a848:	f000 f920 	bl	800aa8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a84c:	4b59      	ldr	r3, [pc, #356]	; (800a9b4 <pvPortMalloc+0x184>)
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4013      	ands	r3, r2
 800a854:	2b00      	cmp	r3, #0
 800a856:	f040 8093 	bne.w	800a980 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d01d      	beq.n	800a89c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a860:	2208      	movs	r2, #8
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4413      	add	r3, r2
 800a866:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f003 0307 	and.w	r3, r3, #7
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d014      	beq.n	800a89c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f023 0307 	bic.w	r3, r3, #7
 800a878:	3308      	adds	r3, #8
 800a87a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f003 0307 	and.w	r3, r3, #7
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00a      	beq.n	800a89c <pvPortMalloc+0x6c>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	617b      	str	r3, [r7, #20]
}
 800a898:	bf00      	nop
 800a89a:	e7fe      	b.n	800a89a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d06e      	beq.n	800a980 <pvPortMalloc+0x150>
 800a8a2:	4b45      	ldr	r3, [pc, #276]	; (800a9b8 <pvPortMalloc+0x188>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d869      	bhi.n	800a980 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a8ac:	4b43      	ldr	r3, [pc, #268]	; (800a9bc <pvPortMalloc+0x18c>)
 800a8ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a8b0:	4b42      	ldr	r3, [pc, #264]	; (800a9bc <pvPortMalloc+0x18c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8b6:	e004      	b.n	800a8c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d903      	bls.n	800a8d4 <pvPortMalloc+0xa4>
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1f1      	bne.n	800a8b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a8d4:	4b36      	ldr	r3, [pc, #216]	; (800a9b0 <pvPortMalloc+0x180>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d050      	beq.n	800a980 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a8de:	6a3b      	ldr	r3, [r7, #32]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2208      	movs	r2, #8
 800a8e4:	4413      	add	r3, r2
 800a8e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	6a3b      	ldr	r3, [r7, #32]
 800a8ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	685a      	ldr	r2, [r3, #4]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	1ad2      	subs	r2, r2, r3
 800a8f8:	2308      	movs	r3, #8
 800a8fa:	005b      	lsls	r3, r3, #1
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d91f      	bls.n	800a940 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4413      	add	r3, r2
 800a906:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	f003 0307 	and.w	r3, r3, #7
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00a      	beq.n	800a928 <pvPortMalloc+0xf8>
	__asm volatile
 800a912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	613b      	str	r3, [r7, #16]
}
 800a924:	bf00      	nop
 800a926:	e7fe      	b.n	800a926 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	1ad2      	subs	r2, r2, r3
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a93a:	69b8      	ldr	r0, [r7, #24]
 800a93c:	f000 f908 	bl	800ab50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a940:	4b1d      	ldr	r3, [pc, #116]	; (800a9b8 <pvPortMalloc+0x188>)
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	1ad3      	subs	r3, r2, r3
 800a94a:	4a1b      	ldr	r2, [pc, #108]	; (800a9b8 <pvPortMalloc+0x188>)
 800a94c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a94e:	4b1a      	ldr	r3, [pc, #104]	; (800a9b8 <pvPortMalloc+0x188>)
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	4b1b      	ldr	r3, [pc, #108]	; (800a9c0 <pvPortMalloc+0x190>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	429a      	cmp	r2, r3
 800a958:	d203      	bcs.n	800a962 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a95a:	4b17      	ldr	r3, [pc, #92]	; (800a9b8 <pvPortMalloc+0x188>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a18      	ldr	r2, [pc, #96]	; (800a9c0 <pvPortMalloc+0x190>)
 800a960:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	685a      	ldr	r2, [r3, #4]
 800a966:	4b13      	ldr	r3, [pc, #76]	; (800a9b4 <pvPortMalloc+0x184>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	431a      	orrs	r2, r3
 800a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	2200      	movs	r2, #0
 800a974:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a976:	4b13      	ldr	r3, [pc, #76]	; (800a9c4 <pvPortMalloc+0x194>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	3301      	adds	r3, #1
 800a97c:	4a11      	ldr	r2, [pc, #68]	; (800a9c4 <pvPortMalloc+0x194>)
 800a97e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a980:	f7ff fa98 	bl	8009eb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	f003 0307 	and.w	r3, r3, #7
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00a      	beq.n	800a9a4 <pvPortMalloc+0x174>
	__asm volatile
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	60fb      	str	r3, [r7, #12]
}
 800a9a0:	bf00      	nop
 800a9a2:	e7fe      	b.n	800a9a2 <pvPortMalloc+0x172>
	return pvReturn;
 800a9a4:	69fb      	ldr	r3, [r7, #28]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3728      	adds	r7, #40	; 0x28
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	20002ae4 	.word	0x20002ae4
 800a9b4:	20002af8 	.word	0x20002af8
 800a9b8:	20002ae8 	.word	0x20002ae8
 800a9bc:	20002adc 	.word	0x20002adc
 800a9c0:	20002aec 	.word	0x20002aec
 800a9c4:	20002af0 	.word	0x20002af0

0800a9c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b086      	sub	sp, #24
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d04d      	beq.n	800aa76 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a9da:	2308      	movs	r3, #8
 800a9dc:	425b      	negs	r3, r3
 800a9de:	697a      	ldr	r2, [r7, #20]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	4b24      	ldr	r3, [pc, #144]	; (800aa80 <vPortFree+0xb8>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10a      	bne.n	800aa0c <vPortFree+0x44>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	60fb      	str	r3, [r7, #12]
}
 800aa08:	bf00      	nop
 800aa0a:	e7fe      	b.n	800aa0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00a      	beq.n	800aa2a <vPortFree+0x62>
	__asm volatile
 800aa14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa18:	f383 8811 	msr	BASEPRI, r3
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f3bf 8f4f 	dsb	sy
 800aa24:	60bb      	str	r3, [r7, #8]
}
 800aa26:	bf00      	nop
 800aa28:	e7fe      	b.n	800aa28 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	4b14      	ldr	r3, [pc, #80]	; (800aa80 <vPortFree+0xb8>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4013      	ands	r3, r2
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d01e      	beq.n	800aa76 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d11a      	bne.n	800aa76 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	685a      	ldr	r2, [r3, #4]
 800aa44:	4b0e      	ldr	r3, [pc, #56]	; (800aa80 <vPortFree+0xb8>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	43db      	mvns	r3, r3
 800aa4a:	401a      	ands	r2, r3
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa50:	f7ff fa22 	bl	8009e98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	685a      	ldr	r2, [r3, #4]
 800aa58:	4b0a      	ldr	r3, [pc, #40]	; (800aa84 <vPortFree+0xbc>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	4a09      	ldr	r2, [pc, #36]	; (800aa84 <vPortFree+0xbc>)
 800aa60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa62:	6938      	ldr	r0, [r7, #16]
 800aa64:	f000 f874 	bl	800ab50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa68:	4b07      	ldr	r3, [pc, #28]	; (800aa88 <vPortFree+0xc0>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	4a06      	ldr	r2, [pc, #24]	; (800aa88 <vPortFree+0xc0>)
 800aa70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa72:	f7ff fa1f 	bl	8009eb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa76:	bf00      	nop
 800aa78:	3718      	adds	r7, #24
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	20002af8 	.word	0x20002af8
 800aa84:	20002ae8 	.word	0x20002ae8
 800aa88:	20002af4 	.word	0x20002af4

0800aa8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa92:	f242 7310 	movw	r3, #10000	; 0x2710
 800aa96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aa98:	4b27      	ldr	r3, [pc, #156]	; (800ab38 <prvHeapInit+0xac>)
 800aa9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f003 0307 	and.w	r3, r3, #7
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00c      	beq.n	800aac0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	3307      	adds	r3, #7
 800aaaa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f023 0307 	bic.w	r3, r3, #7
 800aab2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	4a1f      	ldr	r2, [pc, #124]	; (800ab38 <prvHeapInit+0xac>)
 800aabc:	4413      	add	r3, r2
 800aabe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aac4:	4a1d      	ldr	r2, [pc, #116]	; (800ab3c <prvHeapInit+0xb0>)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aaca:	4b1c      	ldr	r3, [pc, #112]	; (800ab3c <prvHeapInit+0xb0>)
 800aacc:	2200      	movs	r2, #0
 800aace:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	4413      	add	r3, r2
 800aad6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aad8:	2208      	movs	r2, #8
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	1a9b      	subs	r3, r3, r2
 800aade:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f023 0307 	bic.w	r3, r3, #7
 800aae6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	4a15      	ldr	r2, [pc, #84]	; (800ab40 <prvHeapInit+0xb4>)
 800aaec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aaee:	4b14      	ldr	r3, [pc, #80]	; (800ab40 <prvHeapInit+0xb4>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aaf6:	4b12      	ldr	r3, [pc, #72]	; (800ab40 <prvHeapInit+0xb4>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2200      	movs	r2, #0
 800aafc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	1ad2      	subs	r2, r2, r3
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab0c:	4b0c      	ldr	r3, [pc, #48]	; (800ab40 <prvHeapInit+0xb4>)
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	4a0a      	ldr	r2, [pc, #40]	; (800ab44 <prvHeapInit+0xb8>)
 800ab1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	4a09      	ldr	r2, [pc, #36]	; (800ab48 <prvHeapInit+0xbc>)
 800ab22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab24:	4b09      	ldr	r3, [pc, #36]	; (800ab4c <prvHeapInit+0xc0>)
 800ab26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ab2a:	601a      	str	r2, [r3, #0]
}
 800ab2c:	bf00      	nop
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bc80      	pop	{r7}
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	200003cc 	.word	0x200003cc
 800ab3c:	20002adc 	.word	0x20002adc
 800ab40:	20002ae4 	.word	0x20002ae4
 800ab44:	20002aec 	.word	0x20002aec
 800ab48:	20002ae8 	.word	0x20002ae8
 800ab4c:	20002af8 	.word	0x20002af8

0800ab50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab58:	4b27      	ldr	r3, [pc, #156]	; (800abf8 <prvInsertBlockIntoFreeList+0xa8>)
 800ab5a:	60fb      	str	r3, [r7, #12]
 800ab5c:	e002      	b.n	800ab64 <prvInsertBlockIntoFreeList+0x14>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d8f7      	bhi.n	800ab5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	68ba      	ldr	r2, [r7, #8]
 800ab78:	4413      	add	r3, r2
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d108      	bne.n	800ab92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	685a      	ldr	r2, [r3, #4]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	441a      	add	r2, r3
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	441a      	add	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d118      	bne.n	800abd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	4b14      	ldr	r3, [pc, #80]	; (800abfc <prvInsertBlockIntoFreeList+0xac>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d00d      	beq.n	800abce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685a      	ldr	r2, [r3, #4]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	441a      	add	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	601a      	str	r2, [r3, #0]
 800abcc:	e008      	b.n	800abe0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800abce:	4b0b      	ldr	r3, [pc, #44]	; (800abfc <prvInsertBlockIntoFreeList+0xac>)
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	e003      	b.n	800abe0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d002      	beq.n	800abee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abee:	bf00      	nop
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bc80      	pop	{r7}
 800abf6:	4770      	bx	lr
 800abf8:	20002adc 	.word	0x20002adc
 800abfc:	20002ae4 	.word	0x20002ae4

0800ac00 <atoi>:
 800ac00:	220a      	movs	r2, #10
 800ac02:	2100      	movs	r1, #0
 800ac04:	f000 b95a 	b.w	800aebc <strtol>

0800ac08 <__errno>:
 800ac08:	4b01      	ldr	r3, [pc, #4]	; (800ac10 <__errno+0x8>)
 800ac0a:	6818      	ldr	r0, [r3, #0]
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	20000058 	.word	0x20000058

0800ac14 <__libc_init_array>:
 800ac14:	b570      	push	{r4, r5, r6, lr}
 800ac16:	2600      	movs	r6, #0
 800ac18:	4d0c      	ldr	r5, [pc, #48]	; (800ac4c <__libc_init_array+0x38>)
 800ac1a:	4c0d      	ldr	r4, [pc, #52]	; (800ac50 <__libc_init_array+0x3c>)
 800ac1c:	1b64      	subs	r4, r4, r5
 800ac1e:	10a4      	asrs	r4, r4, #2
 800ac20:	42a6      	cmp	r6, r4
 800ac22:	d109      	bne.n	800ac38 <__libc_init_array+0x24>
 800ac24:	f002 f8a6 	bl	800cd74 <_init>
 800ac28:	2600      	movs	r6, #0
 800ac2a:	4d0a      	ldr	r5, [pc, #40]	; (800ac54 <__libc_init_array+0x40>)
 800ac2c:	4c0a      	ldr	r4, [pc, #40]	; (800ac58 <__libc_init_array+0x44>)
 800ac2e:	1b64      	subs	r4, r4, r5
 800ac30:	10a4      	asrs	r4, r4, #2
 800ac32:	42a6      	cmp	r6, r4
 800ac34:	d105      	bne.n	800ac42 <__libc_init_array+0x2e>
 800ac36:	bd70      	pop	{r4, r5, r6, pc}
 800ac38:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac3c:	4798      	blx	r3
 800ac3e:	3601      	adds	r6, #1
 800ac40:	e7ee      	b.n	800ac20 <__libc_init_array+0xc>
 800ac42:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac46:	4798      	blx	r3
 800ac48:	3601      	adds	r6, #1
 800ac4a:	e7f2      	b.n	800ac32 <__libc_init_array+0x1e>
 800ac4c:	0800e2e0 	.word	0x0800e2e0
 800ac50:	0800e2e0 	.word	0x0800e2e0
 800ac54:	0800e2e0 	.word	0x0800e2e0
 800ac58:	0800e2e4 	.word	0x0800e2e4

0800ac5c <memcmp>:
 800ac5c:	b530      	push	{r4, r5, lr}
 800ac5e:	2400      	movs	r4, #0
 800ac60:	3901      	subs	r1, #1
 800ac62:	42a2      	cmp	r2, r4
 800ac64:	d101      	bne.n	800ac6a <memcmp+0xe>
 800ac66:	2000      	movs	r0, #0
 800ac68:	e005      	b.n	800ac76 <memcmp+0x1a>
 800ac6a:	5d03      	ldrb	r3, [r0, r4]
 800ac6c:	3401      	adds	r4, #1
 800ac6e:	5d0d      	ldrb	r5, [r1, r4]
 800ac70:	42ab      	cmp	r3, r5
 800ac72:	d0f6      	beq.n	800ac62 <memcmp+0x6>
 800ac74:	1b58      	subs	r0, r3, r5
 800ac76:	bd30      	pop	{r4, r5, pc}

0800ac78 <memcpy>:
 800ac78:	440a      	add	r2, r1
 800ac7a:	4291      	cmp	r1, r2
 800ac7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac80:	d100      	bne.n	800ac84 <memcpy+0xc>
 800ac82:	4770      	bx	lr
 800ac84:	b510      	push	{r4, lr}
 800ac86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac8a:	4291      	cmp	r1, r2
 800ac8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac90:	d1f9      	bne.n	800ac86 <memcpy+0xe>
 800ac92:	bd10      	pop	{r4, pc}

0800ac94 <memset>:
 800ac94:	4603      	mov	r3, r0
 800ac96:	4402      	add	r2, r0
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d100      	bne.n	800ac9e <memset+0xa>
 800ac9c:	4770      	bx	lr
 800ac9e:	f803 1b01 	strb.w	r1, [r3], #1
 800aca2:	e7f9      	b.n	800ac98 <memset+0x4>

0800aca4 <sniprintf>:
 800aca4:	b40c      	push	{r2, r3}
 800aca6:	b530      	push	{r4, r5, lr}
 800aca8:	4b17      	ldr	r3, [pc, #92]	; (800ad08 <sniprintf+0x64>)
 800acaa:	1e0c      	subs	r4, r1, #0
 800acac:	681d      	ldr	r5, [r3, #0]
 800acae:	b09d      	sub	sp, #116	; 0x74
 800acb0:	da08      	bge.n	800acc4 <sniprintf+0x20>
 800acb2:	238b      	movs	r3, #139	; 0x8b
 800acb4:	f04f 30ff 	mov.w	r0, #4294967295
 800acb8:	602b      	str	r3, [r5, #0]
 800acba:	b01d      	add	sp, #116	; 0x74
 800acbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acc0:	b002      	add	sp, #8
 800acc2:	4770      	bx	lr
 800acc4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800acc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800accc:	bf0c      	ite	eq
 800acce:	4623      	moveq	r3, r4
 800acd0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800acd4:	9304      	str	r3, [sp, #16]
 800acd6:	9307      	str	r3, [sp, #28]
 800acd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acdc:	9002      	str	r0, [sp, #8]
 800acde:	9006      	str	r0, [sp, #24]
 800ace0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ace4:	4628      	mov	r0, r5
 800ace6:	ab21      	add	r3, sp, #132	; 0x84
 800ace8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800acea:	a902      	add	r1, sp, #8
 800acec:	9301      	str	r3, [sp, #4]
 800acee:	f000 f94b 	bl	800af88 <_svfiprintf_r>
 800acf2:	1c43      	adds	r3, r0, #1
 800acf4:	bfbc      	itt	lt
 800acf6:	238b      	movlt	r3, #139	; 0x8b
 800acf8:	602b      	strlt	r3, [r5, #0]
 800acfa:	2c00      	cmp	r4, #0
 800acfc:	d0dd      	beq.n	800acba <sniprintf+0x16>
 800acfe:	2200      	movs	r2, #0
 800ad00:	9b02      	ldr	r3, [sp, #8]
 800ad02:	701a      	strb	r2, [r3, #0]
 800ad04:	e7d9      	b.n	800acba <sniprintf+0x16>
 800ad06:	bf00      	nop
 800ad08:	20000058 	.word	0x20000058

0800ad0c <siprintf>:
 800ad0c:	b40e      	push	{r1, r2, r3}
 800ad0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad12:	b500      	push	{lr}
 800ad14:	b09c      	sub	sp, #112	; 0x70
 800ad16:	ab1d      	add	r3, sp, #116	; 0x74
 800ad18:	9002      	str	r0, [sp, #8]
 800ad1a:	9006      	str	r0, [sp, #24]
 800ad1c:	9107      	str	r1, [sp, #28]
 800ad1e:	9104      	str	r1, [sp, #16]
 800ad20:	4808      	ldr	r0, [pc, #32]	; (800ad44 <siprintf+0x38>)
 800ad22:	4909      	ldr	r1, [pc, #36]	; (800ad48 <siprintf+0x3c>)
 800ad24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad28:	9105      	str	r1, [sp, #20]
 800ad2a:	6800      	ldr	r0, [r0, #0]
 800ad2c:	a902      	add	r1, sp, #8
 800ad2e:	9301      	str	r3, [sp, #4]
 800ad30:	f000 f92a 	bl	800af88 <_svfiprintf_r>
 800ad34:	2200      	movs	r2, #0
 800ad36:	9b02      	ldr	r3, [sp, #8]
 800ad38:	701a      	strb	r2, [r3, #0]
 800ad3a:	b01c      	add	sp, #112	; 0x70
 800ad3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad40:	b003      	add	sp, #12
 800ad42:	4770      	bx	lr
 800ad44:	20000058 	.word	0x20000058
 800ad48:	ffff0208 	.word	0xffff0208

0800ad4c <strchr>:
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	b2c9      	uxtb	r1, r1
 800ad50:	4618      	mov	r0, r3
 800ad52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad56:	b112      	cbz	r2, 800ad5e <strchr+0x12>
 800ad58:	428a      	cmp	r2, r1
 800ad5a:	d1f9      	bne.n	800ad50 <strchr+0x4>
 800ad5c:	4770      	bx	lr
 800ad5e:	2900      	cmp	r1, #0
 800ad60:	bf18      	it	ne
 800ad62:	2000      	movne	r0, #0
 800ad64:	4770      	bx	lr

0800ad66 <strncmp>:
 800ad66:	b510      	push	{r4, lr}
 800ad68:	b16a      	cbz	r2, 800ad86 <strncmp+0x20>
 800ad6a:	3901      	subs	r1, #1
 800ad6c:	1884      	adds	r4, r0, r2
 800ad6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ad72:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d103      	bne.n	800ad82 <strncmp+0x1c>
 800ad7a:	42a0      	cmp	r0, r4
 800ad7c:	d001      	beq.n	800ad82 <strncmp+0x1c>
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1f5      	bne.n	800ad6e <strncmp+0x8>
 800ad82:	1a98      	subs	r0, r3, r2
 800ad84:	bd10      	pop	{r4, pc}
 800ad86:	4610      	mov	r0, r2
 800ad88:	e7fc      	b.n	800ad84 <strncmp+0x1e>

0800ad8a <strncpy>:
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	b510      	push	{r4, lr}
 800ad8e:	3901      	subs	r1, #1
 800ad90:	b132      	cbz	r2, 800ada0 <strncpy+0x16>
 800ad92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad96:	3a01      	subs	r2, #1
 800ad98:	f803 4b01 	strb.w	r4, [r3], #1
 800ad9c:	2c00      	cmp	r4, #0
 800ad9e:	d1f7      	bne.n	800ad90 <strncpy+0x6>
 800ada0:	2100      	movs	r1, #0
 800ada2:	441a      	add	r2, r3
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d100      	bne.n	800adaa <strncpy+0x20>
 800ada8:	bd10      	pop	{r4, pc}
 800adaa:	f803 1b01 	strb.w	r1, [r3], #1
 800adae:	e7f9      	b.n	800ada4 <strncpy+0x1a>

0800adb0 <_strtol_l.isra.0>:
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adb6:	4686      	mov	lr, r0
 800adb8:	d001      	beq.n	800adbe <_strtol_l.isra.0+0xe>
 800adba:	2b24      	cmp	r3, #36	; 0x24
 800adbc:	d906      	bls.n	800adcc <_strtol_l.isra.0+0x1c>
 800adbe:	f7ff ff23 	bl	800ac08 <__errno>
 800adc2:	2316      	movs	r3, #22
 800adc4:	6003      	str	r3, [r0, #0]
 800adc6:	2000      	movs	r0, #0
 800adc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adcc:	468c      	mov	ip, r1
 800adce:	4e3a      	ldr	r6, [pc, #232]	; (800aeb8 <_strtol_l.isra.0+0x108>)
 800add0:	4660      	mov	r0, ip
 800add2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800add6:	5da5      	ldrb	r5, [r4, r6]
 800add8:	f015 0508 	ands.w	r5, r5, #8
 800addc:	d1f8      	bne.n	800add0 <_strtol_l.isra.0+0x20>
 800adde:	2c2d      	cmp	r4, #45	; 0x2d
 800ade0:	d133      	bne.n	800ae4a <_strtol_l.isra.0+0x9a>
 800ade2:	f04f 0801 	mov.w	r8, #1
 800ade6:	f89c 4000 	ldrb.w	r4, [ip]
 800adea:	f100 0c02 	add.w	ip, r0, #2
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d05d      	beq.n	800aeae <_strtol_l.isra.0+0xfe>
 800adf2:	2b10      	cmp	r3, #16
 800adf4:	d10c      	bne.n	800ae10 <_strtol_l.isra.0+0x60>
 800adf6:	2c30      	cmp	r4, #48	; 0x30
 800adf8:	d10a      	bne.n	800ae10 <_strtol_l.isra.0+0x60>
 800adfa:	f89c 0000 	ldrb.w	r0, [ip]
 800adfe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ae02:	2858      	cmp	r0, #88	; 0x58
 800ae04:	d14e      	bne.n	800aea4 <_strtol_l.isra.0+0xf4>
 800ae06:	2310      	movs	r3, #16
 800ae08:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ae0c:	f10c 0c02 	add.w	ip, ip, #2
 800ae10:	2500      	movs	r5, #0
 800ae12:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800ae16:	3f01      	subs	r7, #1
 800ae18:	fbb7 f9f3 	udiv	r9, r7, r3
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	fb03 7a19 	mls	sl, r3, r9, r7
 800ae22:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ae26:	2e09      	cmp	r6, #9
 800ae28:	d818      	bhi.n	800ae5c <_strtol_l.isra.0+0xac>
 800ae2a:	4634      	mov	r4, r6
 800ae2c:	42a3      	cmp	r3, r4
 800ae2e:	dd24      	ble.n	800ae7a <_strtol_l.isra.0+0xca>
 800ae30:	2d00      	cmp	r5, #0
 800ae32:	db1f      	blt.n	800ae74 <_strtol_l.isra.0+0xc4>
 800ae34:	4581      	cmp	r9, r0
 800ae36:	d31d      	bcc.n	800ae74 <_strtol_l.isra.0+0xc4>
 800ae38:	d101      	bne.n	800ae3e <_strtol_l.isra.0+0x8e>
 800ae3a:	45a2      	cmp	sl, r4
 800ae3c:	db1a      	blt.n	800ae74 <_strtol_l.isra.0+0xc4>
 800ae3e:	2501      	movs	r5, #1
 800ae40:	fb00 4003 	mla	r0, r0, r3, r4
 800ae44:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ae48:	e7eb      	b.n	800ae22 <_strtol_l.isra.0+0x72>
 800ae4a:	2c2b      	cmp	r4, #43	; 0x2b
 800ae4c:	bf08      	it	eq
 800ae4e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ae52:	46a8      	mov	r8, r5
 800ae54:	bf08      	it	eq
 800ae56:	f100 0c02 	addeq.w	ip, r0, #2
 800ae5a:	e7c8      	b.n	800adee <_strtol_l.isra.0+0x3e>
 800ae5c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ae60:	2e19      	cmp	r6, #25
 800ae62:	d801      	bhi.n	800ae68 <_strtol_l.isra.0+0xb8>
 800ae64:	3c37      	subs	r4, #55	; 0x37
 800ae66:	e7e1      	b.n	800ae2c <_strtol_l.isra.0+0x7c>
 800ae68:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ae6c:	2e19      	cmp	r6, #25
 800ae6e:	d804      	bhi.n	800ae7a <_strtol_l.isra.0+0xca>
 800ae70:	3c57      	subs	r4, #87	; 0x57
 800ae72:	e7db      	b.n	800ae2c <_strtol_l.isra.0+0x7c>
 800ae74:	f04f 35ff 	mov.w	r5, #4294967295
 800ae78:	e7e4      	b.n	800ae44 <_strtol_l.isra.0+0x94>
 800ae7a:	2d00      	cmp	r5, #0
 800ae7c:	da08      	bge.n	800ae90 <_strtol_l.isra.0+0xe0>
 800ae7e:	2322      	movs	r3, #34	; 0x22
 800ae80:	4638      	mov	r0, r7
 800ae82:	f8ce 3000 	str.w	r3, [lr]
 800ae86:	2a00      	cmp	r2, #0
 800ae88:	d09e      	beq.n	800adc8 <_strtol_l.isra.0+0x18>
 800ae8a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ae8e:	e007      	b.n	800aea0 <_strtol_l.isra.0+0xf0>
 800ae90:	f1b8 0f00 	cmp.w	r8, #0
 800ae94:	d000      	beq.n	800ae98 <_strtol_l.isra.0+0xe8>
 800ae96:	4240      	negs	r0, r0
 800ae98:	2a00      	cmp	r2, #0
 800ae9a:	d095      	beq.n	800adc8 <_strtol_l.isra.0+0x18>
 800ae9c:	2d00      	cmp	r5, #0
 800ae9e:	d1f4      	bne.n	800ae8a <_strtol_l.isra.0+0xda>
 800aea0:	6011      	str	r1, [r2, #0]
 800aea2:	e791      	b.n	800adc8 <_strtol_l.isra.0+0x18>
 800aea4:	2430      	movs	r4, #48	; 0x30
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1b2      	bne.n	800ae10 <_strtol_l.isra.0+0x60>
 800aeaa:	2308      	movs	r3, #8
 800aeac:	e7b0      	b.n	800ae10 <_strtol_l.isra.0+0x60>
 800aeae:	2c30      	cmp	r4, #48	; 0x30
 800aeb0:	d0a3      	beq.n	800adfa <_strtol_l.isra.0+0x4a>
 800aeb2:	230a      	movs	r3, #10
 800aeb4:	e7ac      	b.n	800ae10 <_strtol_l.isra.0+0x60>
 800aeb6:	bf00      	nop
 800aeb8:	0800dd6b 	.word	0x0800dd6b

0800aebc <strtol>:
 800aebc:	4613      	mov	r3, r2
 800aebe:	460a      	mov	r2, r1
 800aec0:	4601      	mov	r1, r0
 800aec2:	4802      	ldr	r0, [pc, #8]	; (800aecc <strtol+0x10>)
 800aec4:	6800      	ldr	r0, [r0, #0]
 800aec6:	f7ff bf73 	b.w	800adb0 <_strtol_l.isra.0>
 800aeca:	bf00      	nop
 800aecc:	20000058 	.word	0x20000058

0800aed0 <__ssputs_r>:
 800aed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aed4:	688e      	ldr	r6, [r1, #8]
 800aed6:	4682      	mov	sl, r0
 800aed8:	429e      	cmp	r6, r3
 800aeda:	460c      	mov	r4, r1
 800aedc:	4690      	mov	r8, r2
 800aede:	461f      	mov	r7, r3
 800aee0:	d838      	bhi.n	800af54 <__ssputs_r+0x84>
 800aee2:	898a      	ldrh	r2, [r1, #12]
 800aee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aee8:	d032      	beq.n	800af50 <__ssputs_r+0x80>
 800aeea:	6825      	ldr	r5, [r4, #0]
 800aeec:	6909      	ldr	r1, [r1, #16]
 800aeee:	3301      	adds	r3, #1
 800aef0:	eba5 0901 	sub.w	r9, r5, r1
 800aef4:	6965      	ldr	r5, [r4, #20]
 800aef6:	444b      	add	r3, r9
 800aef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aefc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af00:	106d      	asrs	r5, r5, #1
 800af02:	429d      	cmp	r5, r3
 800af04:	bf38      	it	cc
 800af06:	461d      	movcc	r5, r3
 800af08:	0553      	lsls	r3, r2, #21
 800af0a:	d531      	bpl.n	800af70 <__ssputs_r+0xa0>
 800af0c:	4629      	mov	r1, r5
 800af0e:	f000 fb45 	bl	800b59c <_malloc_r>
 800af12:	4606      	mov	r6, r0
 800af14:	b950      	cbnz	r0, 800af2c <__ssputs_r+0x5c>
 800af16:	230c      	movs	r3, #12
 800af18:	f04f 30ff 	mov.w	r0, #4294967295
 800af1c:	f8ca 3000 	str.w	r3, [sl]
 800af20:	89a3      	ldrh	r3, [r4, #12]
 800af22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af26:	81a3      	strh	r3, [r4, #12]
 800af28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af2c:	464a      	mov	r2, r9
 800af2e:	6921      	ldr	r1, [r4, #16]
 800af30:	f7ff fea2 	bl	800ac78 <memcpy>
 800af34:	89a3      	ldrh	r3, [r4, #12]
 800af36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af3e:	81a3      	strh	r3, [r4, #12]
 800af40:	6126      	str	r6, [r4, #16]
 800af42:	444e      	add	r6, r9
 800af44:	6026      	str	r6, [r4, #0]
 800af46:	463e      	mov	r6, r7
 800af48:	6165      	str	r5, [r4, #20]
 800af4a:	eba5 0509 	sub.w	r5, r5, r9
 800af4e:	60a5      	str	r5, [r4, #8]
 800af50:	42be      	cmp	r6, r7
 800af52:	d900      	bls.n	800af56 <__ssputs_r+0x86>
 800af54:	463e      	mov	r6, r7
 800af56:	4632      	mov	r2, r6
 800af58:	4641      	mov	r1, r8
 800af5a:	6820      	ldr	r0, [r4, #0]
 800af5c:	f000 fab8 	bl	800b4d0 <memmove>
 800af60:	68a3      	ldr	r3, [r4, #8]
 800af62:	6822      	ldr	r2, [r4, #0]
 800af64:	1b9b      	subs	r3, r3, r6
 800af66:	4432      	add	r2, r6
 800af68:	2000      	movs	r0, #0
 800af6a:	60a3      	str	r3, [r4, #8]
 800af6c:	6022      	str	r2, [r4, #0]
 800af6e:	e7db      	b.n	800af28 <__ssputs_r+0x58>
 800af70:	462a      	mov	r2, r5
 800af72:	f000 fb6d 	bl	800b650 <_realloc_r>
 800af76:	4606      	mov	r6, r0
 800af78:	2800      	cmp	r0, #0
 800af7a:	d1e1      	bne.n	800af40 <__ssputs_r+0x70>
 800af7c:	4650      	mov	r0, sl
 800af7e:	6921      	ldr	r1, [r4, #16]
 800af80:	f000 fac0 	bl	800b504 <_free_r>
 800af84:	e7c7      	b.n	800af16 <__ssputs_r+0x46>
	...

0800af88 <_svfiprintf_r>:
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	4698      	mov	r8, r3
 800af8e:	898b      	ldrh	r3, [r1, #12]
 800af90:	4607      	mov	r7, r0
 800af92:	061b      	lsls	r3, r3, #24
 800af94:	460d      	mov	r5, r1
 800af96:	4614      	mov	r4, r2
 800af98:	b09d      	sub	sp, #116	; 0x74
 800af9a:	d50e      	bpl.n	800afba <_svfiprintf_r+0x32>
 800af9c:	690b      	ldr	r3, [r1, #16]
 800af9e:	b963      	cbnz	r3, 800afba <_svfiprintf_r+0x32>
 800afa0:	2140      	movs	r1, #64	; 0x40
 800afa2:	f000 fafb 	bl	800b59c <_malloc_r>
 800afa6:	6028      	str	r0, [r5, #0]
 800afa8:	6128      	str	r0, [r5, #16]
 800afaa:	b920      	cbnz	r0, 800afb6 <_svfiprintf_r+0x2e>
 800afac:	230c      	movs	r3, #12
 800afae:	603b      	str	r3, [r7, #0]
 800afb0:	f04f 30ff 	mov.w	r0, #4294967295
 800afb4:	e0d1      	b.n	800b15a <_svfiprintf_r+0x1d2>
 800afb6:	2340      	movs	r3, #64	; 0x40
 800afb8:	616b      	str	r3, [r5, #20]
 800afba:	2300      	movs	r3, #0
 800afbc:	9309      	str	r3, [sp, #36]	; 0x24
 800afbe:	2320      	movs	r3, #32
 800afc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afc4:	2330      	movs	r3, #48	; 0x30
 800afc6:	f04f 0901 	mov.w	r9, #1
 800afca:	f8cd 800c 	str.w	r8, [sp, #12]
 800afce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b174 <_svfiprintf_r+0x1ec>
 800afd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afd6:	4623      	mov	r3, r4
 800afd8:	469a      	mov	sl, r3
 800afda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afde:	b10a      	cbz	r2, 800afe4 <_svfiprintf_r+0x5c>
 800afe0:	2a25      	cmp	r2, #37	; 0x25
 800afe2:	d1f9      	bne.n	800afd8 <_svfiprintf_r+0x50>
 800afe4:	ebba 0b04 	subs.w	fp, sl, r4
 800afe8:	d00b      	beq.n	800b002 <_svfiprintf_r+0x7a>
 800afea:	465b      	mov	r3, fp
 800afec:	4622      	mov	r2, r4
 800afee:	4629      	mov	r1, r5
 800aff0:	4638      	mov	r0, r7
 800aff2:	f7ff ff6d 	bl	800aed0 <__ssputs_r>
 800aff6:	3001      	adds	r0, #1
 800aff8:	f000 80aa 	beq.w	800b150 <_svfiprintf_r+0x1c8>
 800affc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800affe:	445a      	add	r2, fp
 800b000:	9209      	str	r2, [sp, #36]	; 0x24
 800b002:	f89a 3000 	ldrb.w	r3, [sl]
 800b006:	2b00      	cmp	r3, #0
 800b008:	f000 80a2 	beq.w	800b150 <_svfiprintf_r+0x1c8>
 800b00c:	2300      	movs	r3, #0
 800b00e:	f04f 32ff 	mov.w	r2, #4294967295
 800b012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b016:	f10a 0a01 	add.w	sl, sl, #1
 800b01a:	9304      	str	r3, [sp, #16]
 800b01c:	9307      	str	r3, [sp, #28]
 800b01e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b022:	931a      	str	r3, [sp, #104]	; 0x68
 800b024:	4654      	mov	r4, sl
 800b026:	2205      	movs	r2, #5
 800b028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b02c:	4851      	ldr	r0, [pc, #324]	; (800b174 <_svfiprintf_r+0x1ec>)
 800b02e:	f000 fa41 	bl	800b4b4 <memchr>
 800b032:	9a04      	ldr	r2, [sp, #16]
 800b034:	b9d8      	cbnz	r0, 800b06e <_svfiprintf_r+0xe6>
 800b036:	06d0      	lsls	r0, r2, #27
 800b038:	bf44      	itt	mi
 800b03a:	2320      	movmi	r3, #32
 800b03c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b040:	0711      	lsls	r1, r2, #28
 800b042:	bf44      	itt	mi
 800b044:	232b      	movmi	r3, #43	; 0x2b
 800b046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b04a:	f89a 3000 	ldrb.w	r3, [sl]
 800b04e:	2b2a      	cmp	r3, #42	; 0x2a
 800b050:	d015      	beq.n	800b07e <_svfiprintf_r+0xf6>
 800b052:	4654      	mov	r4, sl
 800b054:	2000      	movs	r0, #0
 800b056:	f04f 0c0a 	mov.w	ip, #10
 800b05a:	9a07      	ldr	r2, [sp, #28]
 800b05c:	4621      	mov	r1, r4
 800b05e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b062:	3b30      	subs	r3, #48	; 0x30
 800b064:	2b09      	cmp	r3, #9
 800b066:	d94e      	bls.n	800b106 <_svfiprintf_r+0x17e>
 800b068:	b1b0      	cbz	r0, 800b098 <_svfiprintf_r+0x110>
 800b06a:	9207      	str	r2, [sp, #28]
 800b06c:	e014      	b.n	800b098 <_svfiprintf_r+0x110>
 800b06e:	eba0 0308 	sub.w	r3, r0, r8
 800b072:	fa09 f303 	lsl.w	r3, r9, r3
 800b076:	4313      	orrs	r3, r2
 800b078:	46a2      	mov	sl, r4
 800b07a:	9304      	str	r3, [sp, #16]
 800b07c:	e7d2      	b.n	800b024 <_svfiprintf_r+0x9c>
 800b07e:	9b03      	ldr	r3, [sp, #12]
 800b080:	1d19      	adds	r1, r3, #4
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	9103      	str	r1, [sp, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	bfbb      	ittet	lt
 800b08a:	425b      	neglt	r3, r3
 800b08c:	f042 0202 	orrlt.w	r2, r2, #2
 800b090:	9307      	strge	r3, [sp, #28]
 800b092:	9307      	strlt	r3, [sp, #28]
 800b094:	bfb8      	it	lt
 800b096:	9204      	strlt	r2, [sp, #16]
 800b098:	7823      	ldrb	r3, [r4, #0]
 800b09a:	2b2e      	cmp	r3, #46	; 0x2e
 800b09c:	d10c      	bne.n	800b0b8 <_svfiprintf_r+0x130>
 800b09e:	7863      	ldrb	r3, [r4, #1]
 800b0a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b0a2:	d135      	bne.n	800b110 <_svfiprintf_r+0x188>
 800b0a4:	9b03      	ldr	r3, [sp, #12]
 800b0a6:	3402      	adds	r4, #2
 800b0a8:	1d1a      	adds	r2, r3, #4
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	9203      	str	r2, [sp, #12]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	bfb8      	it	lt
 800b0b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0b6:	9305      	str	r3, [sp, #20]
 800b0b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b184 <_svfiprintf_r+0x1fc>
 800b0bc:	2203      	movs	r2, #3
 800b0be:	4650      	mov	r0, sl
 800b0c0:	7821      	ldrb	r1, [r4, #0]
 800b0c2:	f000 f9f7 	bl	800b4b4 <memchr>
 800b0c6:	b140      	cbz	r0, 800b0da <_svfiprintf_r+0x152>
 800b0c8:	2340      	movs	r3, #64	; 0x40
 800b0ca:	eba0 000a 	sub.w	r0, r0, sl
 800b0ce:	fa03 f000 	lsl.w	r0, r3, r0
 800b0d2:	9b04      	ldr	r3, [sp, #16]
 800b0d4:	3401      	adds	r4, #1
 800b0d6:	4303      	orrs	r3, r0
 800b0d8:	9304      	str	r3, [sp, #16]
 800b0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0de:	2206      	movs	r2, #6
 800b0e0:	4825      	ldr	r0, [pc, #148]	; (800b178 <_svfiprintf_r+0x1f0>)
 800b0e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0e6:	f000 f9e5 	bl	800b4b4 <memchr>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d038      	beq.n	800b160 <_svfiprintf_r+0x1d8>
 800b0ee:	4b23      	ldr	r3, [pc, #140]	; (800b17c <_svfiprintf_r+0x1f4>)
 800b0f0:	bb1b      	cbnz	r3, 800b13a <_svfiprintf_r+0x1b2>
 800b0f2:	9b03      	ldr	r3, [sp, #12]
 800b0f4:	3307      	adds	r3, #7
 800b0f6:	f023 0307 	bic.w	r3, r3, #7
 800b0fa:	3308      	adds	r3, #8
 800b0fc:	9303      	str	r3, [sp, #12]
 800b0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b100:	4433      	add	r3, r6
 800b102:	9309      	str	r3, [sp, #36]	; 0x24
 800b104:	e767      	b.n	800afd6 <_svfiprintf_r+0x4e>
 800b106:	460c      	mov	r4, r1
 800b108:	2001      	movs	r0, #1
 800b10a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b10e:	e7a5      	b.n	800b05c <_svfiprintf_r+0xd4>
 800b110:	2300      	movs	r3, #0
 800b112:	f04f 0c0a 	mov.w	ip, #10
 800b116:	4619      	mov	r1, r3
 800b118:	3401      	adds	r4, #1
 800b11a:	9305      	str	r3, [sp, #20]
 800b11c:	4620      	mov	r0, r4
 800b11e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b122:	3a30      	subs	r2, #48	; 0x30
 800b124:	2a09      	cmp	r2, #9
 800b126:	d903      	bls.n	800b130 <_svfiprintf_r+0x1a8>
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d0c5      	beq.n	800b0b8 <_svfiprintf_r+0x130>
 800b12c:	9105      	str	r1, [sp, #20]
 800b12e:	e7c3      	b.n	800b0b8 <_svfiprintf_r+0x130>
 800b130:	4604      	mov	r4, r0
 800b132:	2301      	movs	r3, #1
 800b134:	fb0c 2101 	mla	r1, ip, r1, r2
 800b138:	e7f0      	b.n	800b11c <_svfiprintf_r+0x194>
 800b13a:	ab03      	add	r3, sp, #12
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	462a      	mov	r2, r5
 800b140:	4638      	mov	r0, r7
 800b142:	4b0f      	ldr	r3, [pc, #60]	; (800b180 <_svfiprintf_r+0x1f8>)
 800b144:	a904      	add	r1, sp, #16
 800b146:	f3af 8000 	nop.w
 800b14a:	1c42      	adds	r2, r0, #1
 800b14c:	4606      	mov	r6, r0
 800b14e:	d1d6      	bne.n	800b0fe <_svfiprintf_r+0x176>
 800b150:	89ab      	ldrh	r3, [r5, #12]
 800b152:	065b      	lsls	r3, r3, #25
 800b154:	f53f af2c 	bmi.w	800afb0 <_svfiprintf_r+0x28>
 800b158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b15a:	b01d      	add	sp, #116	; 0x74
 800b15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b160:	ab03      	add	r3, sp, #12
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	462a      	mov	r2, r5
 800b166:	4638      	mov	r0, r7
 800b168:	4b05      	ldr	r3, [pc, #20]	; (800b180 <_svfiprintf_r+0x1f8>)
 800b16a:	a904      	add	r1, sp, #16
 800b16c:	f000 f87c 	bl	800b268 <_printf_i>
 800b170:	e7eb      	b.n	800b14a <_svfiprintf_r+0x1c2>
 800b172:	bf00      	nop
 800b174:	0800de6b 	.word	0x0800de6b
 800b178:	0800de75 	.word	0x0800de75
 800b17c:	00000000 	.word	0x00000000
 800b180:	0800aed1 	.word	0x0800aed1
 800b184:	0800de71 	.word	0x0800de71

0800b188 <_printf_common>:
 800b188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b18c:	4616      	mov	r6, r2
 800b18e:	4699      	mov	r9, r3
 800b190:	688a      	ldr	r2, [r1, #8]
 800b192:	690b      	ldr	r3, [r1, #16]
 800b194:	4607      	mov	r7, r0
 800b196:	4293      	cmp	r3, r2
 800b198:	bfb8      	it	lt
 800b19a:	4613      	movlt	r3, r2
 800b19c:	6033      	str	r3, [r6, #0]
 800b19e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1a2:	460c      	mov	r4, r1
 800b1a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1a8:	b10a      	cbz	r2, 800b1ae <_printf_common+0x26>
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	6033      	str	r3, [r6, #0]
 800b1ae:	6823      	ldr	r3, [r4, #0]
 800b1b0:	0699      	lsls	r1, r3, #26
 800b1b2:	bf42      	ittt	mi
 800b1b4:	6833      	ldrmi	r3, [r6, #0]
 800b1b6:	3302      	addmi	r3, #2
 800b1b8:	6033      	strmi	r3, [r6, #0]
 800b1ba:	6825      	ldr	r5, [r4, #0]
 800b1bc:	f015 0506 	ands.w	r5, r5, #6
 800b1c0:	d106      	bne.n	800b1d0 <_printf_common+0x48>
 800b1c2:	f104 0a19 	add.w	sl, r4, #25
 800b1c6:	68e3      	ldr	r3, [r4, #12]
 800b1c8:	6832      	ldr	r2, [r6, #0]
 800b1ca:	1a9b      	subs	r3, r3, r2
 800b1cc:	42ab      	cmp	r3, r5
 800b1ce:	dc28      	bgt.n	800b222 <_printf_common+0x9a>
 800b1d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b1d4:	1e13      	subs	r3, r2, #0
 800b1d6:	6822      	ldr	r2, [r4, #0]
 800b1d8:	bf18      	it	ne
 800b1da:	2301      	movne	r3, #1
 800b1dc:	0692      	lsls	r2, r2, #26
 800b1de:	d42d      	bmi.n	800b23c <_printf_common+0xb4>
 800b1e0:	4649      	mov	r1, r9
 800b1e2:	4638      	mov	r0, r7
 800b1e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1e8:	47c0      	blx	r8
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	d020      	beq.n	800b230 <_printf_common+0xa8>
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	68e5      	ldr	r5, [r4, #12]
 800b1f2:	f003 0306 	and.w	r3, r3, #6
 800b1f6:	2b04      	cmp	r3, #4
 800b1f8:	bf18      	it	ne
 800b1fa:	2500      	movne	r5, #0
 800b1fc:	6832      	ldr	r2, [r6, #0]
 800b1fe:	f04f 0600 	mov.w	r6, #0
 800b202:	68a3      	ldr	r3, [r4, #8]
 800b204:	bf08      	it	eq
 800b206:	1aad      	subeq	r5, r5, r2
 800b208:	6922      	ldr	r2, [r4, #16]
 800b20a:	bf08      	it	eq
 800b20c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b210:	4293      	cmp	r3, r2
 800b212:	bfc4      	itt	gt
 800b214:	1a9b      	subgt	r3, r3, r2
 800b216:	18ed      	addgt	r5, r5, r3
 800b218:	341a      	adds	r4, #26
 800b21a:	42b5      	cmp	r5, r6
 800b21c:	d11a      	bne.n	800b254 <_printf_common+0xcc>
 800b21e:	2000      	movs	r0, #0
 800b220:	e008      	b.n	800b234 <_printf_common+0xac>
 800b222:	2301      	movs	r3, #1
 800b224:	4652      	mov	r2, sl
 800b226:	4649      	mov	r1, r9
 800b228:	4638      	mov	r0, r7
 800b22a:	47c0      	blx	r8
 800b22c:	3001      	adds	r0, #1
 800b22e:	d103      	bne.n	800b238 <_printf_common+0xb0>
 800b230:	f04f 30ff 	mov.w	r0, #4294967295
 800b234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b238:	3501      	adds	r5, #1
 800b23a:	e7c4      	b.n	800b1c6 <_printf_common+0x3e>
 800b23c:	2030      	movs	r0, #48	; 0x30
 800b23e:	18e1      	adds	r1, r4, r3
 800b240:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b244:	1c5a      	adds	r2, r3, #1
 800b246:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b24a:	4422      	add	r2, r4
 800b24c:	3302      	adds	r3, #2
 800b24e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b252:	e7c5      	b.n	800b1e0 <_printf_common+0x58>
 800b254:	2301      	movs	r3, #1
 800b256:	4622      	mov	r2, r4
 800b258:	4649      	mov	r1, r9
 800b25a:	4638      	mov	r0, r7
 800b25c:	47c0      	blx	r8
 800b25e:	3001      	adds	r0, #1
 800b260:	d0e6      	beq.n	800b230 <_printf_common+0xa8>
 800b262:	3601      	adds	r6, #1
 800b264:	e7d9      	b.n	800b21a <_printf_common+0x92>
	...

0800b268 <_printf_i>:
 800b268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b26c:	460c      	mov	r4, r1
 800b26e:	7e27      	ldrb	r7, [r4, #24]
 800b270:	4691      	mov	r9, r2
 800b272:	2f78      	cmp	r7, #120	; 0x78
 800b274:	4680      	mov	r8, r0
 800b276:	469a      	mov	sl, r3
 800b278:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b27a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b27e:	d807      	bhi.n	800b290 <_printf_i+0x28>
 800b280:	2f62      	cmp	r7, #98	; 0x62
 800b282:	d80a      	bhi.n	800b29a <_printf_i+0x32>
 800b284:	2f00      	cmp	r7, #0
 800b286:	f000 80d9 	beq.w	800b43c <_printf_i+0x1d4>
 800b28a:	2f58      	cmp	r7, #88	; 0x58
 800b28c:	f000 80a4 	beq.w	800b3d8 <_printf_i+0x170>
 800b290:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b298:	e03a      	b.n	800b310 <_printf_i+0xa8>
 800b29a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b29e:	2b15      	cmp	r3, #21
 800b2a0:	d8f6      	bhi.n	800b290 <_printf_i+0x28>
 800b2a2:	a001      	add	r0, pc, #4	; (adr r0, 800b2a8 <_printf_i+0x40>)
 800b2a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b2a8:	0800b301 	.word	0x0800b301
 800b2ac:	0800b315 	.word	0x0800b315
 800b2b0:	0800b291 	.word	0x0800b291
 800b2b4:	0800b291 	.word	0x0800b291
 800b2b8:	0800b291 	.word	0x0800b291
 800b2bc:	0800b291 	.word	0x0800b291
 800b2c0:	0800b315 	.word	0x0800b315
 800b2c4:	0800b291 	.word	0x0800b291
 800b2c8:	0800b291 	.word	0x0800b291
 800b2cc:	0800b291 	.word	0x0800b291
 800b2d0:	0800b291 	.word	0x0800b291
 800b2d4:	0800b423 	.word	0x0800b423
 800b2d8:	0800b345 	.word	0x0800b345
 800b2dc:	0800b405 	.word	0x0800b405
 800b2e0:	0800b291 	.word	0x0800b291
 800b2e4:	0800b291 	.word	0x0800b291
 800b2e8:	0800b445 	.word	0x0800b445
 800b2ec:	0800b291 	.word	0x0800b291
 800b2f0:	0800b345 	.word	0x0800b345
 800b2f4:	0800b291 	.word	0x0800b291
 800b2f8:	0800b291 	.word	0x0800b291
 800b2fc:	0800b40d 	.word	0x0800b40d
 800b300:	680b      	ldr	r3, [r1, #0]
 800b302:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b306:	1d1a      	adds	r2, r3, #4
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	600a      	str	r2, [r1, #0]
 800b30c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b310:	2301      	movs	r3, #1
 800b312:	e0a4      	b.n	800b45e <_printf_i+0x1f6>
 800b314:	6825      	ldr	r5, [r4, #0]
 800b316:	6808      	ldr	r0, [r1, #0]
 800b318:	062e      	lsls	r6, r5, #24
 800b31a:	f100 0304 	add.w	r3, r0, #4
 800b31e:	d50a      	bpl.n	800b336 <_printf_i+0xce>
 800b320:	6805      	ldr	r5, [r0, #0]
 800b322:	600b      	str	r3, [r1, #0]
 800b324:	2d00      	cmp	r5, #0
 800b326:	da03      	bge.n	800b330 <_printf_i+0xc8>
 800b328:	232d      	movs	r3, #45	; 0x2d
 800b32a:	426d      	negs	r5, r5
 800b32c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b330:	230a      	movs	r3, #10
 800b332:	485e      	ldr	r0, [pc, #376]	; (800b4ac <_printf_i+0x244>)
 800b334:	e019      	b.n	800b36a <_printf_i+0x102>
 800b336:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b33a:	6805      	ldr	r5, [r0, #0]
 800b33c:	600b      	str	r3, [r1, #0]
 800b33e:	bf18      	it	ne
 800b340:	b22d      	sxthne	r5, r5
 800b342:	e7ef      	b.n	800b324 <_printf_i+0xbc>
 800b344:	680b      	ldr	r3, [r1, #0]
 800b346:	6825      	ldr	r5, [r4, #0]
 800b348:	1d18      	adds	r0, r3, #4
 800b34a:	6008      	str	r0, [r1, #0]
 800b34c:	0628      	lsls	r0, r5, #24
 800b34e:	d501      	bpl.n	800b354 <_printf_i+0xec>
 800b350:	681d      	ldr	r5, [r3, #0]
 800b352:	e002      	b.n	800b35a <_printf_i+0xf2>
 800b354:	0669      	lsls	r1, r5, #25
 800b356:	d5fb      	bpl.n	800b350 <_printf_i+0xe8>
 800b358:	881d      	ldrh	r5, [r3, #0]
 800b35a:	2f6f      	cmp	r7, #111	; 0x6f
 800b35c:	bf0c      	ite	eq
 800b35e:	2308      	moveq	r3, #8
 800b360:	230a      	movne	r3, #10
 800b362:	4852      	ldr	r0, [pc, #328]	; (800b4ac <_printf_i+0x244>)
 800b364:	2100      	movs	r1, #0
 800b366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b36a:	6866      	ldr	r6, [r4, #4]
 800b36c:	2e00      	cmp	r6, #0
 800b36e:	bfa8      	it	ge
 800b370:	6821      	ldrge	r1, [r4, #0]
 800b372:	60a6      	str	r6, [r4, #8]
 800b374:	bfa4      	itt	ge
 800b376:	f021 0104 	bicge.w	r1, r1, #4
 800b37a:	6021      	strge	r1, [r4, #0]
 800b37c:	b90d      	cbnz	r5, 800b382 <_printf_i+0x11a>
 800b37e:	2e00      	cmp	r6, #0
 800b380:	d04d      	beq.n	800b41e <_printf_i+0x1b6>
 800b382:	4616      	mov	r6, r2
 800b384:	fbb5 f1f3 	udiv	r1, r5, r3
 800b388:	fb03 5711 	mls	r7, r3, r1, r5
 800b38c:	5dc7      	ldrb	r7, [r0, r7]
 800b38e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b392:	462f      	mov	r7, r5
 800b394:	42bb      	cmp	r3, r7
 800b396:	460d      	mov	r5, r1
 800b398:	d9f4      	bls.n	800b384 <_printf_i+0x11c>
 800b39a:	2b08      	cmp	r3, #8
 800b39c:	d10b      	bne.n	800b3b6 <_printf_i+0x14e>
 800b39e:	6823      	ldr	r3, [r4, #0]
 800b3a0:	07df      	lsls	r7, r3, #31
 800b3a2:	d508      	bpl.n	800b3b6 <_printf_i+0x14e>
 800b3a4:	6923      	ldr	r3, [r4, #16]
 800b3a6:	6861      	ldr	r1, [r4, #4]
 800b3a8:	4299      	cmp	r1, r3
 800b3aa:	bfde      	ittt	le
 800b3ac:	2330      	movle	r3, #48	; 0x30
 800b3ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b3b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b3b6:	1b92      	subs	r2, r2, r6
 800b3b8:	6122      	str	r2, [r4, #16]
 800b3ba:	464b      	mov	r3, r9
 800b3bc:	4621      	mov	r1, r4
 800b3be:	4640      	mov	r0, r8
 800b3c0:	f8cd a000 	str.w	sl, [sp]
 800b3c4:	aa03      	add	r2, sp, #12
 800b3c6:	f7ff fedf 	bl	800b188 <_printf_common>
 800b3ca:	3001      	adds	r0, #1
 800b3cc:	d14c      	bne.n	800b468 <_printf_i+0x200>
 800b3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d2:	b004      	add	sp, #16
 800b3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d8:	4834      	ldr	r0, [pc, #208]	; (800b4ac <_printf_i+0x244>)
 800b3da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b3de:	680e      	ldr	r6, [r1, #0]
 800b3e0:	6823      	ldr	r3, [r4, #0]
 800b3e2:	f856 5b04 	ldr.w	r5, [r6], #4
 800b3e6:	061f      	lsls	r7, r3, #24
 800b3e8:	600e      	str	r6, [r1, #0]
 800b3ea:	d514      	bpl.n	800b416 <_printf_i+0x1ae>
 800b3ec:	07d9      	lsls	r1, r3, #31
 800b3ee:	bf44      	itt	mi
 800b3f0:	f043 0320 	orrmi.w	r3, r3, #32
 800b3f4:	6023      	strmi	r3, [r4, #0]
 800b3f6:	b91d      	cbnz	r5, 800b400 <_printf_i+0x198>
 800b3f8:	6823      	ldr	r3, [r4, #0]
 800b3fa:	f023 0320 	bic.w	r3, r3, #32
 800b3fe:	6023      	str	r3, [r4, #0]
 800b400:	2310      	movs	r3, #16
 800b402:	e7af      	b.n	800b364 <_printf_i+0xfc>
 800b404:	6823      	ldr	r3, [r4, #0]
 800b406:	f043 0320 	orr.w	r3, r3, #32
 800b40a:	6023      	str	r3, [r4, #0]
 800b40c:	2378      	movs	r3, #120	; 0x78
 800b40e:	4828      	ldr	r0, [pc, #160]	; (800b4b0 <_printf_i+0x248>)
 800b410:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b414:	e7e3      	b.n	800b3de <_printf_i+0x176>
 800b416:	065e      	lsls	r6, r3, #25
 800b418:	bf48      	it	mi
 800b41a:	b2ad      	uxthmi	r5, r5
 800b41c:	e7e6      	b.n	800b3ec <_printf_i+0x184>
 800b41e:	4616      	mov	r6, r2
 800b420:	e7bb      	b.n	800b39a <_printf_i+0x132>
 800b422:	680b      	ldr	r3, [r1, #0]
 800b424:	6826      	ldr	r6, [r4, #0]
 800b426:	1d1d      	adds	r5, r3, #4
 800b428:	6960      	ldr	r0, [r4, #20]
 800b42a:	600d      	str	r5, [r1, #0]
 800b42c:	0635      	lsls	r5, r6, #24
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	d501      	bpl.n	800b436 <_printf_i+0x1ce>
 800b432:	6018      	str	r0, [r3, #0]
 800b434:	e002      	b.n	800b43c <_printf_i+0x1d4>
 800b436:	0671      	lsls	r1, r6, #25
 800b438:	d5fb      	bpl.n	800b432 <_printf_i+0x1ca>
 800b43a:	8018      	strh	r0, [r3, #0]
 800b43c:	2300      	movs	r3, #0
 800b43e:	4616      	mov	r6, r2
 800b440:	6123      	str	r3, [r4, #16]
 800b442:	e7ba      	b.n	800b3ba <_printf_i+0x152>
 800b444:	680b      	ldr	r3, [r1, #0]
 800b446:	1d1a      	adds	r2, r3, #4
 800b448:	600a      	str	r2, [r1, #0]
 800b44a:	681e      	ldr	r6, [r3, #0]
 800b44c:	2100      	movs	r1, #0
 800b44e:	4630      	mov	r0, r6
 800b450:	6862      	ldr	r2, [r4, #4]
 800b452:	f000 f82f 	bl	800b4b4 <memchr>
 800b456:	b108      	cbz	r0, 800b45c <_printf_i+0x1f4>
 800b458:	1b80      	subs	r0, r0, r6
 800b45a:	6060      	str	r0, [r4, #4]
 800b45c:	6863      	ldr	r3, [r4, #4]
 800b45e:	6123      	str	r3, [r4, #16]
 800b460:	2300      	movs	r3, #0
 800b462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b466:	e7a8      	b.n	800b3ba <_printf_i+0x152>
 800b468:	4632      	mov	r2, r6
 800b46a:	4649      	mov	r1, r9
 800b46c:	4640      	mov	r0, r8
 800b46e:	6923      	ldr	r3, [r4, #16]
 800b470:	47d0      	blx	sl
 800b472:	3001      	adds	r0, #1
 800b474:	d0ab      	beq.n	800b3ce <_printf_i+0x166>
 800b476:	6823      	ldr	r3, [r4, #0]
 800b478:	079b      	lsls	r3, r3, #30
 800b47a:	d413      	bmi.n	800b4a4 <_printf_i+0x23c>
 800b47c:	68e0      	ldr	r0, [r4, #12]
 800b47e:	9b03      	ldr	r3, [sp, #12]
 800b480:	4298      	cmp	r0, r3
 800b482:	bfb8      	it	lt
 800b484:	4618      	movlt	r0, r3
 800b486:	e7a4      	b.n	800b3d2 <_printf_i+0x16a>
 800b488:	2301      	movs	r3, #1
 800b48a:	4632      	mov	r2, r6
 800b48c:	4649      	mov	r1, r9
 800b48e:	4640      	mov	r0, r8
 800b490:	47d0      	blx	sl
 800b492:	3001      	adds	r0, #1
 800b494:	d09b      	beq.n	800b3ce <_printf_i+0x166>
 800b496:	3501      	adds	r5, #1
 800b498:	68e3      	ldr	r3, [r4, #12]
 800b49a:	9903      	ldr	r1, [sp, #12]
 800b49c:	1a5b      	subs	r3, r3, r1
 800b49e:	42ab      	cmp	r3, r5
 800b4a0:	dcf2      	bgt.n	800b488 <_printf_i+0x220>
 800b4a2:	e7eb      	b.n	800b47c <_printf_i+0x214>
 800b4a4:	2500      	movs	r5, #0
 800b4a6:	f104 0619 	add.w	r6, r4, #25
 800b4aa:	e7f5      	b.n	800b498 <_printf_i+0x230>
 800b4ac:	0800de7c 	.word	0x0800de7c
 800b4b0:	0800de8d 	.word	0x0800de8d

0800b4b4 <memchr>:
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	b510      	push	{r4, lr}
 800b4b8:	b2c9      	uxtb	r1, r1
 800b4ba:	4402      	add	r2, r0
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	4618      	mov	r0, r3
 800b4c0:	d101      	bne.n	800b4c6 <memchr+0x12>
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	e003      	b.n	800b4ce <memchr+0x1a>
 800b4c6:	7804      	ldrb	r4, [r0, #0]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	428c      	cmp	r4, r1
 800b4cc:	d1f6      	bne.n	800b4bc <memchr+0x8>
 800b4ce:	bd10      	pop	{r4, pc}

0800b4d0 <memmove>:
 800b4d0:	4288      	cmp	r0, r1
 800b4d2:	b510      	push	{r4, lr}
 800b4d4:	eb01 0402 	add.w	r4, r1, r2
 800b4d8:	d902      	bls.n	800b4e0 <memmove+0x10>
 800b4da:	4284      	cmp	r4, r0
 800b4dc:	4623      	mov	r3, r4
 800b4de:	d807      	bhi.n	800b4f0 <memmove+0x20>
 800b4e0:	1e43      	subs	r3, r0, #1
 800b4e2:	42a1      	cmp	r1, r4
 800b4e4:	d008      	beq.n	800b4f8 <memmove+0x28>
 800b4e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4ee:	e7f8      	b.n	800b4e2 <memmove+0x12>
 800b4f0:	4601      	mov	r1, r0
 800b4f2:	4402      	add	r2, r0
 800b4f4:	428a      	cmp	r2, r1
 800b4f6:	d100      	bne.n	800b4fa <memmove+0x2a>
 800b4f8:	bd10      	pop	{r4, pc}
 800b4fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b502:	e7f7      	b.n	800b4f4 <memmove+0x24>

0800b504 <_free_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4605      	mov	r5, r0
 800b508:	2900      	cmp	r1, #0
 800b50a:	d043      	beq.n	800b594 <_free_r+0x90>
 800b50c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b510:	1f0c      	subs	r4, r1, #4
 800b512:	2b00      	cmp	r3, #0
 800b514:	bfb8      	it	lt
 800b516:	18e4      	addlt	r4, r4, r3
 800b518:	f000 f8d0 	bl	800b6bc <__malloc_lock>
 800b51c:	4a1e      	ldr	r2, [pc, #120]	; (800b598 <_free_r+0x94>)
 800b51e:	6813      	ldr	r3, [r2, #0]
 800b520:	4610      	mov	r0, r2
 800b522:	b933      	cbnz	r3, 800b532 <_free_r+0x2e>
 800b524:	6063      	str	r3, [r4, #4]
 800b526:	6014      	str	r4, [r2, #0]
 800b528:	4628      	mov	r0, r5
 800b52a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b52e:	f000 b8cb 	b.w	800b6c8 <__malloc_unlock>
 800b532:	42a3      	cmp	r3, r4
 800b534:	d90a      	bls.n	800b54c <_free_r+0x48>
 800b536:	6821      	ldr	r1, [r4, #0]
 800b538:	1862      	adds	r2, r4, r1
 800b53a:	4293      	cmp	r3, r2
 800b53c:	bf01      	itttt	eq
 800b53e:	681a      	ldreq	r2, [r3, #0]
 800b540:	685b      	ldreq	r3, [r3, #4]
 800b542:	1852      	addeq	r2, r2, r1
 800b544:	6022      	streq	r2, [r4, #0]
 800b546:	6063      	str	r3, [r4, #4]
 800b548:	6004      	str	r4, [r0, #0]
 800b54a:	e7ed      	b.n	800b528 <_free_r+0x24>
 800b54c:	461a      	mov	r2, r3
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	b10b      	cbz	r3, 800b556 <_free_r+0x52>
 800b552:	42a3      	cmp	r3, r4
 800b554:	d9fa      	bls.n	800b54c <_free_r+0x48>
 800b556:	6811      	ldr	r1, [r2, #0]
 800b558:	1850      	adds	r0, r2, r1
 800b55a:	42a0      	cmp	r0, r4
 800b55c:	d10b      	bne.n	800b576 <_free_r+0x72>
 800b55e:	6820      	ldr	r0, [r4, #0]
 800b560:	4401      	add	r1, r0
 800b562:	1850      	adds	r0, r2, r1
 800b564:	4283      	cmp	r3, r0
 800b566:	6011      	str	r1, [r2, #0]
 800b568:	d1de      	bne.n	800b528 <_free_r+0x24>
 800b56a:	6818      	ldr	r0, [r3, #0]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	4401      	add	r1, r0
 800b570:	6011      	str	r1, [r2, #0]
 800b572:	6053      	str	r3, [r2, #4]
 800b574:	e7d8      	b.n	800b528 <_free_r+0x24>
 800b576:	d902      	bls.n	800b57e <_free_r+0x7a>
 800b578:	230c      	movs	r3, #12
 800b57a:	602b      	str	r3, [r5, #0]
 800b57c:	e7d4      	b.n	800b528 <_free_r+0x24>
 800b57e:	6820      	ldr	r0, [r4, #0]
 800b580:	1821      	adds	r1, r4, r0
 800b582:	428b      	cmp	r3, r1
 800b584:	bf01      	itttt	eq
 800b586:	6819      	ldreq	r1, [r3, #0]
 800b588:	685b      	ldreq	r3, [r3, #4]
 800b58a:	1809      	addeq	r1, r1, r0
 800b58c:	6021      	streq	r1, [r4, #0]
 800b58e:	6063      	str	r3, [r4, #4]
 800b590:	6054      	str	r4, [r2, #4]
 800b592:	e7c9      	b.n	800b528 <_free_r+0x24>
 800b594:	bd38      	pop	{r3, r4, r5, pc}
 800b596:	bf00      	nop
 800b598:	20002afc 	.word	0x20002afc

0800b59c <_malloc_r>:
 800b59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59e:	1ccd      	adds	r5, r1, #3
 800b5a0:	f025 0503 	bic.w	r5, r5, #3
 800b5a4:	3508      	adds	r5, #8
 800b5a6:	2d0c      	cmp	r5, #12
 800b5a8:	bf38      	it	cc
 800b5aa:	250c      	movcc	r5, #12
 800b5ac:	2d00      	cmp	r5, #0
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	db01      	blt.n	800b5b6 <_malloc_r+0x1a>
 800b5b2:	42a9      	cmp	r1, r5
 800b5b4:	d903      	bls.n	800b5be <_malloc_r+0x22>
 800b5b6:	230c      	movs	r3, #12
 800b5b8:	6033      	str	r3, [r6, #0]
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5be:	f000 f87d 	bl	800b6bc <__malloc_lock>
 800b5c2:	4921      	ldr	r1, [pc, #132]	; (800b648 <_malloc_r+0xac>)
 800b5c4:	680a      	ldr	r2, [r1, #0]
 800b5c6:	4614      	mov	r4, r2
 800b5c8:	b99c      	cbnz	r4, 800b5f2 <_malloc_r+0x56>
 800b5ca:	4f20      	ldr	r7, [pc, #128]	; (800b64c <_malloc_r+0xb0>)
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	b923      	cbnz	r3, 800b5da <_malloc_r+0x3e>
 800b5d0:	4621      	mov	r1, r4
 800b5d2:	4630      	mov	r0, r6
 800b5d4:	f000 f862 	bl	800b69c <_sbrk_r>
 800b5d8:	6038      	str	r0, [r7, #0]
 800b5da:	4629      	mov	r1, r5
 800b5dc:	4630      	mov	r0, r6
 800b5de:	f000 f85d 	bl	800b69c <_sbrk_r>
 800b5e2:	1c43      	adds	r3, r0, #1
 800b5e4:	d123      	bne.n	800b62e <_malloc_r+0x92>
 800b5e6:	230c      	movs	r3, #12
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	6033      	str	r3, [r6, #0]
 800b5ec:	f000 f86c 	bl	800b6c8 <__malloc_unlock>
 800b5f0:	e7e3      	b.n	800b5ba <_malloc_r+0x1e>
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	1b5b      	subs	r3, r3, r5
 800b5f6:	d417      	bmi.n	800b628 <_malloc_r+0x8c>
 800b5f8:	2b0b      	cmp	r3, #11
 800b5fa:	d903      	bls.n	800b604 <_malloc_r+0x68>
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	441c      	add	r4, r3
 800b600:	6025      	str	r5, [r4, #0]
 800b602:	e004      	b.n	800b60e <_malloc_r+0x72>
 800b604:	6863      	ldr	r3, [r4, #4]
 800b606:	42a2      	cmp	r2, r4
 800b608:	bf0c      	ite	eq
 800b60a:	600b      	streq	r3, [r1, #0]
 800b60c:	6053      	strne	r3, [r2, #4]
 800b60e:	4630      	mov	r0, r6
 800b610:	f000 f85a 	bl	800b6c8 <__malloc_unlock>
 800b614:	f104 000b 	add.w	r0, r4, #11
 800b618:	1d23      	adds	r3, r4, #4
 800b61a:	f020 0007 	bic.w	r0, r0, #7
 800b61e:	1ac2      	subs	r2, r0, r3
 800b620:	d0cc      	beq.n	800b5bc <_malloc_r+0x20>
 800b622:	1a1b      	subs	r3, r3, r0
 800b624:	50a3      	str	r3, [r4, r2]
 800b626:	e7c9      	b.n	800b5bc <_malloc_r+0x20>
 800b628:	4622      	mov	r2, r4
 800b62a:	6864      	ldr	r4, [r4, #4]
 800b62c:	e7cc      	b.n	800b5c8 <_malloc_r+0x2c>
 800b62e:	1cc4      	adds	r4, r0, #3
 800b630:	f024 0403 	bic.w	r4, r4, #3
 800b634:	42a0      	cmp	r0, r4
 800b636:	d0e3      	beq.n	800b600 <_malloc_r+0x64>
 800b638:	1a21      	subs	r1, r4, r0
 800b63a:	4630      	mov	r0, r6
 800b63c:	f000 f82e 	bl	800b69c <_sbrk_r>
 800b640:	3001      	adds	r0, #1
 800b642:	d1dd      	bne.n	800b600 <_malloc_r+0x64>
 800b644:	e7cf      	b.n	800b5e6 <_malloc_r+0x4a>
 800b646:	bf00      	nop
 800b648:	20002afc 	.word	0x20002afc
 800b64c:	20002b00 	.word	0x20002b00

0800b650 <_realloc_r>:
 800b650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b652:	4607      	mov	r7, r0
 800b654:	4614      	mov	r4, r2
 800b656:	460e      	mov	r6, r1
 800b658:	b921      	cbnz	r1, 800b664 <_realloc_r+0x14>
 800b65a:	4611      	mov	r1, r2
 800b65c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b660:	f7ff bf9c 	b.w	800b59c <_malloc_r>
 800b664:	b922      	cbnz	r2, 800b670 <_realloc_r+0x20>
 800b666:	f7ff ff4d 	bl	800b504 <_free_r>
 800b66a:	4625      	mov	r5, r4
 800b66c:	4628      	mov	r0, r5
 800b66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b670:	f000 f830 	bl	800b6d4 <_malloc_usable_size_r>
 800b674:	42a0      	cmp	r0, r4
 800b676:	d20f      	bcs.n	800b698 <_realloc_r+0x48>
 800b678:	4621      	mov	r1, r4
 800b67a:	4638      	mov	r0, r7
 800b67c:	f7ff ff8e 	bl	800b59c <_malloc_r>
 800b680:	4605      	mov	r5, r0
 800b682:	2800      	cmp	r0, #0
 800b684:	d0f2      	beq.n	800b66c <_realloc_r+0x1c>
 800b686:	4631      	mov	r1, r6
 800b688:	4622      	mov	r2, r4
 800b68a:	f7ff faf5 	bl	800ac78 <memcpy>
 800b68e:	4631      	mov	r1, r6
 800b690:	4638      	mov	r0, r7
 800b692:	f7ff ff37 	bl	800b504 <_free_r>
 800b696:	e7e9      	b.n	800b66c <_realloc_r+0x1c>
 800b698:	4635      	mov	r5, r6
 800b69a:	e7e7      	b.n	800b66c <_realloc_r+0x1c>

0800b69c <_sbrk_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	2300      	movs	r3, #0
 800b6a0:	4d05      	ldr	r5, [pc, #20]	; (800b6b8 <_sbrk_r+0x1c>)
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	602b      	str	r3, [r5, #0]
 800b6a8:	f7fa f94c 	bl	8005944 <_sbrk>
 800b6ac:	1c43      	adds	r3, r0, #1
 800b6ae:	d102      	bne.n	800b6b6 <_sbrk_r+0x1a>
 800b6b0:	682b      	ldr	r3, [r5, #0]
 800b6b2:	b103      	cbz	r3, 800b6b6 <_sbrk_r+0x1a>
 800b6b4:	6023      	str	r3, [r4, #0]
 800b6b6:	bd38      	pop	{r3, r4, r5, pc}
 800b6b8:	20002e1c 	.word	0x20002e1c

0800b6bc <__malloc_lock>:
 800b6bc:	4801      	ldr	r0, [pc, #4]	; (800b6c4 <__malloc_lock+0x8>)
 800b6be:	f000 b811 	b.w	800b6e4 <__retarget_lock_acquire_recursive>
 800b6c2:	bf00      	nop
 800b6c4:	20002e24 	.word	0x20002e24

0800b6c8 <__malloc_unlock>:
 800b6c8:	4801      	ldr	r0, [pc, #4]	; (800b6d0 <__malloc_unlock+0x8>)
 800b6ca:	f000 b80c 	b.w	800b6e6 <__retarget_lock_release_recursive>
 800b6ce:	bf00      	nop
 800b6d0:	20002e24 	.word	0x20002e24

0800b6d4 <_malloc_usable_size_r>:
 800b6d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6d8:	1f18      	subs	r0, r3, #4
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	bfbc      	itt	lt
 800b6de:	580b      	ldrlt	r3, [r1, r0]
 800b6e0:	18c0      	addlt	r0, r0, r3
 800b6e2:	4770      	bx	lr

0800b6e4 <__retarget_lock_acquire_recursive>:
 800b6e4:	4770      	bx	lr

0800b6e6 <__retarget_lock_release_recursive>:
 800b6e6:	4770      	bx	lr

0800b6e8 <cosf>:
 800b6e8:	b507      	push	{r0, r1, r2, lr}
 800b6ea:	4a18      	ldr	r2, [pc, #96]	; (800b74c <cosf+0x64>)
 800b6ec:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	4601      	mov	r1, r0
 800b6f4:	dc03      	bgt.n	800b6fe <cosf+0x16>
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	f000 fd6a 	bl	800c1d0 <__kernel_cosf>
 800b6fc:	e004      	b.n	800b708 <cosf+0x20>
 800b6fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b702:	db04      	blt.n	800b70e <cosf+0x26>
 800b704:	f7f5 fa16 	bl	8000b34 <__aeabi_fsub>
 800b708:	b003      	add	sp, #12
 800b70a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b70e:	4669      	mov	r1, sp
 800b710:	f000 fc00 	bl	800bf14 <__ieee754_rem_pio2f>
 800b714:	f000 0203 	and.w	r2, r0, #3
 800b718:	2a01      	cmp	r2, #1
 800b71a:	d005      	beq.n	800b728 <cosf+0x40>
 800b71c:	2a02      	cmp	r2, #2
 800b71e:	d00a      	beq.n	800b736 <cosf+0x4e>
 800b720:	b972      	cbnz	r2, 800b740 <cosf+0x58>
 800b722:	9901      	ldr	r1, [sp, #4]
 800b724:	9800      	ldr	r0, [sp, #0]
 800b726:	e7e7      	b.n	800b6f8 <cosf+0x10>
 800b728:	9901      	ldr	r1, [sp, #4]
 800b72a:	9800      	ldr	r0, [sp, #0]
 800b72c:	f001 f886 	bl	800c83c <__kernel_sinf>
 800b730:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b734:	e7e8      	b.n	800b708 <cosf+0x20>
 800b736:	9901      	ldr	r1, [sp, #4]
 800b738:	9800      	ldr	r0, [sp, #0]
 800b73a:	f000 fd49 	bl	800c1d0 <__kernel_cosf>
 800b73e:	e7f7      	b.n	800b730 <cosf+0x48>
 800b740:	2201      	movs	r2, #1
 800b742:	9901      	ldr	r1, [sp, #4]
 800b744:	9800      	ldr	r0, [sp, #0]
 800b746:	f001 f879 	bl	800c83c <__kernel_sinf>
 800b74a:	e7dd      	b.n	800b708 <cosf+0x20>
 800b74c:	3f490fd8 	.word	0x3f490fd8

0800b750 <sinf>:
 800b750:	b507      	push	{r0, r1, r2, lr}
 800b752:	4a19      	ldr	r2, [pc, #100]	; (800b7b8 <sinf+0x68>)
 800b754:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b758:	4293      	cmp	r3, r2
 800b75a:	4601      	mov	r1, r0
 800b75c:	dc04      	bgt.n	800b768 <sinf+0x18>
 800b75e:	2200      	movs	r2, #0
 800b760:	2100      	movs	r1, #0
 800b762:	f001 f86b 	bl	800c83c <__kernel_sinf>
 800b766:	e004      	b.n	800b772 <sinf+0x22>
 800b768:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b76c:	db04      	blt.n	800b778 <sinf+0x28>
 800b76e:	f7f5 f9e1 	bl	8000b34 <__aeabi_fsub>
 800b772:	b003      	add	sp, #12
 800b774:	f85d fb04 	ldr.w	pc, [sp], #4
 800b778:	4669      	mov	r1, sp
 800b77a:	f000 fbcb 	bl	800bf14 <__ieee754_rem_pio2f>
 800b77e:	f000 0003 	and.w	r0, r0, #3
 800b782:	2801      	cmp	r0, #1
 800b784:	d006      	beq.n	800b794 <sinf+0x44>
 800b786:	2802      	cmp	r0, #2
 800b788:	d009      	beq.n	800b79e <sinf+0x4e>
 800b78a:	b980      	cbnz	r0, 800b7ae <sinf+0x5e>
 800b78c:	2201      	movs	r2, #1
 800b78e:	9901      	ldr	r1, [sp, #4]
 800b790:	9800      	ldr	r0, [sp, #0]
 800b792:	e7e6      	b.n	800b762 <sinf+0x12>
 800b794:	9901      	ldr	r1, [sp, #4]
 800b796:	9800      	ldr	r0, [sp, #0]
 800b798:	f000 fd1a 	bl	800c1d0 <__kernel_cosf>
 800b79c:	e7e9      	b.n	800b772 <sinf+0x22>
 800b79e:	2201      	movs	r2, #1
 800b7a0:	9901      	ldr	r1, [sp, #4]
 800b7a2:	9800      	ldr	r0, [sp, #0]
 800b7a4:	f001 f84a 	bl	800c83c <__kernel_sinf>
 800b7a8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b7ac:	e7e1      	b.n	800b772 <sinf+0x22>
 800b7ae:	9901      	ldr	r1, [sp, #4]
 800b7b0:	9800      	ldr	r0, [sp, #0]
 800b7b2:	f000 fd0d 	bl	800c1d0 <__kernel_cosf>
 800b7b6:	e7f7      	b.n	800b7a8 <sinf+0x58>
 800b7b8:	3f490fd8 	.word	0x3f490fd8

0800b7bc <asin>:
 800b7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7be:	4604      	mov	r4, r0
 800b7c0:	460d      	mov	r5, r1
 800b7c2:	f000 f82d 	bl	800b820 <__ieee754_asin>
 800b7c6:	4b11      	ldr	r3, [pc, #68]	; (800b80c <asin+0x50>)
 800b7c8:	4606      	mov	r6, r0
 800b7ca:	f993 3000 	ldrsb.w	r3, [r3]
 800b7ce:	460f      	mov	r7, r1
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	d018      	beq.n	800b806 <asin+0x4a>
 800b7d4:	4622      	mov	r2, r4
 800b7d6:	462b      	mov	r3, r5
 800b7d8:	4620      	mov	r0, r4
 800b7da:	4629      	mov	r1, r5
 800b7dc:	f7f5 f920 	bl	8000a20 <__aeabi_dcmpun>
 800b7e0:	b988      	cbnz	r0, 800b806 <asin+0x4a>
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	4629      	mov	r1, r5
 800b7e6:	f001 fa29 	bl	800cc3c <fabs>
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	4b08      	ldr	r3, [pc, #32]	; (800b810 <asin+0x54>)
 800b7ee:	f7f5 f90d 	bl	8000a0c <__aeabi_dcmpgt>
 800b7f2:	b140      	cbz	r0, 800b806 <asin+0x4a>
 800b7f4:	f7ff fa08 	bl	800ac08 <__errno>
 800b7f8:	2321      	movs	r3, #33	; 0x21
 800b7fa:	6003      	str	r3, [r0, #0]
 800b7fc:	4805      	ldr	r0, [pc, #20]	; (800b814 <asin+0x58>)
 800b7fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b802:	f001 ba1f 	b.w	800cc44 <nan>
 800b806:	4630      	mov	r0, r6
 800b808:	4639      	mov	r1, r7
 800b80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b80c:	200000bc 	.word	0x200000bc
 800b810:	3ff00000 	.word	0x3ff00000
 800b814:	0800de70 	.word	0x0800de70

0800b818 <atan2>:
 800b818:	f000 b9fe 	b.w	800bc18 <__ieee754_atan2>
 800b81c:	0000      	movs	r0, r0
	...

0800b820 <__ieee754_asin>:
 800b820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b824:	4bc4      	ldr	r3, [pc, #784]	; (800bb38 <__ieee754_asin+0x318>)
 800b826:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b82a:	b087      	sub	sp, #28
 800b82c:	429e      	cmp	r6, r3
 800b82e:	4602      	mov	r2, r0
 800b830:	4604      	mov	r4, r0
 800b832:	460d      	mov	r5, r1
 800b834:	9105      	str	r1, [sp, #20]
 800b836:	dd29      	ble.n	800b88c <__ieee754_asin+0x6c>
 800b838:	4603      	mov	r3, r0
 800b83a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 800b83e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800b842:	4333      	orrs	r3, r6
 800b844:	d114      	bne.n	800b870 <__ieee754_asin+0x50>
 800b846:	a3a2      	add	r3, pc, #648	; (adr r3, 800bad0 <__ieee754_asin+0x2b0>)
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	f7f4 fe4e 	bl	80004ec <__aeabi_dmul>
 800b850:	a3a1      	add	r3, pc, #644	; (adr r3, 800bad8 <__ieee754_asin+0x2b8>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	4606      	mov	r6, r0
 800b858:	460f      	mov	r7, r1
 800b85a:	4620      	mov	r0, r4
 800b85c:	4629      	mov	r1, r5
 800b85e:	f7f4 fe45 	bl	80004ec <__aeabi_dmul>
 800b862:	4602      	mov	r2, r0
 800b864:	460b      	mov	r3, r1
 800b866:	4630      	mov	r0, r6
 800b868:	4639      	mov	r1, r7
 800b86a:	f7f4 fc89 	bl	8000180 <__adddf3>
 800b86e:	e006      	b.n	800b87e <__ieee754_asin+0x5e>
 800b870:	460b      	mov	r3, r1
 800b872:	f7f4 fc83 	bl	800017c <__aeabi_dsub>
 800b876:	4602      	mov	r2, r0
 800b878:	460b      	mov	r3, r1
 800b87a:	f7f4 ff61 	bl	8000740 <__aeabi_ddiv>
 800b87e:	4604      	mov	r4, r0
 800b880:	460d      	mov	r5, r1
 800b882:	4620      	mov	r0, r4
 800b884:	4629      	mov	r1, r5
 800b886:	b007      	add	sp, #28
 800b888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b88c:	4bab      	ldr	r3, [pc, #684]	; (800bb3c <__ieee754_asin+0x31c>)
 800b88e:	429e      	cmp	r6, r3
 800b890:	dc0e      	bgt.n	800b8b0 <__ieee754_asin+0x90>
 800b892:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b896:	f280 80ab 	bge.w	800b9f0 <__ieee754_asin+0x1d0>
 800b89a:	a391      	add	r3, pc, #580	; (adr r3, 800bae0 <__ieee754_asin+0x2c0>)
 800b89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a0:	f7f4 fc6e 	bl	8000180 <__adddf3>
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	4ba6      	ldr	r3, [pc, #664]	; (800bb40 <__ieee754_asin+0x320>)
 800b8a8:	f7f5 f8b0 	bl	8000a0c <__aeabi_dcmpgt>
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d1e8      	bne.n	800b882 <__ieee754_asin+0x62>
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	f001 f9c2 	bl	800cc3c <fabs>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	2000      	movs	r0, #0
 800b8be:	49a0      	ldr	r1, [pc, #640]	; (800bb40 <__ieee754_asin+0x320>)
 800b8c0:	f7f4 fc5c 	bl	800017c <__aeabi_dsub>
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	4b9f      	ldr	r3, [pc, #636]	; (800bb44 <__ieee754_asin+0x324>)
 800b8c8:	f7f4 fe10 	bl	80004ec <__aeabi_dmul>
 800b8cc:	a386      	add	r3, pc, #536	; (adr r3, 800bae8 <__ieee754_asin+0x2c8>)
 800b8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	460d      	mov	r5, r1
 800b8d6:	f7f4 fe09 	bl	80004ec <__aeabi_dmul>
 800b8da:	a385      	add	r3, pc, #532	; (adr r3, 800baf0 <__ieee754_asin+0x2d0>)
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	f7f4 fc4e 	bl	8000180 <__adddf3>
 800b8e4:	4622      	mov	r2, r4
 800b8e6:	462b      	mov	r3, r5
 800b8e8:	f7f4 fe00 	bl	80004ec <__aeabi_dmul>
 800b8ec:	a382      	add	r3, pc, #520	; (adr r3, 800baf8 <__ieee754_asin+0x2d8>)
 800b8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f2:	f7f4 fc43 	bl	800017c <__aeabi_dsub>
 800b8f6:	4622      	mov	r2, r4
 800b8f8:	462b      	mov	r3, r5
 800b8fa:	f7f4 fdf7 	bl	80004ec <__aeabi_dmul>
 800b8fe:	a380      	add	r3, pc, #512	; (adr r3, 800bb00 <__ieee754_asin+0x2e0>)
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	f7f4 fc3c 	bl	8000180 <__adddf3>
 800b908:	4622      	mov	r2, r4
 800b90a:	462b      	mov	r3, r5
 800b90c:	f7f4 fdee 	bl	80004ec <__aeabi_dmul>
 800b910:	a37d      	add	r3, pc, #500	; (adr r3, 800bb08 <__ieee754_asin+0x2e8>)
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	f7f4 fc31 	bl	800017c <__aeabi_dsub>
 800b91a:	4622      	mov	r2, r4
 800b91c:	462b      	mov	r3, r5
 800b91e:	f7f4 fde5 	bl	80004ec <__aeabi_dmul>
 800b922:	a37b      	add	r3, pc, #492	; (adr r3, 800bb10 <__ieee754_asin+0x2f0>)
 800b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b928:	f7f4 fc2a 	bl	8000180 <__adddf3>
 800b92c:	4622      	mov	r2, r4
 800b92e:	462b      	mov	r3, r5
 800b930:	f7f4 fddc 	bl	80004ec <__aeabi_dmul>
 800b934:	a378      	add	r3, pc, #480	; (adr r3, 800bb18 <__ieee754_asin+0x2f8>)
 800b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93a:	e9cd 0100 	strd	r0, r1, [sp]
 800b93e:	4620      	mov	r0, r4
 800b940:	4629      	mov	r1, r5
 800b942:	f7f4 fdd3 	bl	80004ec <__aeabi_dmul>
 800b946:	a376      	add	r3, pc, #472	; (adr r3, 800bb20 <__ieee754_asin+0x300>)
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	f7f4 fc16 	bl	800017c <__aeabi_dsub>
 800b950:	4622      	mov	r2, r4
 800b952:	462b      	mov	r3, r5
 800b954:	f7f4 fdca 	bl	80004ec <__aeabi_dmul>
 800b958:	a373      	add	r3, pc, #460	; (adr r3, 800bb28 <__ieee754_asin+0x308>)
 800b95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95e:	f7f4 fc0f 	bl	8000180 <__adddf3>
 800b962:	4622      	mov	r2, r4
 800b964:	462b      	mov	r3, r5
 800b966:	f7f4 fdc1 	bl	80004ec <__aeabi_dmul>
 800b96a:	a371      	add	r3, pc, #452	; (adr r3, 800bb30 <__ieee754_asin+0x310>)
 800b96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b970:	f7f4 fc04 	bl	800017c <__aeabi_dsub>
 800b974:	4622      	mov	r2, r4
 800b976:	462b      	mov	r3, r5
 800b978:	f7f4 fdb8 	bl	80004ec <__aeabi_dmul>
 800b97c:	4b70      	ldr	r3, [pc, #448]	; (800bb40 <__ieee754_asin+0x320>)
 800b97e:	2200      	movs	r2, #0
 800b980:	f7f4 fbfe 	bl	8000180 <__adddf3>
 800b984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b988:	4620      	mov	r0, r4
 800b98a:	4629      	mov	r1, r5
 800b98c:	f000 fa16 	bl	800bdbc <__ieee754_sqrt>
 800b990:	4b6d      	ldr	r3, [pc, #436]	; (800bb48 <__ieee754_asin+0x328>)
 800b992:	4682      	mov	sl, r0
 800b994:	429e      	cmp	r6, r3
 800b996:	468b      	mov	fp, r1
 800b998:	f340 80d8 	ble.w	800bb4c <__ieee754_asin+0x32c>
 800b99c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9a4:	f7f4 fecc 	bl	8000740 <__aeabi_ddiv>
 800b9a8:	4652      	mov	r2, sl
 800b9aa:	465b      	mov	r3, fp
 800b9ac:	f7f4 fd9e 	bl	80004ec <__aeabi_dmul>
 800b9b0:	4652      	mov	r2, sl
 800b9b2:	465b      	mov	r3, fp
 800b9b4:	f7f4 fbe4 	bl	8000180 <__adddf3>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	f7f4 fbe0 	bl	8000180 <__adddf3>
 800b9c0:	a345      	add	r3, pc, #276	; (adr r3, 800bad8 <__ieee754_asin+0x2b8>)
 800b9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c6:	f7f4 fbd9 	bl	800017c <__aeabi_dsub>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	a140      	add	r1, pc, #256	; (adr r1, 800bad0 <__ieee754_asin+0x2b0>)
 800b9d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9d4:	f7f4 fbd2 	bl	800017c <__aeabi_dsub>
 800b9d8:	9b05      	ldr	r3, [sp, #20]
 800b9da:	4604      	mov	r4, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	bfdc      	itt	le
 800b9e0:	4602      	movle	r2, r0
 800b9e2:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800b9e6:	460d      	mov	r5, r1
 800b9e8:	bfdc      	itt	le
 800b9ea:	4614      	movle	r4, r2
 800b9ec:	461d      	movle	r5, r3
 800b9ee:	e748      	b.n	800b882 <__ieee754_asin+0x62>
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	f7f4 fd7b 	bl	80004ec <__aeabi_dmul>
 800b9f6:	a33c      	add	r3, pc, #240	; (adr r3, 800bae8 <__ieee754_asin+0x2c8>)
 800b9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fc:	4606      	mov	r6, r0
 800b9fe:	460f      	mov	r7, r1
 800ba00:	f7f4 fd74 	bl	80004ec <__aeabi_dmul>
 800ba04:	a33a      	add	r3, pc, #232	; (adr r3, 800baf0 <__ieee754_asin+0x2d0>)
 800ba06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0a:	f7f4 fbb9 	bl	8000180 <__adddf3>
 800ba0e:	4632      	mov	r2, r6
 800ba10:	463b      	mov	r3, r7
 800ba12:	f7f4 fd6b 	bl	80004ec <__aeabi_dmul>
 800ba16:	a338      	add	r3, pc, #224	; (adr r3, 800baf8 <__ieee754_asin+0x2d8>)
 800ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1c:	f7f4 fbae 	bl	800017c <__aeabi_dsub>
 800ba20:	4632      	mov	r2, r6
 800ba22:	463b      	mov	r3, r7
 800ba24:	f7f4 fd62 	bl	80004ec <__aeabi_dmul>
 800ba28:	a335      	add	r3, pc, #212	; (adr r3, 800bb00 <__ieee754_asin+0x2e0>)
 800ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2e:	f7f4 fba7 	bl	8000180 <__adddf3>
 800ba32:	4632      	mov	r2, r6
 800ba34:	463b      	mov	r3, r7
 800ba36:	f7f4 fd59 	bl	80004ec <__aeabi_dmul>
 800ba3a:	a333      	add	r3, pc, #204	; (adr r3, 800bb08 <__ieee754_asin+0x2e8>)
 800ba3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba40:	f7f4 fb9c 	bl	800017c <__aeabi_dsub>
 800ba44:	4632      	mov	r2, r6
 800ba46:	463b      	mov	r3, r7
 800ba48:	f7f4 fd50 	bl	80004ec <__aeabi_dmul>
 800ba4c:	a330      	add	r3, pc, #192	; (adr r3, 800bb10 <__ieee754_asin+0x2f0>)
 800ba4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba52:	f7f4 fb95 	bl	8000180 <__adddf3>
 800ba56:	4632      	mov	r2, r6
 800ba58:	463b      	mov	r3, r7
 800ba5a:	f7f4 fd47 	bl	80004ec <__aeabi_dmul>
 800ba5e:	a32e      	add	r3, pc, #184	; (adr r3, 800bb18 <__ieee754_asin+0x2f8>)
 800ba60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba64:	4680      	mov	r8, r0
 800ba66:	4689      	mov	r9, r1
 800ba68:	4630      	mov	r0, r6
 800ba6a:	4639      	mov	r1, r7
 800ba6c:	f7f4 fd3e 	bl	80004ec <__aeabi_dmul>
 800ba70:	a32b      	add	r3, pc, #172	; (adr r3, 800bb20 <__ieee754_asin+0x300>)
 800ba72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba76:	f7f4 fb81 	bl	800017c <__aeabi_dsub>
 800ba7a:	4632      	mov	r2, r6
 800ba7c:	463b      	mov	r3, r7
 800ba7e:	f7f4 fd35 	bl	80004ec <__aeabi_dmul>
 800ba82:	a329      	add	r3, pc, #164	; (adr r3, 800bb28 <__ieee754_asin+0x308>)
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	f7f4 fb7a 	bl	8000180 <__adddf3>
 800ba8c:	4632      	mov	r2, r6
 800ba8e:	463b      	mov	r3, r7
 800ba90:	f7f4 fd2c 	bl	80004ec <__aeabi_dmul>
 800ba94:	a326      	add	r3, pc, #152	; (adr r3, 800bb30 <__ieee754_asin+0x310>)
 800ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9a:	f7f4 fb6f 	bl	800017c <__aeabi_dsub>
 800ba9e:	4632      	mov	r2, r6
 800baa0:	463b      	mov	r3, r7
 800baa2:	f7f4 fd23 	bl	80004ec <__aeabi_dmul>
 800baa6:	2200      	movs	r2, #0
 800baa8:	4b25      	ldr	r3, [pc, #148]	; (800bb40 <__ieee754_asin+0x320>)
 800baaa:	f7f4 fb69 	bl	8000180 <__adddf3>
 800baae:	4602      	mov	r2, r0
 800bab0:	460b      	mov	r3, r1
 800bab2:	4640      	mov	r0, r8
 800bab4:	4649      	mov	r1, r9
 800bab6:	f7f4 fe43 	bl	8000740 <__aeabi_ddiv>
 800baba:	4622      	mov	r2, r4
 800babc:	462b      	mov	r3, r5
 800babe:	f7f4 fd15 	bl	80004ec <__aeabi_dmul>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	4620      	mov	r0, r4
 800bac8:	4629      	mov	r1, r5
 800baca:	e6ce      	b.n	800b86a <__ieee754_asin+0x4a>
 800bacc:	f3af 8000 	nop.w
 800bad0:	54442d18 	.word	0x54442d18
 800bad4:	3ff921fb 	.word	0x3ff921fb
 800bad8:	33145c07 	.word	0x33145c07
 800badc:	3c91a626 	.word	0x3c91a626
 800bae0:	8800759c 	.word	0x8800759c
 800bae4:	7e37e43c 	.word	0x7e37e43c
 800bae8:	0dfdf709 	.word	0x0dfdf709
 800baec:	3f023de1 	.word	0x3f023de1
 800baf0:	7501b288 	.word	0x7501b288
 800baf4:	3f49efe0 	.word	0x3f49efe0
 800baf8:	b5688f3b 	.word	0xb5688f3b
 800bafc:	3fa48228 	.word	0x3fa48228
 800bb00:	0e884455 	.word	0x0e884455
 800bb04:	3fc9c155 	.word	0x3fc9c155
 800bb08:	03eb6f7d 	.word	0x03eb6f7d
 800bb0c:	3fd4d612 	.word	0x3fd4d612
 800bb10:	55555555 	.word	0x55555555
 800bb14:	3fc55555 	.word	0x3fc55555
 800bb18:	b12e9282 	.word	0xb12e9282
 800bb1c:	3fb3b8c5 	.word	0x3fb3b8c5
 800bb20:	1b8d0159 	.word	0x1b8d0159
 800bb24:	3fe6066c 	.word	0x3fe6066c
 800bb28:	9c598ac8 	.word	0x9c598ac8
 800bb2c:	40002ae5 	.word	0x40002ae5
 800bb30:	1c8a2d4b 	.word	0x1c8a2d4b
 800bb34:	40033a27 	.word	0x40033a27
 800bb38:	3fefffff 	.word	0x3fefffff
 800bb3c:	3fdfffff 	.word	0x3fdfffff
 800bb40:	3ff00000 	.word	0x3ff00000
 800bb44:	3fe00000 	.word	0x3fe00000
 800bb48:	3fef3332 	.word	0x3fef3332
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	f7f4 fb16 	bl	8000180 <__adddf3>
 800bb54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb58:	4606      	mov	r6, r0
 800bb5a:	460f      	mov	r7, r1
 800bb5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb60:	f7f4 fdee 	bl	8000740 <__aeabi_ddiv>
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	4630      	mov	r0, r6
 800bb6a:	4639      	mov	r1, r7
 800bb6c:	f7f4 fcbe 	bl	80004ec <__aeabi_dmul>
 800bb70:	f04f 0800 	mov.w	r8, #0
 800bb74:	4606      	mov	r6, r0
 800bb76:	460f      	mov	r7, r1
 800bb78:	4642      	mov	r2, r8
 800bb7a:	465b      	mov	r3, fp
 800bb7c:	4640      	mov	r0, r8
 800bb7e:	4659      	mov	r1, fp
 800bb80:	f7f4 fcb4 	bl	80004ec <__aeabi_dmul>
 800bb84:	4602      	mov	r2, r0
 800bb86:	460b      	mov	r3, r1
 800bb88:	4620      	mov	r0, r4
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	f7f4 faf6 	bl	800017c <__aeabi_dsub>
 800bb90:	4642      	mov	r2, r8
 800bb92:	4604      	mov	r4, r0
 800bb94:	460d      	mov	r5, r1
 800bb96:	465b      	mov	r3, fp
 800bb98:	4650      	mov	r0, sl
 800bb9a:	4659      	mov	r1, fp
 800bb9c:	f7f4 faf0 	bl	8000180 <__adddf3>
 800bba0:	4602      	mov	r2, r0
 800bba2:	460b      	mov	r3, r1
 800bba4:	4620      	mov	r0, r4
 800bba6:	4629      	mov	r1, r5
 800bba8:	f7f4 fdca 	bl	8000740 <__aeabi_ddiv>
 800bbac:	4602      	mov	r2, r0
 800bbae:	460b      	mov	r3, r1
 800bbb0:	f7f4 fae6 	bl	8000180 <__adddf3>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	a113      	add	r1, pc, #76	; (adr r1, 800bc08 <__ieee754_asin+0x3e8>)
 800bbba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbbe:	f7f4 fadd 	bl	800017c <__aeabi_dsub>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	4639      	mov	r1, r7
 800bbca:	f7f4 fad7 	bl	800017c <__aeabi_dsub>
 800bbce:	4642      	mov	r2, r8
 800bbd0:	4604      	mov	r4, r0
 800bbd2:	460d      	mov	r5, r1
 800bbd4:	465b      	mov	r3, fp
 800bbd6:	4640      	mov	r0, r8
 800bbd8:	4659      	mov	r1, fp
 800bbda:	f7f4 fad1 	bl	8000180 <__adddf3>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	a10b      	add	r1, pc, #44	; (adr r1, 800bc10 <__ieee754_asin+0x3f0>)
 800bbe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbe8:	f7f4 fac8 	bl	800017c <__aeabi_dsub>
 800bbec:	4602      	mov	r2, r0
 800bbee:	460b      	mov	r3, r1
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	4629      	mov	r1, r5
 800bbf4:	f7f4 fac2 	bl	800017c <__aeabi_dsub>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	a104      	add	r1, pc, #16	; (adr r1, 800bc10 <__ieee754_asin+0x3f0>)
 800bbfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc02:	e6e7      	b.n	800b9d4 <__ieee754_asin+0x1b4>
 800bc04:	f3af 8000 	nop.w
 800bc08:	33145c07 	.word	0x33145c07
 800bc0c:	3c91a626 	.word	0x3c91a626
 800bc10:	54442d18 	.word	0x54442d18
 800bc14:	3fe921fb 	.word	0x3fe921fb

0800bc18 <__ieee754_atan2>:
 800bc18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1c:	4692      	mov	sl, r2
 800bc1e:	4699      	mov	r9, r3
 800bc20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bc24:	461f      	mov	r7, r3
 800bc26:	f1ca 0300 	rsb	r3, sl, #0
 800bc2a:	f8df e18c 	ldr.w	lr, [pc, #396]	; 800bdb8 <__ieee754_atan2+0x1a0>
 800bc2e:	ea43 030a 	orr.w	r3, r3, sl
 800bc32:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bc36:	4573      	cmp	r3, lr
 800bc38:	4604      	mov	r4, r0
 800bc3a:	460d      	mov	r5, r1
 800bc3c:	d808      	bhi.n	800bc50 <__ieee754_atan2+0x38>
 800bc3e:	4246      	negs	r6, r0
 800bc40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc44:	4306      	orrs	r6, r0
 800bc46:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800bc4a:	4576      	cmp	r6, lr
 800bc4c:	468c      	mov	ip, r1
 800bc4e:	d908      	bls.n	800bc62 <__ieee754_atan2+0x4a>
 800bc50:	4652      	mov	r2, sl
 800bc52:	464b      	mov	r3, r9
 800bc54:	4620      	mov	r0, r4
 800bc56:	4629      	mov	r1, r5
 800bc58:	f7f4 fa92 	bl	8000180 <__adddf3>
 800bc5c:	4604      	mov	r4, r0
 800bc5e:	460d      	mov	r5, r1
 800bc60:	e019      	b.n	800bc96 <__ieee754_atan2+0x7e>
 800bc62:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800bc66:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800bc6a:	ea56 060a 	orrs.w	r6, r6, sl
 800bc6e:	d103      	bne.n	800bc78 <__ieee754_atan2+0x60>
 800bc70:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc74:	f000 be58 	b.w	800c928 <atan>
 800bc78:	17be      	asrs	r6, r7, #30
 800bc7a:	f006 0602 	and.w	r6, r6, #2
 800bc7e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800bc82:	ea53 0100 	orrs.w	r1, r3, r0
 800bc86:	d10a      	bne.n	800bc9e <__ieee754_atan2+0x86>
 800bc88:	2e02      	cmp	r6, #2
 800bc8a:	d067      	beq.n	800bd5c <__ieee754_atan2+0x144>
 800bc8c:	2e03      	cmp	r6, #3
 800bc8e:	d102      	bne.n	800bc96 <__ieee754_atan2+0x7e>
 800bc90:	a53b      	add	r5, pc, #236	; (adr r5, 800bd80 <__ieee754_atan2+0x168>)
 800bc92:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc96:	4620      	mov	r0, r4
 800bc98:	4629      	mov	r1, r5
 800bc9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9e:	ea52 010a 	orrs.w	r1, r2, sl
 800bca2:	d106      	bne.n	800bcb2 <__ieee754_atan2+0x9a>
 800bca4:	f1bc 0f00 	cmp.w	ip, #0
 800bca8:	da63      	bge.n	800bd72 <__ieee754_atan2+0x15a>
 800bcaa:	a537      	add	r5, pc, #220	; (adr r5, 800bd88 <__ieee754_atan2+0x170>)
 800bcac:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bcb0:	e7f1      	b.n	800bc96 <__ieee754_atan2+0x7e>
 800bcb2:	4572      	cmp	r2, lr
 800bcb4:	d10f      	bne.n	800bcd6 <__ieee754_atan2+0xbe>
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	f106 36ff 	add.w	r6, r6, #4294967295
 800bcbc:	d107      	bne.n	800bcce <__ieee754_atan2+0xb6>
 800bcbe:	2e02      	cmp	r6, #2
 800bcc0:	d850      	bhi.n	800bd64 <__ieee754_atan2+0x14c>
 800bcc2:	4b3b      	ldr	r3, [pc, #236]	; (800bdb0 <__ieee754_atan2+0x198>)
 800bcc4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bcc8:	e9d6 4500 	ldrd	r4, r5, [r6]
 800bccc:	e7e3      	b.n	800bc96 <__ieee754_atan2+0x7e>
 800bcce:	2e02      	cmp	r6, #2
 800bcd0:	d84c      	bhi.n	800bd6c <__ieee754_atan2+0x154>
 800bcd2:	4b38      	ldr	r3, [pc, #224]	; (800bdb4 <__ieee754_atan2+0x19c>)
 800bcd4:	e7f6      	b.n	800bcc4 <__ieee754_atan2+0xac>
 800bcd6:	4573      	cmp	r3, lr
 800bcd8:	d0e4      	beq.n	800bca4 <__ieee754_atan2+0x8c>
 800bcda:	1a9b      	subs	r3, r3, r2
 800bcdc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bce0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bce4:	da20      	bge.n	800bd28 <__ieee754_atan2+0x110>
 800bce6:	2f00      	cmp	r7, #0
 800bce8:	da01      	bge.n	800bcee <__ieee754_atan2+0xd6>
 800bcea:	323c      	adds	r2, #60	; 0x3c
 800bcec:	db20      	blt.n	800bd30 <__ieee754_atan2+0x118>
 800bcee:	4652      	mov	r2, sl
 800bcf0:	464b      	mov	r3, r9
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	4629      	mov	r1, r5
 800bcf6:	f7f4 fd23 	bl	8000740 <__aeabi_ddiv>
 800bcfa:	f000 ff9f 	bl	800cc3c <fabs>
 800bcfe:	f000 fe13 	bl	800c928 <atan>
 800bd02:	4604      	mov	r4, r0
 800bd04:	460d      	mov	r5, r1
 800bd06:	2e01      	cmp	r6, #1
 800bd08:	d015      	beq.n	800bd36 <__ieee754_atan2+0x11e>
 800bd0a:	2e02      	cmp	r6, #2
 800bd0c:	d017      	beq.n	800bd3e <__ieee754_atan2+0x126>
 800bd0e:	2e00      	cmp	r6, #0
 800bd10:	d0c1      	beq.n	800bc96 <__ieee754_atan2+0x7e>
 800bd12:	a31f      	add	r3, pc, #124	; (adr r3, 800bd90 <__ieee754_atan2+0x178>)
 800bd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd18:	4620      	mov	r0, r4
 800bd1a:	4629      	mov	r1, r5
 800bd1c:	f7f4 fa2e 	bl	800017c <__aeabi_dsub>
 800bd20:	a31d      	add	r3, pc, #116	; (adr r3, 800bd98 <__ieee754_atan2+0x180>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	e016      	b.n	800bd56 <__ieee754_atan2+0x13e>
 800bd28:	a51d      	add	r5, pc, #116	; (adr r5, 800bda0 <__ieee754_atan2+0x188>)
 800bd2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd2e:	e7ea      	b.n	800bd06 <__ieee754_atan2+0xee>
 800bd30:	2400      	movs	r4, #0
 800bd32:	2500      	movs	r5, #0
 800bd34:	e7e7      	b.n	800bd06 <__ieee754_atan2+0xee>
 800bd36:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800bd3a:	461d      	mov	r5, r3
 800bd3c:	e7ab      	b.n	800bc96 <__ieee754_atan2+0x7e>
 800bd3e:	a314      	add	r3, pc, #80	; (adr r3, 800bd90 <__ieee754_atan2+0x178>)
 800bd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd44:	4620      	mov	r0, r4
 800bd46:	4629      	mov	r1, r5
 800bd48:	f7f4 fa18 	bl	800017c <__aeabi_dsub>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	460b      	mov	r3, r1
 800bd50:	a111      	add	r1, pc, #68	; (adr r1, 800bd98 <__ieee754_atan2+0x180>)
 800bd52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd56:	f7f4 fa11 	bl	800017c <__aeabi_dsub>
 800bd5a:	e77f      	b.n	800bc5c <__ieee754_atan2+0x44>
 800bd5c:	a50e      	add	r5, pc, #56	; (adr r5, 800bd98 <__ieee754_atan2+0x180>)
 800bd5e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd62:	e798      	b.n	800bc96 <__ieee754_atan2+0x7e>
 800bd64:	a510      	add	r5, pc, #64	; (adr r5, 800bda8 <__ieee754_atan2+0x190>)
 800bd66:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd6a:	e794      	b.n	800bc96 <__ieee754_atan2+0x7e>
 800bd6c:	2400      	movs	r4, #0
 800bd6e:	2500      	movs	r5, #0
 800bd70:	e791      	b.n	800bc96 <__ieee754_atan2+0x7e>
 800bd72:	a50b      	add	r5, pc, #44	; (adr r5, 800bda0 <__ieee754_atan2+0x188>)
 800bd74:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd78:	e78d      	b.n	800bc96 <__ieee754_atan2+0x7e>
 800bd7a:	bf00      	nop
 800bd7c:	f3af 8000 	nop.w
 800bd80:	54442d18 	.word	0x54442d18
 800bd84:	c00921fb 	.word	0xc00921fb
 800bd88:	54442d18 	.word	0x54442d18
 800bd8c:	bff921fb 	.word	0xbff921fb
 800bd90:	33145c07 	.word	0x33145c07
 800bd94:	3ca1a626 	.word	0x3ca1a626
 800bd98:	54442d18 	.word	0x54442d18
 800bd9c:	400921fb 	.word	0x400921fb
 800bda0:	54442d18 	.word	0x54442d18
 800bda4:	3ff921fb 	.word	0x3ff921fb
 800bda8:	54442d18 	.word	0x54442d18
 800bdac:	3fe921fb 	.word	0x3fe921fb
 800bdb0:	0800dea0 	.word	0x0800dea0
 800bdb4:	0800deb8 	.word	0x0800deb8
 800bdb8:	7ff00000 	.word	0x7ff00000

0800bdbc <__ieee754_sqrt>:
 800bdbc:	f8df c150 	ldr.w	ip, [pc, #336]	; 800bf10 <__ieee754_sqrt+0x154>
 800bdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc4:	ea3c 0c01 	bics.w	ip, ip, r1
 800bdc8:	460b      	mov	r3, r1
 800bdca:	4606      	mov	r6, r0
 800bdcc:	460d      	mov	r5, r1
 800bdce:	460a      	mov	r2, r1
 800bdd0:	4607      	mov	r7, r0
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	d10e      	bne.n	800bdf4 <__ieee754_sqrt+0x38>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	f7f4 fb88 	bl	80004ec <__aeabi_dmul>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	4630      	mov	r0, r6
 800bde2:	4629      	mov	r1, r5
 800bde4:	f7f4 f9cc 	bl	8000180 <__adddf3>
 800bde8:	4606      	mov	r6, r0
 800bdea:	460d      	mov	r5, r1
 800bdec:	4630      	mov	r0, r6
 800bdee:	4629      	mov	r1, r5
 800bdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf4:	2900      	cmp	r1, #0
 800bdf6:	dc0d      	bgt.n	800be14 <__ieee754_sqrt+0x58>
 800bdf8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800bdfc:	ea5c 0707 	orrs.w	r7, ip, r7
 800be00:	d0f4      	beq.n	800bdec <__ieee754_sqrt+0x30>
 800be02:	b139      	cbz	r1, 800be14 <__ieee754_sqrt+0x58>
 800be04:	4602      	mov	r2, r0
 800be06:	f7f4 f9b9 	bl	800017c <__aeabi_dsub>
 800be0a:	4602      	mov	r2, r0
 800be0c:	460b      	mov	r3, r1
 800be0e:	f7f4 fc97 	bl	8000740 <__aeabi_ddiv>
 800be12:	e7e9      	b.n	800bde8 <__ieee754_sqrt+0x2c>
 800be14:	1512      	asrs	r2, r2, #20
 800be16:	d074      	beq.n	800bf02 <__ieee754_sqrt+0x146>
 800be18:	2000      	movs	r0, #0
 800be1a:	07d5      	lsls	r5, r2, #31
 800be1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be20:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800be24:	bf5e      	ittt	pl
 800be26:	0fe3      	lsrpl	r3, r4, #31
 800be28:	0064      	lslpl	r4, r4, #1
 800be2a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800be2e:	0fe3      	lsrs	r3, r4, #31
 800be30:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800be34:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800be38:	2516      	movs	r5, #22
 800be3a:	4601      	mov	r1, r0
 800be3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800be40:	1076      	asrs	r6, r6, #1
 800be42:	0064      	lsls	r4, r4, #1
 800be44:	188f      	adds	r7, r1, r2
 800be46:	429f      	cmp	r7, r3
 800be48:	bfde      	ittt	le
 800be4a:	1bdb      	suble	r3, r3, r7
 800be4c:	18b9      	addle	r1, r7, r2
 800be4e:	1880      	addle	r0, r0, r2
 800be50:	005b      	lsls	r3, r3, #1
 800be52:	3d01      	subs	r5, #1
 800be54:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800be58:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800be5c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800be60:	d1f0      	bne.n	800be44 <__ieee754_sqrt+0x88>
 800be62:	462a      	mov	r2, r5
 800be64:	f04f 0e20 	mov.w	lr, #32
 800be68:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800be6c:	428b      	cmp	r3, r1
 800be6e:	eb07 0c05 	add.w	ip, r7, r5
 800be72:	dc02      	bgt.n	800be7a <__ieee754_sqrt+0xbe>
 800be74:	d113      	bne.n	800be9e <__ieee754_sqrt+0xe2>
 800be76:	45a4      	cmp	ip, r4
 800be78:	d811      	bhi.n	800be9e <__ieee754_sqrt+0xe2>
 800be7a:	f1bc 0f00 	cmp.w	ip, #0
 800be7e:	eb0c 0507 	add.w	r5, ip, r7
 800be82:	da43      	bge.n	800bf0c <__ieee754_sqrt+0x150>
 800be84:	2d00      	cmp	r5, #0
 800be86:	db41      	blt.n	800bf0c <__ieee754_sqrt+0x150>
 800be88:	f101 0801 	add.w	r8, r1, #1
 800be8c:	1a5b      	subs	r3, r3, r1
 800be8e:	4641      	mov	r1, r8
 800be90:	45a4      	cmp	ip, r4
 800be92:	bf88      	it	hi
 800be94:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800be98:	eba4 040c 	sub.w	r4, r4, ip
 800be9c:	443a      	add	r2, r7
 800be9e:	005b      	lsls	r3, r3, #1
 800bea0:	f1be 0e01 	subs.w	lr, lr, #1
 800bea4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800bea8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800beac:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800beb0:	d1dc      	bne.n	800be6c <__ieee754_sqrt+0xb0>
 800beb2:	4323      	orrs	r3, r4
 800beb4:	d006      	beq.n	800bec4 <__ieee754_sqrt+0x108>
 800beb6:	1c54      	adds	r4, r2, #1
 800beb8:	bf0b      	itete	eq
 800beba:	4672      	moveq	r2, lr
 800bebc:	3201      	addne	r2, #1
 800bebe:	3001      	addeq	r0, #1
 800bec0:	f022 0201 	bicne.w	r2, r2, #1
 800bec4:	1043      	asrs	r3, r0, #1
 800bec6:	07c1      	lsls	r1, r0, #31
 800bec8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800becc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bed0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bed4:	bf48      	it	mi
 800bed6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800beda:	4610      	mov	r0, r2
 800bedc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800bee0:	e782      	b.n	800bde8 <__ieee754_sqrt+0x2c>
 800bee2:	0ae3      	lsrs	r3, r4, #11
 800bee4:	3915      	subs	r1, #21
 800bee6:	0564      	lsls	r4, r4, #21
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d0fa      	beq.n	800bee2 <__ieee754_sqrt+0x126>
 800beec:	02de      	lsls	r6, r3, #11
 800beee:	d50a      	bpl.n	800bf06 <__ieee754_sqrt+0x14a>
 800bef0:	f1c2 0020 	rsb	r0, r2, #32
 800bef4:	fa24 f000 	lsr.w	r0, r4, r0
 800bef8:	1e55      	subs	r5, r2, #1
 800befa:	4094      	lsls	r4, r2
 800befc:	4303      	orrs	r3, r0
 800befe:	1b4a      	subs	r2, r1, r5
 800bf00:	e78a      	b.n	800be18 <__ieee754_sqrt+0x5c>
 800bf02:	4611      	mov	r1, r2
 800bf04:	e7f0      	b.n	800bee8 <__ieee754_sqrt+0x12c>
 800bf06:	005b      	lsls	r3, r3, #1
 800bf08:	3201      	adds	r2, #1
 800bf0a:	e7ef      	b.n	800beec <__ieee754_sqrt+0x130>
 800bf0c:	4688      	mov	r8, r1
 800bf0e:	e7bd      	b.n	800be8c <__ieee754_sqrt+0xd0>
 800bf10:	7ff00000 	.word	0x7ff00000

0800bf14 <__ieee754_rem_pio2f>:
 800bf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf18:	4aa0      	ldr	r2, [pc, #640]	; (800c19c <__ieee754_rem_pio2f+0x288>)
 800bf1a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800bf1e:	4296      	cmp	r6, r2
 800bf20:	460c      	mov	r4, r1
 800bf22:	4682      	mov	sl, r0
 800bf24:	b087      	sub	sp, #28
 800bf26:	dc04      	bgt.n	800bf32 <__ieee754_rem_pio2f+0x1e>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	6008      	str	r0, [r1, #0]
 800bf2c:	604b      	str	r3, [r1, #4]
 800bf2e:	2500      	movs	r5, #0
 800bf30:	e01a      	b.n	800bf68 <__ieee754_rem_pio2f+0x54>
 800bf32:	4a9b      	ldr	r2, [pc, #620]	; (800c1a0 <__ieee754_rem_pio2f+0x28c>)
 800bf34:	4296      	cmp	r6, r2
 800bf36:	dc4b      	bgt.n	800bfd0 <__ieee754_rem_pio2f+0xbc>
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	499a      	ldr	r1, [pc, #616]	; (800c1a4 <__ieee754_rem_pio2f+0x290>)
 800bf3c:	4f9a      	ldr	r7, [pc, #616]	; (800c1a8 <__ieee754_rem_pio2f+0x294>)
 800bf3e:	f026 060f 	bic.w	r6, r6, #15
 800bf42:	dd23      	ble.n	800bf8c <__ieee754_rem_pio2f+0x78>
 800bf44:	f7f4 fdf6 	bl	8000b34 <__aeabi_fsub>
 800bf48:	42be      	cmp	r6, r7
 800bf4a:	4605      	mov	r5, r0
 800bf4c:	d010      	beq.n	800bf70 <__ieee754_rem_pio2f+0x5c>
 800bf4e:	4997      	ldr	r1, [pc, #604]	; (800c1ac <__ieee754_rem_pio2f+0x298>)
 800bf50:	f7f4 fdf0 	bl	8000b34 <__aeabi_fsub>
 800bf54:	4601      	mov	r1, r0
 800bf56:	6020      	str	r0, [r4, #0]
 800bf58:	4628      	mov	r0, r5
 800bf5a:	f7f4 fdeb 	bl	8000b34 <__aeabi_fsub>
 800bf5e:	4993      	ldr	r1, [pc, #588]	; (800c1ac <__ieee754_rem_pio2f+0x298>)
 800bf60:	f7f4 fde8 	bl	8000b34 <__aeabi_fsub>
 800bf64:	2501      	movs	r5, #1
 800bf66:	6060      	str	r0, [r4, #4]
 800bf68:	4628      	mov	r0, r5
 800bf6a:	b007      	add	sp, #28
 800bf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf70:	498f      	ldr	r1, [pc, #572]	; (800c1b0 <__ieee754_rem_pio2f+0x29c>)
 800bf72:	f7f4 fddf 	bl	8000b34 <__aeabi_fsub>
 800bf76:	498f      	ldr	r1, [pc, #572]	; (800c1b4 <__ieee754_rem_pio2f+0x2a0>)
 800bf78:	4605      	mov	r5, r0
 800bf7a:	f7f4 fddb 	bl	8000b34 <__aeabi_fsub>
 800bf7e:	4601      	mov	r1, r0
 800bf80:	6020      	str	r0, [r4, #0]
 800bf82:	4628      	mov	r0, r5
 800bf84:	f7f4 fdd6 	bl	8000b34 <__aeabi_fsub>
 800bf88:	498a      	ldr	r1, [pc, #552]	; (800c1b4 <__ieee754_rem_pio2f+0x2a0>)
 800bf8a:	e7e9      	b.n	800bf60 <__ieee754_rem_pio2f+0x4c>
 800bf8c:	f7f4 fdd4 	bl	8000b38 <__addsf3>
 800bf90:	42be      	cmp	r6, r7
 800bf92:	4605      	mov	r5, r0
 800bf94:	d00e      	beq.n	800bfb4 <__ieee754_rem_pio2f+0xa0>
 800bf96:	4985      	ldr	r1, [pc, #532]	; (800c1ac <__ieee754_rem_pio2f+0x298>)
 800bf98:	f7f4 fdce 	bl	8000b38 <__addsf3>
 800bf9c:	4601      	mov	r1, r0
 800bf9e:	6020      	str	r0, [r4, #0]
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	f7f4 fdc7 	bl	8000b34 <__aeabi_fsub>
 800bfa6:	4981      	ldr	r1, [pc, #516]	; (800c1ac <__ieee754_rem_pio2f+0x298>)
 800bfa8:	f7f4 fdc6 	bl	8000b38 <__addsf3>
 800bfac:	f04f 35ff 	mov.w	r5, #4294967295
 800bfb0:	6060      	str	r0, [r4, #4]
 800bfb2:	e7d9      	b.n	800bf68 <__ieee754_rem_pio2f+0x54>
 800bfb4:	497e      	ldr	r1, [pc, #504]	; (800c1b0 <__ieee754_rem_pio2f+0x29c>)
 800bfb6:	f7f4 fdbf 	bl	8000b38 <__addsf3>
 800bfba:	497e      	ldr	r1, [pc, #504]	; (800c1b4 <__ieee754_rem_pio2f+0x2a0>)
 800bfbc:	4605      	mov	r5, r0
 800bfbe:	f7f4 fdbb 	bl	8000b38 <__addsf3>
 800bfc2:	4601      	mov	r1, r0
 800bfc4:	6020      	str	r0, [r4, #0]
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	f7f4 fdb4 	bl	8000b34 <__aeabi_fsub>
 800bfcc:	4979      	ldr	r1, [pc, #484]	; (800c1b4 <__ieee754_rem_pio2f+0x2a0>)
 800bfce:	e7eb      	b.n	800bfa8 <__ieee754_rem_pio2f+0x94>
 800bfd0:	4a79      	ldr	r2, [pc, #484]	; (800c1b8 <__ieee754_rem_pio2f+0x2a4>)
 800bfd2:	4296      	cmp	r6, r2
 800bfd4:	f300 8091 	bgt.w	800c0fa <__ieee754_rem_pio2f+0x1e6>
 800bfd8:	f000 fe3a 	bl	800cc50 <fabsf>
 800bfdc:	4977      	ldr	r1, [pc, #476]	; (800c1bc <__ieee754_rem_pio2f+0x2a8>)
 800bfde:	4607      	mov	r7, r0
 800bfe0:	f7f4 feb2 	bl	8000d48 <__aeabi_fmul>
 800bfe4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bfe8:	f7f4 fda6 	bl	8000b38 <__addsf3>
 800bfec:	f7f5 f872 	bl	80010d4 <__aeabi_f2iz>
 800bff0:	4605      	mov	r5, r0
 800bff2:	f7f4 fe55 	bl	8000ca0 <__aeabi_i2f>
 800bff6:	496b      	ldr	r1, [pc, #428]	; (800c1a4 <__ieee754_rem_pio2f+0x290>)
 800bff8:	4681      	mov	r9, r0
 800bffa:	f7f4 fea5 	bl	8000d48 <__aeabi_fmul>
 800bffe:	4601      	mov	r1, r0
 800c000:	4638      	mov	r0, r7
 800c002:	f7f4 fd97 	bl	8000b34 <__aeabi_fsub>
 800c006:	4969      	ldr	r1, [pc, #420]	; (800c1ac <__ieee754_rem_pio2f+0x298>)
 800c008:	4680      	mov	r8, r0
 800c00a:	4648      	mov	r0, r9
 800c00c:	f7f4 fe9c 	bl	8000d48 <__aeabi_fmul>
 800c010:	2d1f      	cmp	r5, #31
 800c012:	4607      	mov	r7, r0
 800c014:	dc0c      	bgt.n	800c030 <__ieee754_rem_pio2f+0x11c>
 800c016:	4a6a      	ldr	r2, [pc, #424]	; (800c1c0 <__ieee754_rem_pio2f+0x2ac>)
 800c018:	1e69      	subs	r1, r5, #1
 800c01a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c01e:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800c022:	4293      	cmp	r3, r2
 800c024:	d004      	beq.n	800c030 <__ieee754_rem_pio2f+0x11c>
 800c026:	4639      	mov	r1, r7
 800c028:	4640      	mov	r0, r8
 800c02a:	f7f4 fd83 	bl	8000b34 <__aeabi_fsub>
 800c02e:	e00b      	b.n	800c048 <__ieee754_rem_pio2f+0x134>
 800c030:	4639      	mov	r1, r7
 800c032:	4640      	mov	r0, r8
 800c034:	f7f4 fd7e 	bl	8000b34 <__aeabi_fsub>
 800c038:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c03c:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800c040:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800c044:	2e08      	cmp	r6, #8
 800c046:	dc01      	bgt.n	800c04c <__ieee754_rem_pio2f+0x138>
 800c048:	6020      	str	r0, [r4, #0]
 800c04a:	e026      	b.n	800c09a <__ieee754_rem_pio2f+0x186>
 800c04c:	4958      	ldr	r1, [pc, #352]	; (800c1b0 <__ieee754_rem_pio2f+0x29c>)
 800c04e:	4648      	mov	r0, r9
 800c050:	f7f4 fe7a 	bl	8000d48 <__aeabi_fmul>
 800c054:	4607      	mov	r7, r0
 800c056:	4601      	mov	r1, r0
 800c058:	4640      	mov	r0, r8
 800c05a:	f7f4 fd6b 	bl	8000b34 <__aeabi_fsub>
 800c05e:	4601      	mov	r1, r0
 800c060:	4606      	mov	r6, r0
 800c062:	4640      	mov	r0, r8
 800c064:	f7f4 fd66 	bl	8000b34 <__aeabi_fsub>
 800c068:	4639      	mov	r1, r7
 800c06a:	f7f4 fd63 	bl	8000b34 <__aeabi_fsub>
 800c06e:	4607      	mov	r7, r0
 800c070:	4950      	ldr	r1, [pc, #320]	; (800c1b4 <__ieee754_rem_pio2f+0x2a0>)
 800c072:	4648      	mov	r0, r9
 800c074:	f7f4 fe68 	bl	8000d48 <__aeabi_fmul>
 800c078:	4639      	mov	r1, r7
 800c07a:	f7f4 fd5b 	bl	8000b34 <__aeabi_fsub>
 800c07e:	4601      	mov	r1, r0
 800c080:	4607      	mov	r7, r0
 800c082:	4630      	mov	r0, r6
 800c084:	f7f4 fd56 	bl	8000b34 <__aeabi_fsub>
 800c088:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c08c:	ebab 0b03 	sub.w	fp, fp, r3
 800c090:	f1bb 0f19 	cmp.w	fp, #25
 800c094:	dc16      	bgt.n	800c0c4 <__ieee754_rem_pio2f+0x1b0>
 800c096:	46b0      	mov	r8, r6
 800c098:	6020      	str	r0, [r4, #0]
 800c09a:	6826      	ldr	r6, [r4, #0]
 800c09c:	4640      	mov	r0, r8
 800c09e:	4631      	mov	r1, r6
 800c0a0:	f7f4 fd48 	bl	8000b34 <__aeabi_fsub>
 800c0a4:	4639      	mov	r1, r7
 800c0a6:	f7f4 fd45 	bl	8000b34 <__aeabi_fsub>
 800c0aa:	f1ba 0f00 	cmp.w	sl, #0
 800c0ae:	6060      	str	r0, [r4, #4]
 800c0b0:	f6bf af5a 	bge.w	800bf68 <__ieee754_rem_pio2f+0x54>
 800c0b4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c0b8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c0bc:	6026      	str	r6, [r4, #0]
 800c0be:	6060      	str	r0, [r4, #4]
 800c0c0:	426d      	negs	r5, r5
 800c0c2:	e751      	b.n	800bf68 <__ieee754_rem_pio2f+0x54>
 800c0c4:	493f      	ldr	r1, [pc, #252]	; (800c1c4 <__ieee754_rem_pio2f+0x2b0>)
 800c0c6:	4648      	mov	r0, r9
 800c0c8:	f7f4 fe3e 	bl	8000d48 <__aeabi_fmul>
 800c0cc:	4607      	mov	r7, r0
 800c0ce:	4601      	mov	r1, r0
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	f7f4 fd2f 	bl	8000b34 <__aeabi_fsub>
 800c0d6:	4601      	mov	r1, r0
 800c0d8:	4680      	mov	r8, r0
 800c0da:	4630      	mov	r0, r6
 800c0dc:	f7f4 fd2a 	bl	8000b34 <__aeabi_fsub>
 800c0e0:	4639      	mov	r1, r7
 800c0e2:	f7f4 fd27 	bl	8000b34 <__aeabi_fsub>
 800c0e6:	4606      	mov	r6, r0
 800c0e8:	4937      	ldr	r1, [pc, #220]	; (800c1c8 <__ieee754_rem_pio2f+0x2b4>)
 800c0ea:	4648      	mov	r0, r9
 800c0ec:	f7f4 fe2c 	bl	8000d48 <__aeabi_fmul>
 800c0f0:	4631      	mov	r1, r6
 800c0f2:	f7f4 fd1f 	bl	8000b34 <__aeabi_fsub>
 800c0f6:	4607      	mov	r7, r0
 800c0f8:	e795      	b.n	800c026 <__ieee754_rem_pio2f+0x112>
 800c0fa:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c0fe:	db05      	blt.n	800c10c <__ieee754_rem_pio2f+0x1f8>
 800c100:	4601      	mov	r1, r0
 800c102:	f7f4 fd17 	bl	8000b34 <__aeabi_fsub>
 800c106:	6060      	str	r0, [r4, #4]
 800c108:	6020      	str	r0, [r4, #0]
 800c10a:	e710      	b.n	800bf2e <__ieee754_rem_pio2f+0x1a>
 800c10c:	15f7      	asrs	r7, r6, #23
 800c10e:	3f86      	subs	r7, #134	; 0x86
 800c110:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800c114:	4630      	mov	r0, r6
 800c116:	f7f4 ffdd 	bl	80010d4 <__aeabi_f2iz>
 800c11a:	f7f4 fdc1 	bl	8000ca0 <__aeabi_i2f>
 800c11e:	4601      	mov	r1, r0
 800c120:	9003      	str	r0, [sp, #12]
 800c122:	4630      	mov	r0, r6
 800c124:	f7f4 fd06 	bl	8000b34 <__aeabi_fsub>
 800c128:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800c12c:	f7f4 fe0c 	bl	8000d48 <__aeabi_fmul>
 800c130:	4606      	mov	r6, r0
 800c132:	f7f4 ffcf 	bl	80010d4 <__aeabi_f2iz>
 800c136:	f7f4 fdb3 	bl	8000ca0 <__aeabi_i2f>
 800c13a:	4601      	mov	r1, r0
 800c13c:	9004      	str	r0, [sp, #16]
 800c13e:	4605      	mov	r5, r0
 800c140:	4630      	mov	r0, r6
 800c142:	f7f4 fcf7 	bl	8000b34 <__aeabi_fsub>
 800c146:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800c14a:	f7f4 fdfd 	bl	8000d48 <__aeabi_fmul>
 800c14e:	2100      	movs	r1, #0
 800c150:	9005      	str	r0, [sp, #20]
 800c152:	f7f4 ff8d 	bl	8001070 <__aeabi_fcmpeq>
 800c156:	b1f0      	cbz	r0, 800c196 <__ieee754_rem_pio2f+0x282>
 800c158:	2100      	movs	r1, #0
 800c15a:	4628      	mov	r0, r5
 800c15c:	f7f4 ff88 	bl	8001070 <__aeabi_fcmpeq>
 800c160:	2800      	cmp	r0, #0
 800c162:	bf14      	ite	ne
 800c164:	2301      	movne	r3, #1
 800c166:	2302      	moveq	r3, #2
 800c168:	4a18      	ldr	r2, [pc, #96]	; (800c1cc <__ieee754_rem_pio2f+0x2b8>)
 800c16a:	4621      	mov	r1, r4
 800c16c:	9201      	str	r2, [sp, #4]
 800c16e:	2202      	movs	r2, #2
 800c170:	a803      	add	r0, sp, #12
 800c172:	9200      	str	r2, [sp, #0]
 800c174:	463a      	mov	r2, r7
 800c176:	f000 f8ab 	bl	800c2d0 <__kernel_rem_pio2f>
 800c17a:	f1ba 0f00 	cmp.w	sl, #0
 800c17e:	4605      	mov	r5, r0
 800c180:	f6bf aef2 	bge.w	800bf68 <__ieee754_rem_pio2f+0x54>
 800c184:	6823      	ldr	r3, [r4, #0]
 800c186:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c18a:	6023      	str	r3, [r4, #0]
 800c18c:	6863      	ldr	r3, [r4, #4]
 800c18e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c192:	6063      	str	r3, [r4, #4]
 800c194:	e794      	b.n	800c0c0 <__ieee754_rem_pio2f+0x1ac>
 800c196:	2303      	movs	r3, #3
 800c198:	e7e6      	b.n	800c168 <__ieee754_rem_pio2f+0x254>
 800c19a:	bf00      	nop
 800c19c:	3f490fd8 	.word	0x3f490fd8
 800c1a0:	4016cbe3 	.word	0x4016cbe3
 800c1a4:	3fc90f80 	.word	0x3fc90f80
 800c1a8:	3fc90fd0 	.word	0x3fc90fd0
 800c1ac:	37354443 	.word	0x37354443
 800c1b0:	37354400 	.word	0x37354400
 800c1b4:	2e85a308 	.word	0x2e85a308
 800c1b8:	43490f80 	.word	0x43490f80
 800c1bc:	3f22f984 	.word	0x3f22f984
 800c1c0:	0800ded0 	.word	0x0800ded0
 800c1c4:	2e85a300 	.word	0x2e85a300
 800c1c8:	248d3132 	.word	0x248d3132
 800c1cc:	0800df50 	.word	0x0800df50

0800c1d0 <__kernel_cosf>:
 800c1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d4:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800c1d8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800c1dc:	4606      	mov	r6, r0
 800c1de:	4688      	mov	r8, r1
 800c1e0:	da03      	bge.n	800c1ea <__kernel_cosf+0x1a>
 800c1e2:	f7f4 ff77 	bl	80010d4 <__aeabi_f2iz>
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d05c      	beq.n	800c2a4 <__kernel_cosf+0xd4>
 800c1ea:	4631      	mov	r1, r6
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	f7f4 fdab 	bl	8000d48 <__aeabi_fmul>
 800c1f2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c1f6:	4605      	mov	r5, r0
 800c1f8:	f7f4 fda6 	bl	8000d48 <__aeabi_fmul>
 800c1fc:	492b      	ldr	r1, [pc, #172]	; (800c2ac <__kernel_cosf+0xdc>)
 800c1fe:	4607      	mov	r7, r0
 800c200:	4628      	mov	r0, r5
 800c202:	f7f4 fda1 	bl	8000d48 <__aeabi_fmul>
 800c206:	492a      	ldr	r1, [pc, #168]	; (800c2b0 <__kernel_cosf+0xe0>)
 800c208:	f7f4 fc96 	bl	8000b38 <__addsf3>
 800c20c:	4629      	mov	r1, r5
 800c20e:	f7f4 fd9b 	bl	8000d48 <__aeabi_fmul>
 800c212:	4928      	ldr	r1, [pc, #160]	; (800c2b4 <__kernel_cosf+0xe4>)
 800c214:	f7f4 fc8e 	bl	8000b34 <__aeabi_fsub>
 800c218:	4629      	mov	r1, r5
 800c21a:	f7f4 fd95 	bl	8000d48 <__aeabi_fmul>
 800c21e:	4926      	ldr	r1, [pc, #152]	; (800c2b8 <__kernel_cosf+0xe8>)
 800c220:	f7f4 fc8a 	bl	8000b38 <__addsf3>
 800c224:	4629      	mov	r1, r5
 800c226:	f7f4 fd8f 	bl	8000d48 <__aeabi_fmul>
 800c22a:	4924      	ldr	r1, [pc, #144]	; (800c2bc <__kernel_cosf+0xec>)
 800c22c:	f7f4 fc82 	bl	8000b34 <__aeabi_fsub>
 800c230:	4629      	mov	r1, r5
 800c232:	f7f4 fd89 	bl	8000d48 <__aeabi_fmul>
 800c236:	4922      	ldr	r1, [pc, #136]	; (800c2c0 <__kernel_cosf+0xf0>)
 800c238:	f7f4 fc7e 	bl	8000b38 <__addsf3>
 800c23c:	4629      	mov	r1, r5
 800c23e:	f7f4 fd83 	bl	8000d48 <__aeabi_fmul>
 800c242:	4629      	mov	r1, r5
 800c244:	f7f4 fd80 	bl	8000d48 <__aeabi_fmul>
 800c248:	4641      	mov	r1, r8
 800c24a:	4605      	mov	r5, r0
 800c24c:	4630      	mov	r0, r6
 800c24e:	f7f4 fd7b 	bl	8000d48 <__aeabi_fmul>
 800c252:	4601      	mov	r1, r0
 800c254:	4628      	mov	r0, r5
 800c256:	f7f4 fc6d 	bl	8000b34 <__aeabi_fsub>
 800c25a:	4b1a      	ldr	r3, [pc, #104]	; (800c2c4 <__kernel_cosf+0xf4>)
 800c25c:	4605      	mov	r5, r0
 800c25e:	429c      	cmp	r4, r3
 800c260:	dc0a      	bgt.n	800c278 <__kernel_cosf+0xa8>
 800c262:	4601      	mov	r1, r0
 800c264:	4638      	mov	r0, r7
 800c266:	f7f4 fc65 	bl	8000b34 <__aeabi_fsub>
 800c26a:	4601      	mov	r1, r0
 800c26c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c270:	f7f4 fc60 	bl	8000b34 <__aeabi_fsub>
 800c274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c278:	4b13      	ldr	r3, [pc, #76]	; (800c2c8 <__kernel_cosf+0xf8>)
 800c27a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c27e:	429c      	cmp	r4, r3
 800c280:	bfcc      	ite	gt
 800c282:	4c12      	ldrgt	r4, [pc, #72]	; (800c2cc <__kernel_cosf+0xfc>)
 800c284:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800c288:	4621      	mov	r1, r4
 800c28a:	f7f4 fc53 	bl	8000b34 <__aeabi_fsub>
 800c28e:	4621      	mov	r1, r4
 800c290:	4606      	mov	r6, r0
 800c292:	4638      	mov	r0, r7
 800c294:	f7f4 fc4e 	bl	8000b34 <__aeabi_fsub>
 800c298:	4629      	mov	r1, r5
 800c29a:	f7f4 fc4b 	bl	8000b34 <__aeabi_fsub>
 800c29e:	4601      	mov	r1, r0
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	e7e5      	b.n	800c270 <__kernel_cosf+0xa0>
 800c2a4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c2a8:	e7e4      	b.n	800c274 <__kernel_cosf+0xa4>
 800c2aa:	bf00      	nop
 800c2ac:	ad47d74e 	.word	0xad47d74e
 800c2b0:	310f74f6 	.word	0x310f74f6
 800c2b4:	3493f27c 	.word	0x3493f27c
 800c2b8:	37d00d01 	.word	0x37d00d01
 800c2bc:	3ab60b61 	.word	0x3ab60b61
 800c2c0:	3d2aaaab 	.word	0x3d2aaaab
 800c2c4:	3e999999 	.word	0x3e999999
 800c2c8:	3f480000 	.word	0x3f480000
 800c2cc:	3e900000 	.word	0x3e900000

0800c2d0 <__kernel_rem_pio2f>:
 800c2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d4:	b0db      	sub	sp, #364	; 0x16c
 800c2d6:	9202      	str	r2, [sp, #8]
 800c2d8:	9304      	str	r3, [sp, #16]
 800c2da:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c2dc:	4bc5      	ldr	r3, [pc, #788]	; (800c5f4 <__kernel_rem_pio2f+0x324>)
 800c2de:	9005      	str	r0, [sp, #20]
 800c2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2e4:	9100      	str	r1, [sp, #0]
 800c2e6:	9301      	str	r3, [sp, #4]
 800c2e8:	9b04      	ldr	r3, [sp, #16]
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	9303      	str	r3, [sp, #12]
 800c2ee:	9b02      	ldr	r3, [sp, #8]
 800c2f0:	1d1a      	adds	r2, r3, #4
 800c2f2:	f2c0 809b 	blt.w	800c42c <__kernel_rem_pio2f+0x15c>
 800c2f6:	1edc      	subs	r4, r3, #3
 800c2f8:	bf48      	it	mi
 800c2fa:	1d1c      	addmi	r4, r3, #4
 800c2fc:	10e4      	asrs	r4, r4, #3
 800c2fe:	2500      	movs	r5, #0
 800c300:	f04f 0a00 	mov.w	sl, #0
 800c304:	1c67      	adds	r7, r4, #1
 800c306:	00fb      	lsls	r3, r7, #3
 800c308:	9306      	str	r3, [sp, #24]
 800c30a:	9b02      	ldr	r3, [sp, #8]
 800c30c:	9a03      	ldr	r2, [sp, #12]
 800c30e:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800c312:	9b01      	ldr	r3, [sp, #4]
 800c314:	1aa6      	subs	r6, r4, r2
 800c316:	eb03 0802 	add.w	r8, r3, r2
 800c31a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800c31c:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800c320:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800c324:	4545      	cmp	r5, r8
 800c326:	f340 8083 	ble.w	800c430 <__kernel_rem_pio2f+0x160>
 800c32a:	f04f 0800 	mov.w	r8, #0
 800c32e:	f04f 0b00 	mov.w	fp, #0
 800c332:	9b04      	ldr	r3, [sp, #16]
 800c334:	aa1e      	add	r2, sp, #120	; 0x78
 800c336:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c33a:	ab46      	add	r3, sp, #280	; 0x118
 800c33c:	9a01      	ldr	r2, [sp, #4]
 800c33e:	4590      	cmp	r8, r2
 800c340:	f340 809c 	ble.w	800c47c <__kernel_rem_pio2f+0x1ac>
 800c344:	4613      	mov	r3, r2
 800c346:	aa0a      	add	r2, sp, #40	; 0x28
 800c348:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c34c:	9308      	str	r3, [sp, #32]
 800c34e:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800c350:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c354:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c358:	9307      	str	r3, [sp, #28]
 800c35a:	ad0a      	add	r5, sp, #40	; 0x28
 800c35c:	462e      	mov	r6, r5
 800c35e:	46c3      	mov	fp, r8
 800c360:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800c364:	ab5a      	add	r3, sp, #360	; 0x168
 800c366:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800c36a:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800c36e:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800c372:	f1bb 0f00 	cmp.w	fp, #0
 800c376:	f300 8086 	bgt.w	800c486 <__kernel_rem_pio2f+0x1b6>
 800c37a:	4639      	mov	r1, r7
 800c37c:	4620      	mov	r0, r4
 800c37e:	f000 fcad 	bl	800ccdc <scalbnf>
 800c382:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800c386:	4604      	mov	r4, r0
 800c388:	f7f4 fcde 	bl	8000d48 <__aeabi_fmul>
 800c38c:	f000 fc64 	bl	800cc58 <floorf>
 800c390:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800c394:	f7f4 fcd8 	bl	8000d48 <__aeabi_fmul>
 800c398:	4601      	mov	r1, r0
 800c39a:	4620      	mov	r0, r4
 800c39c:	f7f4 fbca 	bl	8000b34 <__aeabi_fsub>
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	f7f4 fe97 	bl	80010d4 <__aeabi_f2iz>
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	f7f4 fc7a 	bl	8000ca0 <__aeabi_i2f>
 800c3ac:	4601      	mov	r1, r0
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	f7f4 fbc0 	bl	8000b34 <__aeabi_fsub>
 800c3b4:	2f00      	cmp	r7, #0
 800c3b6:	4681      	mov	r9, r0
 800c3b8:	f340 8084 	ble.w	800c4c4 <__kernel_rem_pio2f+0x1f4>
 800c3bc:	f108 32ff 	add.w	r2, r8, #4294967295
 800c3c0:	ab0a      	add	r3, sp, #40	; 0x28
 800c3c2:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800c3c6:	f1c7 0108 	rsb	r1, r7, #8
 800c3ca:	fa44 f301 	asr.w	r3, r4, r1
 800c3ce:	441e      	add	r6, r3
 800c3d0:	408b      	lsls	r3, r1
 800c3d2:	1ae4      	subs	r4, r4, r3
 800c3d4:	f1c7 0007 	rsb	r0, r7, #7
 800c3d8:	ab0a      	add	r3, sp, #40	; 0x28
 800c3da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3de:	4104      	asrs	r4, r0
 800c3e0:	2c00      	cmp	r4, #0
 800c3e2:	dd7e      	ble.n	800c4e2 <__kernel_rem_pio2f+0x212>
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	4692      	mov	sl, r2
 800c3e8:	3601      	adds	r6, #1
 800c3ea:	4590      	cmp	r8, r2
 800c3ec:	f300 80b0 	bgt.w	800c550 <__kernel_rem_pio2f+0x280>
 800c3f0:	2f00      	cmp	r7, #0
 800c3f2:	dd05      	ble.n	800c400 <__kernel_rem_pio2f+0x130>
 800c3f4:	2f01      	cmp	r7, #1
 800c3f6:	f000 80bd 	beq.w	800c574 <__kernel_rem_pio2f+0x2a4>
 800c3fa:	2f02      	cmp	r7, #2
 800c3fc:	f000 80c5 	beq.w	800c58a <__kernel_rem_pio2f+0x2ba>
 800c400:	2c02      	cmp	r4, #2
 800c402:	d16e      	bne.n	800c4e2 <__kernel_rem_pio2f+0x212>
 800c404:	4649      	mov	r1, r9
 800c406:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c40a:	f7f4 fb93 	bl	8000b34 <__aeabi_fsub>
 800c40e:	4681      	mov	r9, r0
 800c410:	f1ba 0f00 	cmp.w	sl, #0
 800c414:	d065      	beq.n	800c4e2 <__kernel_rem_pio2f+0x212>
 800c416:	4639      	mov	r1, r7
 800c418:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c41c:	f000 fc5e 	bl	800ccdc <scalbnf>
 800c420:	4601      	mov	r1, r0
 800c422:	4648      	mov	r0, r9
 800c424:	f7f4 fb86 	bl	8000b34 <__aeabi_fsub>
 800c428:	4681      	mov	r9, r0
 800c42a:	e05a      	b.n	800c4e2 <__kernel_rem_pio2f+0x212>
 800c42c:	2400      	movs	r4, #0
 800c42e:	e766      	b.n	800c2fe <__kernel_rem_pio2f+0x2e>
 800c430:	42ee      	cmn	r6, r5
 800c432:	d407      	bmi.n	800c444 <__kernel_rem_pio2f+0x174>
 800c434:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c438:	f7f4 fc32 	bl	8000ca0 <__aeabi_i2f>
 800c43c:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800c440:	3501      	adds	r5, #1
 800c442:	e76f      	b.n	800c324 <__kernel_rem_pio2f+0x54>
 800c444:	4650      	mov	r0, sl
 800c446:	e7f9      	b.n	800c43c <__kernel_rem_pio2f+0x16c>
 800c448:	9b05      	ldr	r3, [sp, #20]
 800c44a:	f8da 1000 	ldr.w	r1, [sl]
 800c44e:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800c452:	f7f4 fc79 	bl	8000d48 <__aeabi_fmul>
 800c456:	4601      	mov	r1, r0
 800c458:	4630      	mov	r0, r6
 800c45a:	f7f4 fb6d 	bl	8000b38 <__addsf3>
 800c45e:	4606      	mov	r6, r0
 800c460:	f109 0901 	add.w	r9, r9, #1
 800c464:	ab46      	add	r3, sp, #280	; 0x118
 800c466:	9a03      	ldr	r2, [sp, #12]
 800c468:	f1aa 0a04 	sub.w	sl, sl, #4
 800c46c:	4591      	cmp	r9, r2
 800c46e:	ddeb      	ble.n	800c448 <__kernel_rem_pio2f+0x178>
 800c470:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c474:	3504      	adds	r5, #4
 800c476:	f108 0801 	add.w	r8, r8, #1
 800c47a:	e75f      	b.n	800c33c <__kernel_rem_pio2f+0x6c>
 800c47c:	46aa      	mov	sl, r5
 800c47e:	465e      	mov	r6, fp
 800c480:	f04f 0900 	mov.w	r9, #0
 800c484:	e7ef      	b.n	800c466 <__kernel_rem_pio2f+0x196>
 800c486:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800c48a:	4620      	mov	r0, r4
 800c48c:	f7f4 fc5c 	bl	8000d48 <__aeabi_fmul>
 800c490:	f7f4 fe20 	bl	80010d4 <__aeabi_f2iz>
 800c494:	f7f4 fc04 	bl	8000ca0 <__aeabi_i2f>
 800c498:	4649      	mov	r1, r9
 800c49a:	9009      	str	r0, [sp, #36]	; 0x24
 800c49c:	f7f4 fc54 	bl	8000d48 <__aeabi_fmul>
 800c4a0:	4601      	mov	r1, r0
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f7f4 fb46 	bl	8000b34 <__aeabi_fsub>
 800c4a8:	f7f4 fe14 	bl	80010d4 <__aeabi_f2iz>
 800c4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4b2:	f846 0b04 	str.w	r0, [r6], #4
 800c4b6:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7f4 fb3c 	bl	8000b38 <__addsf3>
 800c4c0:	4604      	mov	r4, r0
 800c4c2:	e756      	b.n	800c372 <__kernel_rem_pio2f+0xa2>
 800c4c4:	d106      	bne.n	800c4d4 <__kernel_rem_pio2f+0x204>
 800c4c6:	f108 33ff 	add.w	r3, r8, #4294967295
 800c4ca:	aa0a      	add	r2, sp, #40	; 0x28
 800c4cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c4d0:	1224      	asrs	r4, r4, #8
 800c4d2:	e785      	b.n	800c3e0 <__kernel_rem_pio2f+0x110>
 800c4d4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c4d8:	f7f4 fde8 	bl	80010ac <__aeabi_fcmpge>
 800c4dc:	4604      	mov	r4, r0
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d134      	bne.n	800c54c <__kernel_rem_pio2f+0x27c>
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	4648      	mov	r0, r9
 800c4e6:	f7f4 fdc3 	bl	8001070 <__aeabi_fcmpeq>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	f000 809a 	beq.w	800c624 <__kernel_rem_pio2f+0x354>
 800c4f0:	f108 35ff 	add.w	r5, r8, #4294967295
 800c4f4:	462b      	mov	r3, r5
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	9901      	ldr	r1, [sp, #4]
 800c4fa:	428b      	cmp	r3, r1
 800c4fc:	da4d      	bge.n	800c59a <__kernel_rem_pio2f+0x2ca>
 800c4fe:	2a00      	cmp	r2, #0
 800c500:	d07c      	beq.n	800c5fc <__kernel_rem_pio2f+0x32c>
 800c502:	ab0a      	add	r3, sp, #40	; 0x28
 800c504:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c508:	3f08      	subs	r7, #8
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f000 8088 	beq.w	800c620 <__kernel_rem_pio2f+0x350>
 800c510:	4639      	mov	r1, r7
 800c512:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c516:	f000 fbe1 	bl	800ccdc <scalbnf>
 800c51a:	46aa      	mov	sl, r5
 800c51c:	4681      	mov	r9, r0
 800c51e:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800c522:	af46      	add	r7, sp, #280	; 0x118
 800c524:	f1ba 0f00 	cmp.w	sl, #0
 800c528:	f280 80b1 	bge.w	800c68e <__kernel_rem_pio2f+0x3be>
 800c52c:	46a9      	mov	r9, r5
 800c52e:	f04f 0a00 	mov.w	sl, #0
 800c532:	2200      	movs	r2, #0
 800c534:	f1b9 0f00 	cmp.w	r9, #0
 800c538:	f2c0 80db 	blt.w	800c6f2 <__kernel_rem_pio2f+0x422>
 800c53c:	a946      	add	r1, sp, #280	; 0x118
 800c53e:	4617      	mov	r7, r2
 800c540:	f04f 0800 	mov.w	r8, #0
 800c544:	4b2c      	ldr	r3, [pc, #176]	; (800c5f8 <__kernel_rem_pio2f+0x328>)
 800c546:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800c54a:	e0c3      	b.n	800c6d4 <__kernel_rem_pio2f+0x404>
 800c54c:	2402      	movs	r4, #2
 800c54e:	e749      	b.n	800c3e4 <__kernel_rem_pio2f+0x114>
 800c550:	682b      	ldr	r3, [r5, #0]
 800c552:	f1ba 0f00 	cmp.w	sl, #0
 800c556:	d108      	bne.n	800c56a <__kernel_rem_pio2f+0x29a>
 800c558:	b11b      	cbz	r3, 800c562 <__kernel_rem_pio2f+0x292>
 800c55a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c55e:	602b      	str	r3, [r5, #0]
 800c560:	2301      	movs	r3, #1
 800c562:	469a      	mov	sl, r3
 800c564:	3201      	adds	r2, #1
 800c566:	3504      	adds	r5, #4
 800c568:	e73f      	b.n	800c3ea <__kernel_rem_pio2f+0x11a>
 800c56a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c56e:	602b      	str	r3, [r5, #0]
 800c570:	4653      	mov	r3, sl
 800c572:	e7f6      	b.n	800c562 <__kernel_rem_pio2f+0x292>
 800c574:	f108 32ff 	add.w	r2, r8, #4294967295
 800c578:	ab0a      	add	r3, sp, #40	; 0x28
 800c57a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c57e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c582:	a90a      	add	r1, sp, #40	; 0x28
 800c584:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c588:	e73a      	b.n	800c400 <__kernel_rem_pio2f+0x130>
 800c58a:	f108 32ff 	add.w	r2, r8, #4294967295
 800c58e:	ab0a      	add	r3, sp, #40	; 0x28
 800c590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c598:	e7f3      	b.n	800c582 <__kernel_rem_pio2f+0x2b2>
 800c59a:	a90a      	add	r1, sp, #40	; 0x28
 800c59c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	430a      	orrs	r2, r1
 800c5a4:	e7a8      	b.n	800c4f8 <__kernel_rem_pio2f+0x228>
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c5ac:	2900      	cmp	r1, #0
 800c5ae:	d0fa      	beq.n	800c5a6 <__kernel_rem_pio2f+0x2d6>
 800c5b0:	9a04      	ldr	r2, [sp, #16]
 800c5b2:	f108 0501 	add.w	r5, r8, #1
 800c5b6:	eb08 0402 	add.w	r4, r8, r2
 800c5ba:	aa1e      	add	r2, sp, #120	; 0x78
 800c5bc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c5c0:	4498      	add	r8, r3
 800c5c2:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800c5c6:	45a8      	cmp	r8, r5
 800c5c8:	f6ff aec7 	blt.w	800c35a <__kernel_rem_pio2f+0x8a>
 800c5cc:	9b07      	ldr	r3, [sp, #28]
 800c5ce:	46a3      	mov	fp, r4
 800c5d0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5d4:	f7f4 fb64 	bl	8000ca0 <__aeabi_i2f>
 800c5d8:	f04f 0a00 	mov.w	sl, #0
 800c5dc:	2600      	movs	r6, #0
 800c5de:	f84b 0b04 	str.w	r0, [fp], #4
 800c5e2:	9b03      	ldr	r3, [sp, #12]
 800c5e4:	459a      	cmp	sl, r3
 800c5e6:	dd0c      	ble.n	800c602 <__kernel_rem_pio2f+0x332>
 800c5e8:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800c5ec:	465c      	mov	r4, fp
 800c5ee:	3501      	adds	r5, #1
 800c5f0:	e7e9      	b.n	800c5c6 <__kernel_rem_pio2f+0x2f6>
 800c5f2:	bf00      	nop
 800c5f4:	0800e294 	.word	0x0800e294
 800c5f8:	0800e268 	.word	0x0800e268
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	9a08      	ldr	r2, [sp, #32]
 800c600:	e7d2      	b.n	800c5a8 <__kernel_rem_pio2f+0x2d8>
 800c602:	9b05      	ldr	r3, [sp, #20]
 800c604:	f854 0904 	ldr.w	r0, [r4], #-4
 800c608:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800c60c:	f7f4 fb9c 	bl	8000d48 <__aeabi_fmul>
 800c610:	4601      	mov	r1, r0
 800c612:	4630      	mov	r0, r6
 800c614:	f7f4 fa90 	bl	8000b38 <__addsf3>
 800c618:	f10a 0a01 	add.w	sl, sl, #1
 800c61c:	4606      	mov	r6, r0
 800c61e:	e7e0      	b.n	800c5e2 <__kernel_rem_pio2f+0x312>
 800c620:	3d01      	subs	r5, #1
 800c622:	e76e      	b.n	800c502 <__kernel_rem_pio2f+0x232>
 800c624:	9b06      	ldr	r3, [sp, #24]
 800c626:	9a02      	ldr	r2, [sp, #8]
 800c628:	4648      	mov	r0, r9
 800c62a:	1a99      	subs	r1, r3, r2
 800c62c:	f000 fb56 	bl	800ccdc <scalbnf>
 800c630:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800c634:	4605      	mov	r5, r0
 800c636:	f7f4 fd39 	bl	80010ac <__aeabi_fcmpge>
 800c63a:	b300      	cbz	r0, 800c67e <__kernel_rem_pio2f+0x3ae>
 800c63c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800c640:	4628      	mov	r0, r5
 800c642:	f7f4 fb81 	bl	8000d48 <__aeabi_fmul>
 800c646:	f7f4 fd45 	bl	80010d4 <__aeabi_f2iz>
 800c64a:	f7f4 fb29 	bl	8000ca0 <__aeabi_i2f>
 800c64e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800c652:	4681      	mov	r9, r0
 800c654:	f7f4 fb78 	bl	8000d48 <__aeabi_fmul>
 800c658:	4601      	mov	r1, r0
 800c65a:	4628      	mov	r0, r5
 800c65c:	f7f4 fa6a 	bl	8000b34 <__aeabi_fsub>
 800c660:	f7f4 fd38 	bl	80010d4 <__aeabi_f2iz>
 800c664:	ab0a      	add	r3, sp, #40	; 0x28
 800c666:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c66a:	4648      	mov	r0, r9
 800c66c:	f7f4 fd32 	bl	80010d4 <__aeabi_f2iz>
 800c670:	f108 0501 	add.w	r5, r8, #1
 800c674:	ab0a      	add	r3, sp, #40	; 0x28
 800c676:	3708      	adds	r7, #8
 800c678:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800c67c:	e748      	b.n	800c510 <__kernel_rem_pio2f+0x240>
 800c67e:	4628      	mov	r0, r5
 800c680:	f7f4 fd28 	bl	80010d4 <__aeabi_f2iz>
 800c684:	ab0a      	add	r3, sp, #40	; 0x28
 800c686:	4645      	mov	r5, r8
 800c688:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c68c:	e740      	b.n	800c510 <__kernel_rem_pio2f+0x240>
 800c68e:	ab0a      	add	r3, sp, #40	; 0x28
 800c690:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c694:	f7f4 fb04 	bl	8000ca0 <__aeabi_i2f>
 800c698:	4649      	mov	r1, r9
 800c69a:	f7f4 fb55 	bl	8000d48 <__aeabi_fmul>
 800c69e:	4641      	mov	r1, r8
 800c6a0:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800c6a4:	4648      	mov	r0, r9
 800c6a6:	f7f4 fb4f 	bl	8000d48 <__aeabi_fmul>
 800c6aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6ae:	4681      	mov	r9, r0
 800c6b0:	e738      	b.n	800c524 <__kernel_rem_pio2f+0x254>
 800c6b2:	f853 0b04 	ldr.w	r0, [r3], #4
 800c6b6:	f85b 1b04 	ldr.w	r1, [fp], #4
 800c6ba:	9203      	str	r2, [sp, #12]
 800c6bc:	9302      	str	r3, [sp, #8]
 800c6be:	f7f4 fb43 	bl	8000d48 <__aeabi_fmul>
 800c6c2:	4601      	mov	r1, r0
 800c6c4:	4638      	mov	r0, r7
 800c6c6:	f7f4 fa37 	bl	8000b38 <__addsf3>
 800c6ca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c6ce:	4607      	mov	r7, r0
 800c6d0:	f108 0801 	add.w	r8, r8, #1
 800c6d4:	9901      	ldr	r1, [sp, #4]
 800c6d6:	4588      	cmp	r8, r1
 800c6d8:	dc01      	bgt.n	800c6de <__kernel_rem_pio2f+0x40e>
 800c6da:	45c2      	cmp	sl, r8
 800c6dc:	dae9      	bge.n	800c6b2 <__kernel_rem_pio2f+0x3e2>
 800c6de:	ab5a      	add	r3, sp, #360	; 0x168
 800c6e0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800c6e4:	f843 7ca0 	str.w	r7, [r3, #-160]
 800c6e8:	f109 39ff 	add.w	r9, r9, #4294967295
 800c6ec:	f10a 0a01 	add.w	sl, sl, #1
 800c6f0:	e720      	b.n	800c534 <__kernel_rem_pio2f+0x264>
 800c6f2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	dc07      	bgt.n	800c708 <__kernel_rem_pio2f+0x438>
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	dc4d      	bgt.n	800c798 <__kernel_rem_pio2f+0x4c8>
 800c6fc:	d02e      	beq.n	800c75c <__kernel_rem_pio2f+0x48c>
 800c6fe:	f006 0007 	and.w	r0, r6, #7
 800c702:	b05b      	add	sp, #364	; 0x16c
 800c704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c708:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c70a:	2b03      	cmp	r3, #3
 800c70c:	d1f7      	bne.n	800c6fe <__kernel_rem_pio2f+0x42e>
 800c70e:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800c712:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800c716:	46b8      	mov	r8, r7
 800c718:	46aa      	mov	sl, r5
 800c71a:	f1ba 0f00 	cmp.w	sl, #0
 800c71e:	dc48      	bgt.n	800c7b2 <__kernel_rem_pio2f+0x4e2>
 800c720:	46a9      	mov	r9, r5
 800c722:	f1b9 0f01 	cmp.w	r9, #1
 800c726:	dc5f      	bgt.n	800c7e8 <__kernel_rem_pio2f+0x518>
 800c728:	2000      	movs	r0, #0
 800c72a:	2d01      	cmp	r5, #1
 800c72c:	dc75      	bgt.n	800c81a <__kernel_rem_pio2f+0x54a>
 800c72e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800c730:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800c732:	2c00      	cmp	r4, #0
 800c734:	d177      	bne.n	800c826 <__kernel_rem_pio2f+0x556>
 800c736:	9900      	ldr	r1, [sp, #0]
 800c738:	600a      	str	r2, [r1, #0]
 800c73a:	460a      	mov	r2, r1
 800c73c:	604b      	str	r3, [r1, #4]
 800c73e:	6090      	str	r0, [r2, #8]
 800c740:	e7dd      	b.n	800c6fe <__kernel_rem_pio2f+0x42e>
 800c742:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800c746:	f7f4 f9f7 	bl	8000b38 <__addsf3>
 800c74a:	3d01      	subs	r5, #1
 800c74c:	2d00      	cmp	r5, #0
 800c74e:	daf8      	bge.n	800c742 <__kernel_rem_pio2f+0x472>
 800c750:	b10c      	cbz	r4, 800c756 <__kernel_rem_pio2f+0x486>
 800c752:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c756:	9b00      	ldr	r3, [sp, #0]
 800c758:	6018      	str	r0, [r3, #0]
 800c75a:	e7d0      	b.n	800c6fe <__kernel_rem_pio2f+0x42e>
 800c75c:	2000      	movs	r0, #0
 800c75e:	af32      	add	r7, sp, #200	; 0xc8
 800c760:	e7f4      	b.n	800c74c <__kernel_rem_pio2f+0x47c>
 800c762:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800c766:	f7f4 f9e7 	bl	8000b38 <__addsf3>
 800c76a:	3f01      	subs	r7, #1
 800c76c:	2f00      	cmp	r7, #0
 800c76e:	daf8      	bge.n	800c762 <__kernel_rem_pio2f+0x492>
 800c770:	b1bc      	cbz	r4, 800c7a2 <__kernel_rem_pio2f+0x4d2>
 800c772:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800c776:	9a00      	ldr	r2, [sp, #0]
 800c778:	4601      	mov	r1, r0
 800c77a:	6013      	str	r3, [r2, #0]
 800c77c:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800c77e:	f7f4 f9d9 	bl	8000b34 <__aeabi_fsub>
 800c782:	2701      	movs	r7, #1
 800c784:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800c788:	42bd      	cmp	r5, r7
 800c78a:	da0c      	bge.n	800c7a6 <__kernel_rem_pio2f+0x4d6>
 800c78c:	b10c      	cbz	r4, 800c792 <__kernel_rem_pio2f+0x4c2>
 800c78e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c792:	9b00      	ldr	r3, [sp, #0]
 800c794:	6058      	str	r0, [r3, #4]
 800c796:	e7b2      	b.n	800c6fe <__kernel_rem_pio2f+0x42e>
 800c798:	462f      	mov	r7, r5
 800c79a:	2000      	movs	r0, #0
 800c79c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800c7a0:	e7e4      	b.n	800c76c <__kernel_rem_pio2f+0x49c>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	e7e7      	b.n	800c776 <__kernel_rem_pio2f+0x4a6>
 800c7a6:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800c7aa:	f7f4 f9c5 	bl	8000b38 <__addsf3>
 800c7ae:	3701      	adds	r7, #1
 800c7b0:	e7ea      	b.n	800c788 <__kernel_rem_pio2f+0x4b8>
 800c7b2:	f8d8 3000 	ldr.w	r3, [r8]
 800c7b6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	4610      	mov	r0, r2
 800c7be:	9302      	str	r3, [sp, #8]
 800c7c0:	9201      	str	r2, [sp, #4]
 800c7c2:	f7f4 f9b9 	bl	8000b38 <__addsf3>
 800c7c6:	9a01      	ldr	r2, [sp, #4]
 800c7c8:	4601      	mov	r1, r0
 800c7ca:	4681      	mov	r9, r0
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	f7f4 f9b1 	bl	8000b34 <__aeabi_fsub>
 800c7d2:	9b02      	ldr	r3, [sp, #8]
 800c7d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7d8:	4619      	mov	r1, r3
 800c7da:	f7f4 f9ad 	bl	8000b38 <__addsf3>
 800c7de:	f848 0904 	str.w	r0, [r8], #-4
 800c7e2:	f8c8 9000 	str.w	r9, [r8]
 800c7e6:	e798      	b.n	800c71a <__kernel_rem_pio2f+0x44a>
 800c7e8:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800c7ec:	f8d7 a000 	ldr.w	sl, [r7]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	4651      	mov	r1, sl
 800c7f4:	9301      	str	r3, [sp, #4]
 800c7f6:	f7f4 f99f 	bl	8000b38 <__addsf3>
 800c7fa:	9b01      	ldr	r3, [sp, #4]
 800c7fc:	4601      	mov	r1, r0
 800c7fe:	4680      	mov	r8, r0
 800c800:	4618      	mov	r0, r3
 800c802:	f7f4 f997 	bl	8000b34 <__aeabi_fsub>
 800c806:	4651      	mov	r1, sl
 800c808:	f7f4 f996 	bl	8000b38 <__addsf3>
 800c80c:	f847 0904 	str.w	r0, [r7], #-4
 800c810:	f109 39ff 	add.w	r9, r9, #4294967295
 800c814:	f8c7 8000 	str.w	r8, [r7]
 800c818:	e783      	b.n	800c722 <__kernel_rem_pio2f+0x452>
 800c81a:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800c81e:	f7f4 f98b 	bl	8000b38 <__addsf3>
 800c822:	3d01      	subs	r5, #1
 800c824:	e781      	b.n	800c72a <__kernel_rem_pio2f+0x45a>
 800c826:	9900      	ldr	r1, [sp, #0]
 800c828:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800c82c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c830:	600a      	str	r2, [r1, #0]
 800c832:	604b      	str	r3, [r1, #4]
 800c834:	460a      	mov	r2, r1
 800c836:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c83a:	e780      	b.n	800c73e <__kernel_rem_pio2f+0x46e>

0800c83c <__kernel_sinf>:
 800c83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c840:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c844:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c848:	4604      	mov	r4, r0
 800c84a:	460f      	mov	r7, r1
 800c84c:	4691      	mov	r9, r2
 800c84e:	da03      	bge.n	800c858 <__kernel_sinf+0x1c>
 800c850:	f7f4 fc40 	bl	80010d4 <__aeabi_f2iz>
 800c854:	2800      	cmp	r0, #0
 800c856:	d035      	beq.n	800c8c4 <__kernel_sinf+0x88>
 800c858:	4621      	mov	r1, r4
 800c85a:	4620      	mov	r0, r4
 800c85c:	f7f4 fa74 	bl	8000d48 <__aeabi_fmul>
 800c860:	4605      	mov	r5, r0
 800c862:	4601      	mov	r1, r0
 800c864:	4620      	mov	r0, r4
 800c866:	f7f4 fa6f 	bl	8000d48 <__aeabi_fmul>
 800c86a:	4929      	ldr	r1, [pc, #164]	; (800c910 <__kernel_sinf+0xd4>)
 800c86c:	4606      	mov	r6, r0
 800c86e:	4628      	mov	r0, r5
 800c870:	f7f4 fa6a 	bl	8000d48 <__aeabi_fmul>
 800c874:	4927      	ldr	r1, [pc, #156]	; (800c914 <__kernel_sinf+0xd8>)
 800c876:	f7f4 f95d 	bl	8000b34 <__aeabi_fsub>
 800c87a:	4629      	mov	r1, r5
 800c87c:	f7f4 fa64 	bl	8000d48 <__aeabi_fmul>
 800c880:	4925      	ldr	r1, [pc, #148]	; (800c918 <__kernel_sinf+0xdc>)
 800c882:	f7f4 f959 	bl	8000b38 <__addsf3>
 800c886:	4629      	mov	r1, r5
 800c888:	f7f4 fa5e 	bl	8000d48 <__aeabi_fmul>
 800c88c:	4923      	ldr	r1, [pc, #140]	; (800c91c <__kernel_sinf+0xe0>)
 800c88e:	f7f4 f951 	bl	8000b34 <__aeabi_fsub>
 800c892:	4629      	mov	r1, r5
 800c894:	f7f4 fa58 	bl	8000d48 <__aeabi_fmul>
 800c898:	4921      	ldr	r1, [pc, #132]	; (800c920 <__kernel_sinf+0xe4>)
 800c89a:	f7f4 f94d 	bl	8000b38 <__addsf3>
 800c89e:	4680      	mov	r8, r0
 800c8a0:	f1b9 0f00 	cmp.w	r9, #0
 800c8a4:	d111      	bne.n	800c8ca <__kernel_sinf+0x8e>
 800c8a6:	4601      	mov	r1, r0
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	f7f4 fa4d 	bl	8000d48 <__aeabi_fmul>
 800c8ae:	491d      	ldr	r1, [pc, #116]	; (800c924 <__kernel_sinf+0xe8>)
 800c8b0:	f7f4 f940 	bl	8000b34 <__aeabi_fsub>
 800c8b4:	4631      	mov	r1, r6
 800c8b6:	f7f4 fa47 	bl	8000d48 <__aeabi_fmul>
 800c8ba:	4601      	mov	r1, r0
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f7f4 f93b 	bl	8000b38 <__addsf3>
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8ca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c8ce:	4638      	mov	r0, r7
 800c8d0:	f7f4 fa3a 	bl	8000d48 <__aeabi_fmul>
 800c8d4:	4641      	mov	r1, r8
 800c8d6:	4681      	mov	r9, r0
 800c8d8:	4630      	mov	r0, r6
 800c8da:	f7f4 fa35 	bl	8000d48 <__aeabi_fmul>
 800c8de:	4601      	mov	r1, r0
 800c8e0:	4648      	mov	r0, r9
 800c8e2:	f7f4 f927 	bl	8000b34 <__aeabi_fsub>
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	f7f4 fa2e 	bl	8000d48 <__aeabi_fmul>
 800c8ec:	4639      	mov	r1, r7
 800c8ee:	f7f4 f921 	bl	8000b34 <__aeabi_fsub>
 800c8f2:	490c      	ldr	r1, [pc, #48]	; (800c924 <__kernel_sinf+0xe8>)
 800c8f4:	4605      	mov	r5, r0
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	f7f4 fa26 	bl	8000d48 <__aeabi_fmul>
 800c8fc:	4601      	mov	r1, r0
 800c8fe:	4628      	mov	r0, r5
 800c900:	f7f4 f91a 	bl	8000b38 <__addsf3>
 800c904:	4601      	mov	r1, r0
 800c906:	4620      	mov	r0, r4
 800c908:	f7f4 f914 	bl	8000b34 <__aeabi_fsub>
 800c90c:	e7d9      	b.n	800c8c2 <__kernel_sinf+0x86>
 800c90e:	bf00      	nop
 800c910:	2f2ec9d3 	.word	0x2f2ec9d3
 800c914:	32d72f34 	.word	0x32d72f34
 800c918:	3638ef1b 	.word	0x3638ef1b
 800c91c:	39500d01 	.word	0x39500d01
 800c920:	3c088889 	.word	0x3c088889
 800c924:	3e2aaaab 	.word	0x3e2aaaab

0800c928 <atan>:
 800c928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92c:	4bb6      	ldr	r3, [pc, #728]	; (800cc08 <atan+0x2e0>)
 800c92e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c932:	429e      	cmp	r6, r3
 800c934:	4604      	mov	r4, r0
 800c936:	460d      	mov	r5, r1
 800c938:	468b      	mov	fp, r1
 800c93a:	dd17      	ble.n	800c96c <atan+0x44>
 800c93c:	4bb3      	ldr	r3, [pc, #716]	; (800cc0c <atan+0x2e4>)
 800c93e:	429e      	cmp	r6, r3
 800c940:	dc01      	bgt.n	800c946 <atan+0x1e>
 800c942:	d109      	bne.n	800c958 <atan+0x30>
 800c944:	b140      	cbz	r0, 800c958 <atan+0x30>
 800c946:	4622      	mov	r2, r4
 800c948:	462b      	mov	r3, r5
 800c94a:	4620      	mov	r0, r4
 800c94c:	4629      	mov	r1, r5
 800c94e:	f7f3 fc17 	bl	8000180 <__adddf3>
 800c952:	4604      	mov	r4, r0
 800c954:	460d      	mov	r5, r1
 800c956:	e005      	b.n	800c964 <atan+0x3c>
 800c958:	f1bb 0f00 	cmp.w	fp, #0
 800c95c:	4cac      	ldr	r4, [pc, #688]	; (800cc10 <atan+0x2e8>)
 800c95e:	f300 8121 	bgt.w	800cba4 <atan+0x27c>
 800c962:	4dac      	ldr	r5, [pc, #688]	; (800cc14 <atan+0x2ec>)
 800c964:	4620      	mov	r0, r4
 800c966:	4629      	mov	r1, r5
 800c968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c96c:	4baa      	ldr	r3, [pc, #680]	; (800cc18 <atan+0x2f0>)
 800c96e:	429e      	cmp	r6, r3
 800c970:	dc11      	bgt.n	800c996 <atan+0x6e>
 800c972:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c976:	429e      	cmp	r6, r3
 800c978:	dc0a      	bgt.n	800c990 <atan+0x68>
 800c97a:	a38b      	add	r3, pc, #556	; (adr r3, 800cba8 <atan+0x280>)
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	f7f3 fbfe 	bl	8000180 <__adddf3>
 800c984:	2200      	movs	r2, #0
 800c986:	4ba5      	ldr	r3, [pc, #660]	; (800cc1c <atan+0x2f4>)
 800c988:	f7f4 f840 	bl	8000a0c <__aeabi_dcmpgt>
 800c98c:	2800      	cmp	r0, #0
 800c98e:	d1e9      	bne.n	800c964 <atan+0x3c>
 800c990:	f04f 3aff 	mov.w	sl, #4294967295
 800c994:	e027      	b.n	800c9e6 <atan+0xbe>
 800c996:	f000 f951 	bl	800cc3c <fabs>
 800c99a:	4ba1      	ldr	r3, [pc, #644]	; (800cc20 <atan+0x2f8>)
 800c99c:	4604      	mov	r4, r0
 800c99e:	429e      	cmp	r6, r3
 800c9a0:	460d      	mov	r5, r1
 800c9a2:	f300 80b8 	bgt.w	800cb16 <atan+0x1ee>
 800c9a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c9aa:	429e      	cmp	r6, r3
 800c9ac:	f300 809c 	bgt.w	800cae8 <atan+0x1c0>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	f7f3 fbe4 	bl	8000180 <__adddf3>
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	4b98      	ldr	r3, [pc, #608]	; (800cc1c <atan+0x2f4>)
 800c9bc:	f7f3 fbde 	bl	800017c <__aeabi_dsub>
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	4606      	mov	r6, r0
 800c9c4:	460f      	mov	r7, r1
 800c9c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	4629      	mov	r1, r5
 800c9ce:	f7f3 fbd7 	bl	8000180 <__adddf3>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	4630      	mov	r0, r6
 800c9d8:	4639      	mov	r1, r7
 800c9da:	f7f3 feb1 	bl	8000740 <__aeabi_ddiv>
 800c9de:	f04f 0a00 	mov.w	sl, #0
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	460d      	mov	r5, r1
 800c9e6:	4622      	mov	r2, r4
 800c9e8:	462b      	mov	r3, r5
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	4629      	mov	r1, r5
 800c9ee:	f7f3 fd7d 	bl	80004ec <__aeabi_dmul>
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	4680      	mov	r8, r0
 800c9f8:	4689      	mov	r9, r1
 800c9fa:	f7f3 fd77 	bl	80004ec <__aeabi_dmul>
 800c9fe:	a36c      	add	r3, pc, #432	; (adr r3, 800cbb0 <atan+0x288>)
 800ca00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca04:	4606      	mov	r6, r0
 800ca06:	460f      	mov	r7, r1
 800ca08:	f7f3 fd70 	bl	80004ec <__aeabi_dmul>
 800ca0c:	a36a      	add	r3, pc, #424	; (adr r3, 800cbb8 <atan+0x290>)
 800ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca12:	f7f3 fbb5 	bl	8000180 <__adddf3>
 800ca16:	4632      	mov	r2, r6
 800ca18:	463b      	mov	r3, r7
 800ca1a:	f7f3 fd67 	bl	80004ec <__aeabi_dmul>
 800ca1e:	a368      	add	r3, pc, #416	; (adr r3, 800cbc0 <atan+0x298>)
 800ca20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca24:	f7f3 fbac 	bl	8000180 <__adddf3>
 800ca28:	4632      	mov	r2, r6
 800ca2a:	463b      	mov	r3, r7
 800ca2c:	f7f3 fd5e 	bl	80004ec <__aeabi_dmul>
 800ca30:	a365      	add	r3, pc, #404	; (adr r3, 800cbc8 <atan+0x2a0>)
 800ca32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca36:	f7f3 fba3 	bl	8000180 <__adddf3>
 800ca3a:	4632      	mov	r2, r6
 800ca3c:	463b      	mov	r3, r7
 800ca3e:	f7f3 fd55 	bl	80004ec <__aeabi_dmul>
 800ca42:	a363      	add	r3, pc, #396	; (adr r3, 800cbd0 <atan+0x2a8>)
 800ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca48:	f7f3 fb9a 	bl	8000180 <__adddf3>
 800ca4c:	4632      	mov	r2, r6
 800ca4e:	463b      	mov	r3, r7
 800ca50:	f7f3 fd4c 	bl	80004ec <__aeabi_dmul>
 800ca54:	a360      	add	r3, pc, #384	; (adr r3, 800cbd8 <atan+0x2b0>)
 800ca56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5a:	f7f3 fb91 	bl	8000180 <__adddf3>
 800ca5e:	4642      	mov	r2, r8
 800ca60:	464b      	mov	r3, r9
 800ca62:	f7f3 fd43 	bl	80004ec <__aeabi_dmul>
 800ca66:	a35e      	add	r3, pc, #376	; (adr r3, 800cbe0 <atan+0x2b8>)
 800ca68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6c:	4680      	mov	r8, r0
 800ca6e:	4689      	mov	r9, r1
 800ca70:	4630      	mov	r0, r6
 800ca72:	4639      	mov	r1, r7
 800ca74:	f7f3 fd3a 	bl	80004ec <__aeabi_dmul>
 800ca78:	a35b      	add	r3, pc, #364	; (adr r3, 800cbe8 <atan+0x2c0>)
 800ca7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7e:	f7f3 fb7d 	bl	800017c <__aeabi_dsub>
 800ca82:	4632      	mov	r2, r6
 800ca84:	463b      	mov	r3, r7
 800ca86:	f7f3 fd31 	bl	80004ec <__aeabi_dmul>
 800ca8a:	a359      	add	r3, pc, #356	; (adr r3, 800cbf0 <atan+0x2c8>)
 800ca8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca90:	f7f3 fb74 	bl	800017c <__aeabi_dsub>
 800ca94:	4632      	mov	r2, r6
 800ca96:	463b      	mov	r3, r7
 800ca98:	f7f3 fd28 	bl	80004ec <__aeabi_dmul>
 800ca9c:	a356      	add	r3, pc, #344	; (adr r3, 800cbf8 <atan+0x2d0>)
 800ca9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa2:	f7f3 fb6b 	bl	800017c <__aeabi_dsub>
 800caa6:	4632      	mov	r2, r6
 800caa8:	463b      	mov	r3, r7
 800caaa:	f7f3 fd1f 	bl	80004ec <__aeabi_dmul>
 800caae:	a354      	add	r3, pc, #336	; (adr r3, 800cc00 <atan+0x2d8>)
 800cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab4:	f7f3 fb62 	bl	800017c <__aeabi_dsub>
 800cab8:	4632      	mov	r2, r6
 800caba:	463b      	mov	r3, r7
 800cabc:	f7f3 fd16 	bl	80004ec <__aeabi_dmul>
 800cac0:	4602      	mov	r2, r0
 800cac2:	460b      	mov	r3, r1
 800cac4:	4640      	mov	r0, r8
 800cac6:	4649      	mov	r1, r9
 800cac8:	f7f3 fb5a 	bl	8000180 <__adddf3>
 800cacc:	4622      	mov	r2, r4
 800cace:	462b      	mov	r3, r5
 800cad0:	f7f3 fd0c 	bl	80004ec <__aeabi_dmul>
 800cad4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cad8:	4602      	mov	r2, r0
 800cada:	460b      	mov	r3, r1
 800cadc:	d144      	bne.n	800cb68 <atan+0x240>
 800cade:	4620      	mov	r0, r4
 800cae0:	4629      	mov	r1, r5
 800cae2:	f7f3 fb4b 	bl	800017c <__aeabi_dsub>
 800cae6:	e734      	b.n	800c952 <atan+0x2a>
 800cae8:	2200      	movs	r2, #0
 800caea:	4b4c      	ldr	r3, [pc, #304]	; (800cc1c <atan+0x2f4>)
 800caec:	f7f3 fb46 	bl	800017c <__aeabi_dsub>
 800caf0:	2200      	movs	r2, #0
 800caf2:	4606      	mov	r6, r0
 800caf4:	460f      	mov	r7, r1
 800caf6:	4620      	mov	r0, r4
 800caf8:	4629      	mov	r1, r5
 800cafa:	4b48      	ldr	r3, [pc, #288]	; (800cc1c <atan+0x2f4>)
 800cafc:	f7f3 fb40 	bl	8000180 <__adddf3>
 800cb00:	4602      	mov	r2, r0
 800cb02:	460b      	mov	r3, r1
 800cb04:	4630      	mov	r0, r6
 800cb06:	4639      	mov	r1, r7
 800cb08:	f7f3 fe1a 	bl	8000740 <__aeabi_ddiv>
 800cb0c:	f04f 0a01 	mov.w	sl, #1
 800cb10:	4604      	mov	r4, r0
 800cb12:	460d      	mov	r5, r1
 800cb14:	e767      	b.n	800c9e6 <atan+0xbe>
 800cb16:	4b43      	ldr	r3, [pc, #268]	; (800cc24 <atan+0x2fc>)
 800cb18:	429e      	cmp	r6, r3
 800cb1a:	da1a      	bge.n	800cb52 <atan+0x22a>
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	4b42      	ldr	r3, [pc, #264]	; (800cc28 <atan+0x300>)
 800cb20:	f7f3 fb2c 	bl	800017c <__aeabi_dsub>
 800cb24:	2200      	movs	r2, #0
 800cb26:	4606      	mov	r6, r0
 800cb28:	460f      	mov	r7, r1
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	4629      	mov	r1, r5
 800cb2e:	4b3e      	ldr	r3, [pc, #248]	; (800cc28 <atan+0x300>)
 800cb30:	f7f3 fcdc 	bl	80004ec <__aeabi_dmul>
 800cb34:	2200      	movs	r2, #0
 800cb36:	4b39      	ldr	r3, [pc, #228]	; (800cc1c <atan+0x2f4>)
 800cb38:	f7f3 fb22 	bl	8000180 <__adddf3>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	460b      	mov	r3, r1
 800cb40:	4630      	mov	r0, r6
 800cb42:	4639      	mov	r1, r7
 800cb44:	f7f3 fdfc 	bl	8000740 <__aeabi_ddiv>
 800cb48:	f04f 0a02 	mov.w	sl, #2
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	460d      	mov	r5, r1
 800cb50:	e749      	b.n	800c9e6 <atan+0xbe>
 800cb52:	4602      	mov	r2, r0
 800cb54:	460b      	mov	r3, r1
 800cb56:	2000      	movs	r0, #0
 800cb58:	4934      	ldr	r1, [pc, #208]	; (800cc2c <atan+0x304>)
 800cb5a:	f7f3 fdf1 	bl	8000740 <__aeabi_ddiv>
 800cb5e:	f04f 0a03 	mov.w	sl, #3
 800cb62:	4604      	mov	r4, r0
 800cb64:	460d      	mov	r5, r1
 800cb66:	e73e      	b.n	800c9e6 <atan+0xbe>
 800cb68:	4b31      	ldr	r3, [pc, #196]	; (800cc30 <atan+0x308>)
 800cb6a:	4e32      	ldr	r6, [pc, #200]	; (800cc34 <atan+0x30c>)
 800cb6c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cb70:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800cb74:	e9da 2300 	ldrd	r2, r3, [sl]
 800cb78:	f7f3 fb00 	bl	800017c <__aeabi_dsub>
 800cb7c:	4622      	mov	r2, r4
 800cb7e:	462b      	mov	r3, r5
 800cb80:	f7f3 fafc 	bl	800017c <__aeabi_dsub>
 800cb84:	4602      	mov	r2, r0
 800cb86:	460b      	mov	r3, r1
 800cb88:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cb8c:	f7f3 faf6 	bl	800017c <__aeabi_dsub>
 800cb90:	f1bb 0f00 	cmp.w	fp, #0
 800cb94:	4604      	mov	r4, r0
 800cb96:	460d      	mov	r5, r1
 800cb98:	f6bf aee4 	bge.w	800c964 <atan+0x3c>
 800cb9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cba0:	461d      	mov	r5, r3
 800cba2:	e6df      	b.n	800c964 <atan+0x3c>
 800cba4:	4d24      	ldr	r5, [pc, #144]	; (800cc38 <atan+0x310>)
 800cba6:	e6dd      	b.n	800c964 <atan+0x3c>
 800cba8:	8800759c 	.word	0x8800759c
 800cbac:	7e37e43c 	.word	0x7e37e43c
 800cbb0:	e322da11 	.word	0xe322da11
 800cbb4:	3f90ad3a 	.word	0x3f90ad3a
 800cbb8:	24760deb 	.word	0x24760deb
 800cbbc:	3fa97b4b 	.word	0x3fa97b4b
 800cbc0:	a0d03d51 	.word	0xa0d03d51
 800cbc4:	3fb10d66 	.word	0x3fb10d66
 800cbc8:	c54c206e 	.word	0xc54c206e
 800cbcc:	3fb745cd 	.word	0x3fb745cd
 800cbd0:	920083ff 	.word	0x920083ff
 800cbd4:	3fc24924 	.word	0x3fc24924
 800cbd8:	5555550d 	.word	0x5555550d
 800cbdc:	3fd55555 	.word	0x3fd55555
 800cbe0:	2c6a6c2f 	.word	0x2c6a6c2f
 800cbe4:	bfa2b444 	.word	0xbfa2b444
 800cbe8:	52defd9a 	.word	0x52defd9a
 800cbec:	3fadde2d 	.word	0x3fadde2d
 800cbf0:	af749a6d 	.word	0xaf749a6d
 800cbf4:	3fb3b0f2 	.word	0x3fb3b0f2
 800cbf8:	fe231671 	.word	0xfe231671
 800cbfc:	3fbc71c6 	.word	0x3fbc71c6
 800cc00:	9998ebc4 	.word	0x9998ebc4
 800cc04:	3fc99999 	.word	0x3fc99999
 800cc08:	440fffff 	.word	0x440fffff
 800cc0c:	7ff00000 	.word	0x7ff00000
 800cc10:	54442d18 	.word	0x54442d18
 800cc14:	bff921fb 	.word	0xbff921fb
 800cc18:	3fdbffff 	.word	0x3fdbffff
 800cc1c:	3ff00000 	.word	0x3ff00000
 800cc20:	3ff2ffff 	.word	0x3ff2ffff
 800cc24:	40038000 	.word	0x40038000
 800cc28:	3ff80000 	.word	0x3ff80000
 800cc2c:	bff00000 	.word	0xbff00000
 800cc30:	0800e2c0 	.word	0x0800e2c0
 800cc34:	0800e2a0 	.word	0x0800e2a0
 800cc38:	3ff921fb 	.word	0x3ff921fb

0800cc3c <fabs>:
 800cc3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cc40:	4770      	bx	lr
	...

0800cc44 <nan>:
 800cc44:	2000      	movs	r0, #0
 800cc46:	4901      	ldr	r1, [pc, #4]	; (800cc4c <nan+0x8>)
 800cc48:	4770      	bx	lr
 800cc4a:	bf00      	nop
 800cc4c:	7ff80000 	.word	0x7ff80000

0800cc50 <fabsf>:
 800cc50:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800cc54:	4770      	bx	lr
	...

0800cc58 <floorf>:
 800cc58:	b570      	push	{r4, r5, r6, lr}
 800cc5a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800cc5e:	3d7f      	subs	r5, #127	; 0x7f
 800cc60:	2d16      	cmp	r5, #22
 800cc62:	4601      	mov	r1, r0
 800cc64:	4604      	mov	r4, r0
 800cc66:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800cc6a:	dc26      	bgt.n	800ccba <floorf+0x62>
 800cc6c:	2d00      	cmp	r5, #0
 800cc6e:	da0e      	bge.n	800cc8e <floorf+0x36>
 800cc70:	4917      	ldr	r1, [pc, #92]	; (800ccd0 <floorf+0x78>)
 800cc72:	f7f3 ff61 	bl	8000b38 <__addsf3>
 800cc76:	2100      	movs	r1, #0
 800cc78:	f7f4 fa22 	bl	80010c0 <__aeabi_fcmpgt>
 800cc7c:	b128      	cbz	r0, 800cc8a <floorf+0x32>
 800cc7e:	2c00      	cmp	r4, #0
 800cc80:	da23      	bge.n	800ccca <floorf+0x72>
 800cc82:	4b14      	ldr	r3, [pc, #80]	; (800ccd4 <floorf+0x7c>)
 800cc84:	2e00      	cmp	r6, #0
 800cc86:	bf18      	it	ne
 800cc88:	461c      	movne	r4, r3
 800cc8a:	4621      	mov	r1, r4
 800cc8c:	e01b      	b.n	800ccc6 <floorf+0x6e>
 800cc8e:	4e12      	ldr	r6, [pc, #72]	; (800ccd8 <floorf+0x80>)
 800cc90:	412e      	asrs	r6, r5
 800cc92:	4230      	tst	r0, r6
 800cc94:	d017      	beq.n	800ccc6 <floorf+0x6e>
 800cc96:	490e      	ldr	r1, [pc, #56]	; (800ccd0 <floorf+0x78>)
 800cc98:	f7f3 ff4e 	bl	8000b38 <__addsf3>
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	f7f4 fa0f 	bl	80010c0 <__aeabi_fcmpgt>
 800cca2:	2800      	cmp	r0, #0
 800cca4:	d0f1      	beq.n	800cc8a <floorf+0x32>
 800cca6:	2c00      	cmp	r4, #0
 800cca8:	bfbe      	ittt	lt
 800ccaa:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800ccae:	fa43 f505 	asrlt.w	r5, r3, r5
 800ccb2:	1964      	addlt	r4, r4, r5
 800ccb4:	ea24 0406 	bic.w	r4, r4, r6
 800ccb8:	e7e7      	b.n	800cc8a <floorf+0x32>
 800ccba:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ccbe:	d302      	bcc.n	800ccc6 <floorf+0x6e>
 800ccc0:	f7f3 ff3a 	bl	8000b38 <__addsf3>
 800ccc4:	4601      	mov	r1, r0
 800ccc6:	4608      	mov	r0, r1
 800ccc8:	bd70      	pop	{r4, r5, r6, pc}
 800ccca:	2400      	movs	r4, #0
 800cccc:	e7dd      	b.n	800cc8a <floorf+0x32>
 800ccce:	bf00      	nop
 800ccd0:	7149f2ca 	.word	0x7149f2ca
 800ccd4:	bf800000 	.word	0xbf800000
 800ccd8:	007fffff 	.word	0x007fffff

0800ccdc <scalbnf>:
 800ccdc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800cce0:	b538      	push	{r3, r4, r5, lr}
 800cce2:	4603      	mov	r3, r0
 800cce4:	460d      	mov	r5, r1
 800cce6:	4604      	mov	r4, r0
 800cce8:	d02a      	beq.n	800cd40 <scalbnf+0x64>
 800ccea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ccee:	d304      	bcc.n	800ccfa <scalbnf+0x1e>
 800ccf0:	4601      	mov	r1, r0
 800ccf2:	f7f3 ff21 	bl	8000b38 <__addsf3>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	e022      	b.n	800cd40 <scalbnf+0x64>
 800ccfa:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800ccfe:	d117      	bne.n	800cd30 <scalbnf+0x54>
 800cd00:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800cd04:	f7f4 f820 	bl	8000d48 <__aeabi_fmul>
 800cd08:	4a17      	ldr	r2, [pc, #92]	; (800cd68 <scalbnf+0x8c>)
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	4295      	cmp	r5, r2
 800cd0e:	db0b      	blt.n	800cd28 <scalbnf+0x4c>
 800cd10:	4604      	mov	r4, r0
 800cd12:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800cd16:	3a19      	subs	r2, #25
 800cd18:	442a      	add	r2, r5
 800cd1a:	2afe      	cmp	r2, #254	; 0xfe
 800cd1c:	dd0a      	ble.n	800cd34 <scalbnf+0x58>
 800cd1e:	4913      	ldr	r1, [pc, #76]	; (800cd6c <scalbnf+0x90>)
 800cd20:	4618      	mov	r0, r3
 800cd22:	f361 001e 	bfi	r0, r1, #0, #31
 800cd26:	e000      	b.n	800cd2a <scalbnf+0x4e>
 800cd28:	4911      	ldr	r1, [pc, #68]	; (800cd70 <scalbnf+0x94>)
 800cd2a:	f7f4 f80d 	bl	8000d48 <__aeabi_fmul>
 800cd2e:	e7e2      	b.n	800ccf6 <scalbnf+0x1a>
 800cd30:	0dd2      	lsrs	r2, r2, #23
 800cd32:	e7f1      	b.n	800cd18 <scalbnf+0x3c>
 800cd34:	2a00      	cmp	r2, #0
 800cd36:	dd05      	ble.n	800cd44 <scalbnf+0x68>
 800cd38:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800cd3c:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800cd40:	4618      	mov	r0, r3
 800cd42:	bd38      	pop	{r3, r4, r5, pc}
 800cd44:	f112 0f16 	cmn.w	r2, #22
 800cd48:	da05      	bge.n	800cd56 <scalbnf+0x7a>
 800cd4a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800cd4e:	4295      	cmp	r5, r2
 800cd50:	dce5      	bgt.n	800cd1e <scalbnf+0x42>
 800cd52:	4907      	ldr	r1, [pc, #28]	; (800cd70 <scalbnf+0x94>)
 800cd54:	e7e4      	b.n	800cd20 <scalbnf+0x44>
 800cd56:	3219      	adds	r2, #25
 800cd58:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800cd5c:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800cd60:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800cd64:	e7e1      	b.n	800cd2a <scalbnf+0x4e>
 800cd66:	bf00      	nop
 800cd68:	ffff3cb0 	.word	0xffff3cb0
 800cd6c:	7149f2ca 	.word	0x7149f2ca
 800cd70:	0da24260 	.word	0x0da24260

0800cd74 <_init>:
 800cd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd76:	bf00      	nop
 800cd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd7a:	bc08      	pop	{r3}
 800cd7c:	469e      	mov	lr, r3
 800cd7e:	4770      	bx	lr

0800cd80 <_fini>:
 800cd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd82:	bf00      	nop
 800cd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd86:	bc08      	pop	{r3}
 800cd88:	469e      	mov	lr, r3
 800cd8a:	4770      	bx	lr
